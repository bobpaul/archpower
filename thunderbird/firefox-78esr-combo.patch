From e089bf020bd651edc4fb03b9e19836936c60f759 Mon Sep 17 00:00:00 2001
From: Arfrever Frehtes Taifersar Arahesis <Arfrever@Apache.Org>
Date: Mon, 6 Apr 2020 19:17:43 +0200
Subject: [PATCH 03/44] Check additional plugins dir

Check original plugins dir along with default plugins dir.

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 xpcom/io/nsAppFileLocationProvider.cpp | 18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

diff --git a/xpcom/io/nsAppFileLocationProvider.cpp b/xpcom/io/nsAppFileLocationProvider.cpp
index 915e8bc736..416b55b87f 100644
--- a/xpcom/io/nsAppFileLocationProvider.cpp
+++ b/xpcom/io/nsAppFileLocationProvider.cpp
@@ -50,6 +50,7 @@
 #  define NS_MACOSX_LOCAL_PLUGIN_DIR "OSXLocalPlugins"
 #elif XP_UNIX
 #  define NS_SYSTEM_PLUGINS_DIR "SysPlugins"
+#  define NS_SYSTEM_NSBROWSER_PLUGINS_DIR "SysNsBrowserPlugins"
 #endif
 
 #define DEFAULTS_DIR_NAME NS_LITERAL_CSTRING("defaults")
@@ -172,6 +173,21 @@ nsAppFileLocationProvider::GetFile(const char* aProp, bool* aPersistent,
                                getter_AddRefs(localFile));
 #    else
     rv = NS_ERROR_FAILURE;
+#    endif
+  } else if (nsCRT::strcmp(aProp, NS_SYSTEM_NSBROWSER_PLUGINS_DIR) == 0) {
+#    ifdef ENABLE_SYSTEM_EXTENSION_DIRS
+    static const char* const sysLPlgDir =
+#      if defined(HAVE_USR_LIB64_DIR) && defined(__LP64__)
+        "/usr/lib64/nsbrowser/plugins";
+#      elif defined(__OpenBSD__) || defined(__FreeBSD__)
+        "/usr/local/lib/nsbrowser/plugins";
+#      else
+        "/usr/lib/nsbrowser/plugins";
+#      endif
+    rv = NS_NewNativeLocalFile(nsDependentCString(sysLPlgDir), false,
+                               getter_AddRefs(localFile));
+#    else
+    rv = NS_ERROR_FAILURE;
 #    endif
   }
 #  endif
@@ -418,7 +434,7 @@ nsAppFileLocationProvider::GetFiles(const char* aProp,
 #else
 #  ifdef XP_UNIX
     static const char* keys[] = {NS_USER_PLUGINS_DIR, NS_SYSTEM_PLUGINS_DIR,
-                                 nullptr};
+                                 NS_SYSTEM_NSBROWSER_PLUGINS_DIR, nullptr};
 #  else
     static const char* keys[] = {NS_USER_PLUGINS_DIR, nullptr};
 #  endif
-- 
2.31.1

From afa709d7aff8fbe02bc7f8a6a63e22743091429e Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 19:32:39 +0200
Subject: [PATCH 04/44] bmo#847568: Support system harfbuzz

Allow building against system-wide harfbuzz.

Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=847568
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 config/system-headers.mozbuild  |  7 +++++++
 dom/base/moz.build              |  3 +++
 gfx/moz.build                   |  4 +++-
 gfx/skia/generate_mozbuild.py   |  3 +++
 gfx/skia/moz.build              |  3 +++
 gfx/thebes/moz.build            |  3 +++
 intl/unicharutil/util/moz.build |  3 +++
 netwerk/dns/moz.build           |  3 +++
 toolkit/library/moz.build       |  3 +++
 toolkit/moz.configure           | 10 ++++++++++
 10 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/config/system-headers.mozbuild b/config/system-headers.mozbuild
index a2fd6daf3e..0337e9215f 100644
--- a/config/system-headers.mozbuild
+++ b/config/system-headers.mozbuild
@@ -1232,6 +1232,13 @@ if CONFIG['OS_TARGET'] == 'Android':
         'vr/gvr/capi/include/gvr.h',
     ]
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    system_headers += [
+	'harfbuzz/hb-glib.h',
+	'harfbuzz/hb-ot.h',
+	'harfbuzz/hb.h',
+    ]
+
 if CONFIG['MOZ_JACK']:
     system_headers += [
         'jack/jack.h',
diff --git a/dom/base/moz.build b/dom/base/moz.build
index a9966c01a0..86a3f17d6f 100644
--- a/dom/base/moz.build
+++ b/dom/base/moz.build
@@ -549,6 +549,9 @@ if CONFIG['MOZ_BUILD_APP'] in ['browser', 'mobile/android', 'xulrunner']:
 if CONFIG['MOZ_X11']:
     CXXFLAGS += CONFIG['TK_CFLAGS']
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 GeneratedFile('UseCounterList.h', script='gen-usecounters.py',
               entry_point='use_counter_list', inputs=['UseCounters.conf'])
 
diff --git a/gfx/moz.build b/gfx/moz.build
index 61d348a6bf..aa701068d7 100644
--- a/gfx/moz.build
+++ b/gfx/moz.build
@@ -13,6 +13,9 @@ with Files('wr/**'):
 if CONFIG['MOZ_TREE_CAIRO']:
     DIRS += ['cairo']
 
+if not CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    DIRS += ['harfbuzz/src']
+
 DIRS += [
     '2d',
     'ycbcr',
@@ -22,7 +25,6 @@ DIRS += [
     'gl',
     'layers',
     'graphite2/src',
-    'harfbuzz/src',
     'ots/src',
     'thebes',
     'ipc',
diff --git a/gfx/skia/generate_mozbuild.py b/gfx/skia/generate_mozbuild.py
index d5c409b657..9ad751e321 100755
--- a/gfx/skia/generate_mozbuild.py
+++ b/gfx/skia/generate_mozbuild.py
@@ -98,6 +98,9 @@ if CONFIG['CC_TYPE'] in ('clang', 'clang-cl'):
         '-Wno-unused-private-field',
     ]
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 if CONFIG['MOZ_WIDGET_TOOLKIT'] in ('gtk', 'android'):
     CXXFLAGS += CONFIG['MOZ_CAIRO_CFLAGS']
     CXXFLAGS += CONFIG['CAIRO_FT_CFLAGS']
diff --git a/gfx/skia/moz.build b/gfx/skia/moz.build
index 66b21aec25..6f0c015d09 100755
--- a/gfx/skia/moz.build
+++ b/gfx/skia/moz.build
@@ -490,6 +490,9 @@ if CONFIG['CC_TYPE'] in ('clang', 'clang-cl'):
         '-Wno-unused-private-field',
     ]
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 if CONFIG['MOZ_WIDGET_TOOLKIT'] in ('gtk', 'android'):
     CXXFLAGS += CONFIG['MOZ_CAIRO_CFLAGS']
     CXXFLAGS += CONFIG['CAIRO_FT_CFLAGS']
diff --git a/gfx/thebes/moz.build b/gfx/thebes/moz.build
index 8e5bcf1aea..a8a0d05f14 100644
--- a/gfx/thebes/moz.build
+++ b/gfx/thebes/moz.build
@@ -291,6 +291,9 @@ LOCAL_INCLUDES += CONFIG['SKIA_INCLUDES']
 
 DEFINES['GRAPHITE2_STATIC'] = True
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 if CONFIG['CC_TYPE'] == 'clang':
     # Suppress warnings from Skia header files.
     SOURCES['gfxPlatform.cpp'].flags += ['-Wno-implicit-fallthrough']
diff --git a/intl/unicharutil/util/moz.build b/intl/unicharutil/util/moz.build
index b12b3bb4f1..05f5ccfba1 100644
--- a/intl/unicharutil/util/moz.build
+++ b/intl/unicharutil/util/moz.build
@@ -25,4 +25,7 @@ UNIFIED_SOURCES += [
     'nsUnicodeProperties.cpp',
 ]
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 FINAL_LIBRARY = 'xul'
diff --git a/netwerk/dns/moz.build b/netwerk/dns/moz.build
index 0945029195..e291a5a4bd 100644
--- a/netwerk/dns/moz.build
+++ b/netwerk/dns/moz.build
@@ -94,6 +94,9 @@ LOCAL_INCLUDES += [
     '/netwerk/protocol/http',
 ]
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
+
 USE_LIBS += ['icu']
 
 if CONFIG['CC_TYPE'] in ('clang', 'gcc'):
diff --git a/toolkit/library/moz.build b/toolkit/library/moz.build
index cdc0577443..033da52502 100644
--- a/toolkit/library/moz.build
+++ b/toolkit/library/moz.build
@@ -234,6 +234,9 @@ if CONFIG['MOZ_ANDROID_GOOGLE_VR']:
 OS_LIBS += CONFIG['MOZ_CAIRO_OSLIBS']
 OS_LIBS += CONFIG['MOZ_WEBRTC_X11_LIBS']
 
+if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
+    OS_LIBS += CONFIG['MOZ_HARFBUZZ_LIBS']
+
 if CONFIG['MOZ_SYSTEM_JPEG']:
     OS_LIBS += CONFIG['MOZ_JPEG_LIBS']
 
diff --git a/toolkit/moz.configure b/toolkit/moz.configure
index ebc4dbdb2d..827d1de352 100644
--- a/toolkit/moz.configure
+++ b/toolkit/moz.configure
@@ -408,6 +408,16 @@ def freetype2_combined_info(fontconfig_info, freetype2_info):
 add_old_configure_assignment('_HAVE_FREETYPE2',
                              depends_if(freetype2_info)(lambda _: True))
 
+# HarfBuzz
+# ==============================================================
+option('--with-system-harfbuzz',
+       help="Use system harfbuzz (located with pkgconfig)")
+
+system_harfbuzz = pkg_check_modules('MOZ_HARFBUZZ', 'harfbuzz >= 2.3.1',
+                                    when='--with-system-harfbuzz')
+
+set_config('MOZ_SYSTEM_HARFBUZZ', depends_if(system_harfbuzz)(lambda _: True))
+
 # Apple platform decoder support
 # ==============================================================
 @depends(toolkit)
-- 
2.31.1

From b13c0af3be1fd9020caebfe9ffd05ee4ba08ff79 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 19:34:44 +0200
Subject: [PATCH 05/44] bmo#847568: Support system graphite2

Allow building against system-wide graphite2.

Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=847568
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 config/system-headers.mozbuild     |  6 ++++++
 gfx/graphite2/geckoextra/moz.build | 21 +++++++++++++++++++++
 gfx/graphite2/moz-gr-update.sh     |  7 ++++++-
 gfx/moz.build                      |  6 +++++-
 gfx/thebes/moz.build               |  5 ++++-
 old-configure.in                   | 21 +++++++++++++++++++++
 toolkit/library/moz.build          |  3 +++
 toolkit/moz.configure              | 14 ++++++++++++++
 8 files changed, 80 insertions(+), 3 deletions(-)
 create mode 100644 gfx/graphite2/geckoextra/moz.build

diff --git a/config/system-headers.mozbuild b/config/system-headers.mozbuild
index 0337e9215f..8e322e943e 100644
--- a/config/system-headers.mozbuild
+++ b/config/system-headers.mozbuild
@@ -1239,6 +1239,12 @@ if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
 	'harfbuzz/hb.h',
     ]
 
+if CONFIG['MOZ_SYSTEM_GRAPHITE2']:
+    system_headers += [
+	'graphite2/Font.h',
+	'graphite2/Segment.h',
+    ]
+
 if CONFIG['MOZ_JACK']:
     system_headers += [
         'jack/jack.h',
diff --git a/gfx/graphite2/geckoextra/moz.build b/gfx/graphite2/geckoextra/moz.build
new file mode 100644
index 0000000000..24e8d7a032
--- /dev/null
+++ b/gfx/graphite2/geckoextra/moz.build
@@ -0,0 +1,21 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+EXPORTS.graphite2 += [
+    'include/GraphiteExtra.h',
+    'include/GraphiteStructsForRLBox.h',
+]
+
+UNIFIED_SOURCES += [
+    '../geckoextra/src/GraphiteExtra.cpp',
+]
+
+CXXFLAGS += CONFIG['MOZ_GRAPHITE2_CFLAGS']
+
+# Match bundled graphite2 configuration
+AllowCompilerWarnings()
+
+FINAL_LIBRARY = 'gkmedias'
diff --git a/gfx/graphite2/moz-gr-update.sh b/gfx/graphite2/moz-gr-update.sh
index b91d9c161c..a97e6eb203 100755
--- a/gfx/graphite2/moz-gr-update.sh
+++ b/gfx/graphite2/moz-gr-update.sh
@@ -1,6 +1,7 @@
 #!/bin/bash
 
 # Script used to update the Graphite2 library in the mozilla source tree
+# and bump version for --with-system-graphite2
 
 # This script lives in gfx/graphite2, along with the library source,
 # but must be run from the top level of the mozilla-central tree.
@@ -37,12 +38,16 @@ echo "See" $0 "for update procedure." >> gfx/graphite2/README.mozilla
 #find gfx/graphite2/ -name "*.cpp" -exec perl -p -i -e "s/<cstdio>/<stdio.h>/;s/Windows.h/windows.h/;" {} \;
 #find gfx/graphite2/ -name "*.h" -exec perl -p -i -e "s/<cstdio>/<stdio.h>/;s/Windows.h/windows.h/;" {} \;
 
+# chase version for --with-system-graphite2
+perl -p -i -e "s/[0-9]+\,[0-9]+\,[0-9]+/$RELEASE/ and tr/./,/ \
+  if /GR2_VERSION_REQUIRE/" old-configure.in
+
 # summarize what's been touched
 echo Updated to $RELEASE.
 echo Here is what changed in the gfx/graphite2 directory:
 echo
 
-hg stat gfx/graphite2
+hg stat old-configure.in gfx/graphite2
 
 echo
 echo If gfx/graphite2/src/files.mk has changed, please make corresponding
diff --git a/gfx/moz.build b/gfx/moz.build
index aa701068d7..ff1eeed11d 100644
--- a/gfx/moz.build
+++ b/gfx/moz.build
@@ -13,6 +13,11 @@ with Files('wr/**'):
 if CONFIG['MOZ_TREE_CAIRO']:
     DIRS += ['cairo']
 
+if CONFIG['MOZ_SYSTEM_GRAPHITE2']:
+    DIRS += ['graphite2/geckoextra']
+else:
+    DIRS += ['graphite2/src' ]
+
 if not CONFIG['MOZ_SYSTEM_HARFBUZZ']:
     DIRS += ['harfbuzz/src']
 
@@ -24,7 +29,6 @@ DIRS += [
     'qcms',
     'gl',
     'layers',
-    'graphite2/src',
     'ots/src',
     'thebes',
     'ipc',
diff --git a/gfx/thebes/moz.build b/gfx/thebes/moz.build
index a8a0d05f14..fb53fda6d3 100644
--- a/gfx/thebes/moz.build
+++ b/gfx/thebes/moz.build
@@ -289,7 +289,10 @@ if CONFIG['MOZ_WAYLAND']:
 
 LOCAL_INCLUDES += CONFIG['SKIA_INCLUDES']
 
-DEFINES['GRAPHITE2_STATIC'] = True
+if CONFIG['MOZ_SYSTEM_GRAPHITE2']:
+    CXXFLAGS += CONFIG['MOZ_GRAPHITE2_CFLAGS']
+else:
+    DEFINES['GRAPHITE2_STATIC'] = True
 
 if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
     CXXFLAGS += CONFIG['MOZ_HARFBUZZ_CFLAGS']
diff --git a/old-configure.in b/old-configure.in
index 6890f3f070..ca2f3901f2 100644
--- a/old-configure.in
+++ b/old-configure.in
@@ -2395,6 +2395,27 @@ if test "$USE_FC_FREETYPE"; then
     fi
 fi
 
+dnl ========================================================
+dnl Check for graphite2
+dnl ========================================================
+if test -n "$MOZ_SYSTEM_GRAPHITE2"; then
+    dnl graphite2.pc has bogus version, check manually
+    _SAVE_CFLAGS=$CFLAGS
+    CFLAGS="$CFLAGS $MOZ_GRAPHITE2_CFLAGS"
+    AC_TRY_COMPILE([ #include <graphite2/Font.h>
+                     #define GR2_VERSION_REQUIRE(major,minor,bugfix)  \
+                             ( GR2_VERSION_MAJOR * 10000 + GR2_VERSION_MINOR \
+                               * 100 + GR2_VERSION_BUGFIX >= \
+                               (major) * 10000 + (minor) * 100 + (bugfix) )
+                   ], [
+                     #if !GR2_VERSION_REQUIRE(1,3,8)
+                     #error "Insufficient graphite2 version."
+                     #endif
+                   ], [],
+                   [AC_MSG_ERROR([--with-system-graphite2 requested but no working libgraphite2 found])])
+    CFLAGS=$_SAVE_CFLAGS
+fi
+
 dnl ========================================================
 dnl Check if we need the 32-bit Linux SSE2 error dialog
 dnl ========================================================
diff --git a/toolkit/library/moz.build b/toolkit/library/moz.build
index 033da52502..e6177c258a 100644
--- a/toolkit/library/moz.build
+++ b/toolkit/library/moz.build
@@ -234,6 +234,9 @@ if CONFIG['MOZ_ANDROID_GOOGLE_VR']:
 OS_LIBS += CONFIG['MOZ_CAIRO_OSLIBS']
 OS_LIBS += CONFIG['MOZ_WEBRTC_X11_LIBS']
 
+if CONFIG['MOZ_SYSTEM_GRAPHITE2']:
+    OS_LIBS += CONFIG['MOZ_GRAPHITE2_LIBS']
+
 if CONFIG['MOZ_SYSTEM_HARFBUZZ']:
     OS_LIBS += CONFIG['MOZ_HARFBUZZ_LIBS']
 
diff --git a/toolkit/moz.configure b/toolkit/moz.configure
index 827d1de352..e2109252eb 100644
--- a/toolkit/moz.configure
+++ b/toolkit/moz.configure
@@ -408,6 +408,20 @@ def freetype2_combined_info(fontconfig_info, freetype2_info):
 add_old_configure_assignment('_HAVE_FREETYPE2',
                              depends_if(freetype2_info)(lambda _: True))
 
+# Graphite2
+# ==============================================================
+option('--with-system-graphite2',
+       help="Use system graphite2 (located with pkgconfig)")
+
+@depends('--with-system-graphite2')
+def check_for_graphite2(value):
+    return bool(value)
+
+system_graphite2 = pkg_check_modules('MOZ_GRAPHITE2', 'graphite2',
+                                     when=check_for_graphite2)
+
+set_config('MOZ_SYSTEM_GRAPHITE2', depends_if(system_graphite2)(lambda _: True))
+
 # HarfBuzz
 # ==============================================================
 option('--with-system-harfbuzz',
-- 
2.31.1

From 9ba81ff3298ba5dc1b8c9cab852b78a88e09f62b Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 19:36:02 +0200
Subject: [PATCH 06/44] bmo#1559213: Support system av1

Allow building against system-wide av1.

Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1559213
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 config/external/moz.build      |  5 +++--
 config/system-headers.mozbuild |  8 ++++++++
 dom/media/platforms/moz.build  |  5 +++++
 toolkit/moz.configure          | 19 ++++++++++++++++++-
 4 files changed, 34 insertions(+), 3 deletions(-)

diff --git a/config/external/moz.build b/config/external/moz.build
index 704b35cb1b..95451627dc 100644
--- a/config/external/moz.build
+++ b/config/external/moz.build
@@ -39,8 +39,9 @@ if not CONFIG['MOZ_SYSTEM_LIBVPX']:
     external_dirs += ['media/libvpx']
 
 if CONFIG['MOZ_AV1']:
-    external_dirs += ['media/libaom']
-    external_dirs += ['media/libdav1d']
+    if not CONFIG['MOZ_SYSTEM_AV1']:
+        external_dirs += ['media/libaom']
+        external_dirs += ['media/libdav1d']
 
 if not CONFIG['MOZ_SYSTEM_PNG']:
     external_dirs += ['media/libpng']
diff --git a/config/system-headers.mozbuild b/config/system-headers.mozbuild
index 8e322e943e..a55e585447 100644
--- a/config/system-headers.mozbuild
+++ b/config/system-headers.mozbuild
@@ -1296,6 +1296,14 @@ if CONFIG['MOZ_ENABLE_LIBPROXY']:
         'proxy.h',
     ]
 
+if CONFIG['MOZ_SYSTEM_AV1']:
+    system_headers += [
+        'aom/aom_decoder.h',
+        'aom/aomdx.h',
+        'aom/aom_image.h',
+        'dav1d/dav1d.h',
+    ]
+
 if CONFIG['MOZ_SYSTEM_LIBVPX']:
     system_headers += [
         'vpx_mem/vpx_mem.h',
diff --git a/dom/media/platforms/moz.build b/dom/media/platforms/moz.build
index 11af915bd0..6e51580275 100644
--- a/dom/media/platforms/moz.build
+++ b/dom/media/platforms/moz.build
@@ -81,6 +81,11 @@ if CONFIG['MOZ_AV1']:
         'agnostic/AOMDecoder.cpp',
         'agnostic/DAV1DDecoder.cpp',
     ]
+    if CONFIG['MOZ_SYSTEM_AV1']:
+        CXXFLAGS += CONFIG['MOZ_SYSTEM_LIBAOM_CFLAGS']
+        OS_LIBS += CONFIG['MOZ_SYSTEM_LIBAOM_LIBS']
+        CXXFLAGS += CONFIG['MOZ_SYSTEM_LIBDAV1D_CFLAGS']
+        OS_LIBS += CONFIG['MOZ_SYSTEM_LIBDAV1D_LIBS']
 
 if CONFIG['MOZ_OMX']:
     EXPORTS += [
diff --git a/toolkit/moz.configure b/toolkit/moz.configure
index e2109252eb..ed340fb530 100644
--- a/toolkit/moz.configure
+++ b/toolkit/moz.configure
@@ -491,7 +491,23 @@ def av1(value):
     if value:
         return True
 
-@depends(target, nasm_version, when=av1 & compile_environment)
+option('--with-system-av1',
+       help="Use system av1 (located with pkgconfig)")
+
+system_libaom_info = pkg_check_modules('MOZ_SYSTEM_LIBAOM', 'aom >= 1.0.0',
+                                       when='--with-system-av1')
+
+system_libdav1d_info = pkg_check_modules('MOZ_SYSTEM_LIBDAV1D', 'dav1d >= 0.1.1',
+                                         when='--with-system-av1')
+
+@depends(system_libaom_info, system_libdav1d_info)
+def system_av1(system_libaom_info, system_libdav1d_info):
+    has_av1_libs = False
+    if system_libaom_info and system_libdav1d_info:
+        has_av1_libs = True
+    return has_av1_libs
+
+@depends(target, nasm_version, when=av1 & depends(system_av1)(lambda v: not v) & compile_environment)
 def dav1d_asm(target, nasm_version):
     if target.os != 'Android':
         if target.cpu == 'aarch64':
@@ -507,6 +523,7 @@ set_config('MOZ_DAV1D_ASM', dav1d_asm)
 set_define('MOZ_DAV1D_ASM', dav1d_asm)
 set_config('MOZ_AV1', av1)
 set_define('MOZ_AV1', av1)
+set_config('MOZ_SYSTEM_AV1', depends_if(system_av1)(lambda _: True))
 
 # Built-in fragmented MP4 support.
 # ==============================================================
-- 
2.31.1

From fe8874984984ebbf41689712fdb60140072762bb Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 19:41:43 +0200
Subject: [PATCH 07/44] bmo#878089: Don't fail when TERM is not set

Link: https://github.com/erikrose/blessings/pull/137
Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=878089
Bug: https://bugs.gentoo.org/654316
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 third_party/python/blessings/blessings/__init__.py | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/third_party/python/blessings/blessings/__init__.py b/third_party/python/blessings/blessings/__init__.py
index 388cece0b8..1283460cc9 100644
--- a/third_party/python/blessings/blessings/__init__.py
+++ b/third_party/python/blessings/blessings/__init__.py
@@ -94,8 +94,13 @@ class Terminal(object):
             # init sequences to the stream if it has a file descriptor, and
             # send them to stdout as a fallback, since they have to go
             # somewhere.
-            setupterm(kind or environ.get('TERM', 'unknown'),
-                      self._init_descriptor)
+            try:
+                setupterm(kind or environ.get('TERM', 'dumb') or 'dumb',
+                          self._init_descriptor)
+            except curses.error:
+                # There was an error setting up the terminal, either curses is
+                # not supported or TERM is incorrectly set. Fall back to dumb.
+                self._does_styling = False
 
         self.stream = stream
 
-- 
2.31.1

From 32be881a95e91bfc7736272de3cea599312eef1a Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 19:44:28 +0200
Subject: [PATCH 08/44] bmo#1516803: Fix building sandbox

Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1516803
Bug: https://bugs.gentoo.org/666580
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 security/sandbox/linux/moz.build | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/security/sandbox/linux/moz.build b/security/sandbox/linux/moz.build
index 105650d887..aae85843e9 100644
--- a/security/sandbox/linux/moz.build
+++ b/security/sandbox/linux/moz.build
@@ -102,7 +102,7 @@ if CONFIG['CC_TYPE'] in ('clang', 'gcc'):
 # forcing there to be only one partition.
 for f in CONFIG['OS_CXXFLAGS']:
     if f.startswith('-flto') and CONFIG['CC_TYPE'] != 'clang':
-        LDFLAGS += ['--param lto-partitions=1']
+        LDFLAGS += ['--param', 'lto-partitions=1']
 
 DEFINES['NS_NO_XPCOM'] = True
 DisableStlWrapping()
-- 
2.31.1

From 9f3a6f74942cfb2cd86239762050707a1ac8cf45 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 19:51:22 +0200
Subject: [PATCH 09/44] Fix building spellchecker when using GCC and PGO

Bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88561
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 extensions/spellcheck/src/moz.build | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/extensions/spellcheck/src/moz.build b/extensions/spellcheck/src/moz.build
index 1fa03d1c56..ecbcb1672c 100644
--- a/extensions/spellcheck/src/moz.build
+++ b/extensions/spellcheck/src/moz.build
@@ -31,3 +31,8 @@ EXPORTS.mozilla += [
 
 if CONFIG['CC_TYPE'] in ('clang', 'gcc'):
     CXXFLAGS += ['-Wno-error=shadow']
+
+# spell checker triggers bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88561
+# in gcc 7 and 8. It will be fixed in GCC 7.5 and 8.3
+if CONFIG['CC_TYPE'] in ('gcc'):
+    CXXFLAGS += ['-fno-devirtualize']
-- 
2.31.1

From f345dda2ca9bd387e20d9a8919e5d2a42076de62 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 19:57:42 +0200
Subject: [PATCH 10/44] bmo#1526653: Include struct definitions for user_vfp
 and user_vfp_exc

Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1526653
Bug: https://bugs.gentoo.org/681036
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 js/src/wasm/WasmSignalHandlers.cpp | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/js/src/wasm/WasmSignalHandlers.cpp b/js/src/wasm/WasmSignalHandlers.cpp
index 78d1544084..9965e76814 100644
--- a/js/src/wasm/WasmSignalHandlers.cpp
+++ b/js/src/wasm/WasmSignalHandlers.cpp
@@ -249,7 +249,16 @@ using mozilla::DebugOnly;
 #endif
 
 #ifdef WASM_EMULATE_ARM_UNALIGNED_FP_ACCESS
-#  include <sys/user.h>
+struct user_vfp {
+  unsigned long long fpregs[32];
+  unsigned long fpscr;
+};
+
+struct user_vfp_exc {
+  unsigned long fpexc;
+  unsigned long fpinst;
+  unsigned long fpinst2;
+};
 #endif
 
 #if defined(ANDROID)
-- 
2.31.1

From 5b642e17a99e62fbbbba7817c78c8e29a3aa3210 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 20:13:34 +0200
Subject: [PATCH 19/44] Make PGO use toolchain

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 build/unix/mozconfig.unix | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/build/unix/mozconfig.unix b/build/unix/mozconfig.unix
index 539dd4d44b..d10ae3df4a 100644
--- a/build/unix/mozconfig.unix
+++ b/build/unix/mozconfig.unix
@@ -6,6 +6,15 @@ if [ -n "$FORCE_GCC" ]; then
     CC="$MOZ_FETCHES_DIR/gcc/bin/gcc"
     CXX="$MOZ_FETCHES_DIR/gcc/bin/g++"
 
+    if [ -n "$MOZ_PGO" ]; then
+        if [ -z "$USE_ARTIFACT" ]; then
+            ac_add_options --enable-lto
+        fi
+        export AR="$topsrcdir/gcc/bin/gcc-ar"
+        export NM="$topsrcdir/gcc/bin/gcc-nm"
+        export RANLIB="$topsrcdir/gcc/bin/gcc-ranlib"
+    fi
+
     # We want to make sure we use binutils and other binaries in the tooltool
     # package.
     mk_add_options "export PATH=$MOZ_FETCHES_DIR/gcc/bin:$PATH"
-- 
2.31.1

From e254917e8d9e7902bd62e1821d0a50b2be9b9281 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 20:27:06 +0200
Subject: [PATCH 20/44] bmo#1516081: Disable watchdog during PGO builds

Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1516081
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 build/moz.configure/lto-pgo.configure          | 4 ++--
 toolkit/components/terminator/nsTerminator.cpp | 7 +++++++
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/build/moz.configure/lto-pgo.configure b/build/moz.configure/lto-pgo.configure
index 366c6691f7..c89a717099 100644
--- a/build/moz.configure/lto-pgo.configure
+++ b/build/moz.configure/lto-pgo.configure
@@ -70,7 +70,7 @@ set_config('PGO_PROFILE_PATH', pgo_profile_path)
 def pgo_flags(compiler, profdata, target_is_windows):
     if compiler.type == 'gcc':
         return namespace(
-            gen_cflags=['-fprofile-generate'],
+            gen_cflags=['-fprofile-generate', '-DMOZ_PROFILE_INSTRUMENTATION'],
             gen_ldflags=['-fprofile-generate'],
             use_cflags=['-fprofile-use', '-fprofile-correction',
                         '-Wcoverage-mismatch'],
@@ -85,7 +85,7 @@ def pgo_flags(compiler, profdata, target_is_windows):
         else:
             gen_ldflags = ['-fprofile-generate']
 
-        gen_cflags = [prefix + '-fprofile-generate']
+        gen_cflags = [prefix + '-fprofile-generate', '-DMOZ_PROFILE_INSTRUMENTATION']
         if target_is_windows:
             # native llvm-profdata.exe on Windows can't read profile data
             # if name compression is enabled (which cross-compiling enables
diff --git a/toolkit/components/terminator/nsTerminator.cpp b/toolkit/components/terminator/nsTerminator.cpp
index 2aa77b33ec..cd762d69c0 100644
--- a/toolkit/components/terminator/nsTerminator.cpp
+++ b/toolkit/components/terminator/nsTerminator.cpp
@@ -447,6 +447,13 @@ void nsTerminator::StartWatchdog() {
   }
 #endif
 
+  // Disable watchdog for PGO train builds - writting profile information at
+  // exit may take time and it is better to make build hang rather than
+  // silently produce poorly performing binary.
+#ifdef MOZ_PROFILE_INSTRUMENTATION
+  crashAfterMS = INT32_MAX;
+#endif
+
   UniquePtr<Options> options(new Options());
   const PRIntervalTime ticksDuration = PR_MillisecondsToInterval(1000);
   options->crashAfterTicks = crashAfterMS / ticksDuration;
-- 
2.31.1

From bab3b6c1d7e6146d89f88600dd334c2b26ad3eaa Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Wed, 15 Apr 2020 00:27:25 +0200
Subject: [PATCH 21/44] bmo#1516803: force one LTO partition for sandbox when
 using GCC

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 security/sandbox/linux/moz.build | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/security/sandbox/linux/moz.build b/security/sandbox/linux/moz.build
index aae85843e9..85bf669ea5 100644
--- a/security/sandbox/linux/moz.build
+++ b/security/sandbox/linux/moz.build
@@ -100,9 +100,10 @@ if CONFIG['CC_TYPE'] in ('clang', 'gcc'):
 # gcc lto likes to put the top level asm in syscall.cc in a different partition
 # from the function using it which breaks the build.  Work around that by
 # forcing there to be only one partition.
-for f in CONFIG['OS_CXXFLAGS']:
-    if f.startswith('-flto') and CONFIG['CC_TYPE'] != 'clang':
-        LDFLAGS += ['--param', 'lto-partitions=1']
+if CONFIG['CC_TYPE'] != 'clang' and CONFIG['MOZ_LTO_LDFLAGS'] is not None:
+    for f in CONFIG['MOZ_LTO_LDFLAGS']:
+        if f.startswith('-flto'):
+            LDFLAGS += ['--param', 'lto-partitions=1']
 
 DEFINES['NS_NO_XPCOM'] = True
 DisableStlWrapping()
-- 
2.31.1

From 377b10c8999739d0210cef1bbd8bdd96adf2137c Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 6 Apr 2020 20:47:13 +0200
Subject: [PATCH 22/44] bmo#1196777: Set GDK_FOCUS_CHANGE_MASK

Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1196777
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 widget/gtk/nsWindow.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
index 508dd49826..349b734593 100644
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -161,7 +161,8 @@ const gint kEvents =
 #if GTK_CHECK_VERSION(3, 4, 0)
     GDK_SMOOTH_SCROLL_MASK | GDK_TOUCH_MASK |
 #endif
-    GDK_SCROLL_MASK | GDK_POINTER_MOTION_MASK | GDK_PROPERTY_CHANGE_MASK;
+    GDK_SCROLL_MASK | GDK_POINTER_MOTION_MASK | GDK_PROPERTY_CHANGE_MASK |
+    GDK_FOCUS_CHANGE_MASK;
 
 #if !GTK_CHECK_VERSION(3, 22, 0)
 typedef enum {
-- 
2.31.1

From b315e07a1c0c1e996b66c6f26118ff61d3a72c30 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Wed, 3 Jun 2020 22:04:10 +0200
Subject: [PATCH 23/44] Wayland: Disable FFVPX with VAAPI

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 dom/media/platforms/PDMFactory.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/dom/media/platforms/PDMFactory.cpp b/dom/media/platforms/PDMFactory.cpp
index 78ef3f8916..83493e64d2 100644
--- a/dom/media/platforms/PDMFactory.cpp
+++ b/dom/media/platforms/PDMFactory.cpp
@@ -26,6 +26,7 @@
 #include "mozilla/SyncRunnable.h"
 #include "mozilla/TaskQueue.h"
 #include "mozilla/gfx/gfxVars.h"
+#include "gfxPlatformGtk.h"
 
 #ifdef XP_WIN
 #  include "WMFDecoderModule.h"
@@ -367,7 +368,12 @@ void PDMFactory::CreatePDMs() {
   }
 #endif
 #ifdef MOZ_FFVPX
+#ifdef MOZ_WAYLAND
+  if (StaticPrefs::media_ffvpx_enabled() &&
+      !gfxPlatformGtk::GetPlatform()->UseWaylandHardwareVideoDecoding()) {
+#else
   if (StaticPrefs::media_ffvpx_enabled()) {
+#endif
     m = FFVPXRuntimeLinker::CreateDecoderModule();
     StartupPDM(m);
   }
-- 
2.31.1

From 40e665ba85cabcb082bb1440cb1be4f0f6a89dfe Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Wed, 3 Jun 2020 22:06:28 +0200
Subject: [PATCH 24/44] VAAPI: Add extra frames

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp b/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp
index 6c97636505..76d6c93548 100644
--- a/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp
+++ b/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp
@@ -43,7 +43,7 @@ typedef int VAStatus;
 #endif
 
 // Use some extra HW frames for potential rendering lags.
-#define EXTRA_HW_FRAMES 6
+#define EXTRA_HW_FRAMES 20
 
 typedef mozilla::layers::Image Image;
 typedef mozilla::layers::PlanarYCbCrImage PlanarYCbCrImage;
-- 
2.31.1

From 64841a5b9e66581b72fa764511a0051a98855d45 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Thu, 2 Jul 2020 18:05:03 +0200
Subject: [PATCH 25/44] Fix building with PGO when using GCC

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 build/moz.configure/lto-pgo.configure      |  5 +++--
 build/pgo/profileserver.py                 | 26 ++++++++++++++++++----
 python/mozbuild/mozbuild/build_commands.py |  3 ++-
 3 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/build/moz.configure/lto-pgo.configure b/build/moz.configure/lto-pgo.configure
index c89a717099..0a055071c8 100644
--- a/build/moz.configure/lto-pgo.configure
+++ b/build/moz.configure/lto-pgo.configure
@@ -69,12 +69,13 @@ set_config('PGO_PROFILE_PATH', pgo_profile_path)
 @imports(_from='__builtin__', _import='min')
 def pgo_flags(compiler, profdata, target_is_windows):
     if compiler.type == 'gcc':
+        profile_use = '-fprofile-use'
         return namespace(
             gen_cflags=['-fprofile-generate', '-DMOZ_PROFILE_INSTRUMENTATION'],
             gen_ldflags=['-fprofile-generate'],
-            use_cflags=['-fprofile-use', '-fprofile-correction',
+            use_cflags=[profile_use, '-fprofile-correction',
                         '-Wcoverage-mismatch'],
-            use_ldflags=['-fprofile-use'],
+            use_ldflags=[profile_use],
         )
 
     if compiler.type in ('clang-cl', 'clang'):
diff --git a/build/pgo/profileserver.py b/build/pgo/profileserver.py
index facd5e5985..1d5639e734 100755
--- a/build/pgo/profileserver.py
+++ b/build/pgo/profileserver.py
@@ -11,7 +11,7 @@ import glob
 import subprocess
 
 import mozcrash
-from mozbuild.base import MozbuildObject, BinaryNotFoundException
+from mozbuild.base import MozbuildObject, BinaryNotFoundException, BuildEnvironmentNotFoundException
 from mozfile import TemporaryDirectory
 from mozhttpd import MozHttpd
 from mozprofile import FirefoxProfile, Preferences
@@ -84,9 +84,22 @@ if __name__ == '__main__':
                        port=PORT,
                        options='primary,privileged')
 
-    old_profraw_files = glob.glob('*.profraw')
-    for f in old_profraw_files:
-        os.remove(f)
+    using_gcc = False
+    try:
+        if build.config_environment.substs.get('CC_TYPE') == 'gcc':
+            using_gcc = True
+    except BuildEnvironmentNotFoundException:
+        pass
+
+    if using_gcc:
+        for dirpath, _, filenames in os.walk('.'):
+            for f in filenames:
+                if f.endswith('.gcda'):
+                    os.remove(os.path.join(dirpath, f))
+    else:
+        old_profraw_files = glob.glob('*.profraw')
+        for f in old_profraw_files:
+            os.remove(f)
 
     with TemporaryDirectory() as profilePath:
         # TODO: refactor this into mozprofile
@@ -191,6 +204,11 @@ if __name__ == '__main__':
             print("Firefox exited successfully, but produced a crashreport")
             sys.exit(1)
 
+        if using_gcc:
+            print('Copying profile data....')
+            os.system('pwd');
+            os.system('tar cf profdata.tar.gz `find . -name "*.gcda"`; cd ..; tar xf instrumented/profdata.tar.gz;');
+
         llvm_profdata = env.get('LLVM_PROFDATA')
         if llvm_profdata:
             profraw_files = glob.glob('*.profraw')
diff --git a/python/mozbuild/mozbuild/build_commands.py b/python/mozbuild/mozbuild/build_commands.py
index 4d90e8ac74..31b909e095 100644
--- a/python/mozbuild/mozbuild/build_commands.py
+++ b/python/mozbuild/mozbuild/build_commands.py
@@ -114,7 +114,8 @@ class Build(MachCommandBase):
                 return status
 
             pgo_env = os.environ.copy()
-            pgo_env['LLVM_PROFDATA'] = instr.config_environment.substs.get('LLVM_PROFDATA')
+            if instr.config_environment.substs.get('CC_TYPE') != 'gcc':
+                pgo_env['LLVM_PROFDATA'] = instr.config_environment.substs.get('LLVM_PROFDATA')
             pgo_env['JARLOG_FILE'] = mozpath.join(orig_topobjdir, 'jarlog/en-US.log')
             pgo_cmd = [
                 instr.virtualenv_manager.python_path,
-- 
2.31.1

From a1ca4d1d3b0566a7aba2ddac7b841f311d233bef Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Thu, 2 Jul 2020 18:30:00 +0200
Subject: [PATCH 26/44] bmo#1634213: Wayland: Use dmabuf WebGL surfaces by
 default and fallback to EGL image surface

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 gfx/gl/GLScreenBuffer.cpp                | 12 ++++++++----
 gfx/gl/SharedSurfaceDMABUF.h             |  5 +++++
 gfx/thebes/gfxPlatformGtk.cpp            |  9 ++++++---
 gfx/thebes/gfxPlatformGtk.h              |  6 +++++-
 modules/libpref/init/StaticPrefList.yaml |  2 +-
 5 files changed, 25 insertions(+), 9 deletions(-)

diff --git a/gfx/gl/GLScreenBuffer.cpp b/gfx/gl/GLScreenBuffer.cpp
index 349463b020..dc13a91bd3 100644
--- a/gfx/gl/GLScreenBuffer.cpp
+++ b/gfx/gl/GLScreenBuffer.cpp
@@ -88,10 +88,14 @@ UniquePtr<SurfaceFactory> GLScreenBuffer::CreateFactory(
 #if defined(XP_MACOSX)
     factory = SurfaceFactory_IOSurface::Create(gl, caps, ipcChannel, flags);
 #elif defined(MOZ_WAYLAND)
-    if (gl->GetContextType() == GLContextType::EGL) {
-      if (gfxPlatformGtk::GetPlatform()->UseWaylandDMABufWebGL()) {
-        factory =
-            MakeUnique<SurfaceFactory_DMABUF>(gl, caps, ipcChannel, flags);
+    if (gl->GetContextType() == GLContextType::EGL &&
+        gfxPlatformGtk::GetPlatform()->UseWaylandDMABufWebGL()) {
+      auto DMABUFFactory =
+          MakeUnique<SurfaceFactory_DMABUF>(gl, caps, ipcChannel, flags);
+      if (DMABUFFactory && DMABUFFactory->CanCreateSurface()) {
+        factory = std::move(DMABUFFactory);
+      } else {
+        gfxPlatformGtk::GetPlatform()->DisableWaylandDMABufWebGL();
       }
     }
 #elif defined(MOZ_X11)
diff --git a/gfx/gl/SharedSurfaceDMABUF.h b/gfx/gl/SharedSurfaceDMABUF.h
index d14ca5cc78..cd7f0462ae 100644
--- a/gfx/gl/SharedSurfaceDMABUF.h
+++ b/gfx/gl/SharedSurfaceDMABUF.h
@@ -71,6 +71,11 @@ class SurfaceFactory_DMABUF : public SurfaceFactory {
     bool hasAlpha = mReadCaps.alpha;
     return SharedSurface_DMABUF::Create(mGL, mFormats, size, hasAlpha);
   }
+
+  bool CanCreateSurface() {
+    UniquePtr<SharedSurface> test = CreateShared(gfx::IntSize(1, 1));
+    return test != nullptr;
+  }
 };
 
 }  // namespace gl
diff --git a/gfx/thebes/gfxPlatformGtk.cpp b/gfx/thebes/gfxPlatformGtk.cpp
index b5991f79fe..dea886efe2 100644
--- a/gfx/thebes/gfxPlatformGtk.cpp
+++ b/gfx/thebes/gfxPlatformGtk.cpp
@@ -102,6 +102,7 @@ gfxPlatformGtk::gfxPlatformGtk() {
     mCompositorDisplay = nullptr;
   }
 #endif  // MOZ_X11
+
   gPlatformFTLibrary = Factory::NewFTLibrary();
   MOZ_ASSERT(gPlatformFTLibrary);
   Factory::SetFTLibrary(gPlatformFTLibrary);
@@ -116,6 +117,11 @@ gfxPlatformGtk::~gfxPlatformGtk() {
 
   Factory::ReleaseFTLibrary(gPlatformFTLibrary);
   gPlatformFTLibrary = nullptr;
+
+#ifdef MOZ_WAYLAND
+  mUseWebGLDmabufBackend =
+      IsWaylandDisplay() && nsWaylandDisplay::IsDMABufWebGLEnabled();
+#endif
 }
 
 void gfxPlatformGtk::FlushContentDrawing() {
@@ -725,9 +731,6 @@ already_AddRefed<gfx::VsyncSource> gfxPlatformGtk::CreateHardwareVsyncSource() {
 bool gfxPlatformGtk::UseWaylandDMABufTextures() {
   return IsWaylandDisplay() && nsWaylandDisplay::IsDMABufTexturesEnabled();
 }
-bool gfxPlatformGtk::UseWaylandDMABufWebGL() {
-  return IsWaylandDisplay() && nsWaylandDisplay::IsDMABufWebGLEnabled();
-}
 bool gfxPlatformGtk::UseWaylandHardwareVideoDecoding() {
   return IsWaylandDisplay() && nsWaylandDisplay::IsDMABufVAAPIEnabled() &&
          gfxPlatform::CanUseHardwareVideoDecoding();
diff --git a/gfx/thebes/gfxPlatformGtk.h b/gfx/thebes/gfxPlatformGtk.h
index 71e8b48c19..f8ce59f704 100644
--- a/gfx/thebes/gfxPlatformGtk.h
+++ b/gfx/thebes/gfxPlatformGtk.h
@@ -88,7 +88,8 @@ class gfxPlatformGtk final : public gfxPlatform {
 
 #ifdef MOZ_WAYLAND
   bool UseWaylandDMABufTextures();
-  bool UseWaylandDMABufWebGL();
+  bool UseWaylandDMABufWebGL() { return mUseWebGLDmabufBackend; }
+  void DisableWaylandDMABufWebGL() { mUseWebGLDmabufBackend = false; }
   bool UseWaylandHardwareVideoDecoding();
 #endif
 
@@ -110,6 +111,9 @@ class gfxPlatformGtk final : public gfxPlatform {
 #ifdef MOZ_X11
   Display* mCompositorDisplay;
 #endif
+#ifdef MOZ_WAYLAND
+  bool mUseWebGLDmabufBackend;
+#endif
 };
 
 #endif /* GFX_PLATFORM_GTK_H */
diff --git a/modules/libpref/init/StaticPrefList.yaml b/modules/libpref/init/StaticPrefList.yaml
index e506e82577..a0cef664ad 100644
--- a/modules/libpref/init/StaticPrefList.yaml
+++ b/modules/libpref/init/StaticPrefList.yaml
@@ -9264,7 +9264,7 @@
 # Use DMABuf backend for WebGL on Wayland.
 - name: widget.wayland-dmabuf-webgl.enabled
   type: RelaxedAtomicBool
-  value: false
+  value: true
   mirror: always
 
 # Use VA-API for video playback on Wayland.
-- 
2.31.1

From 39ef17d97fe01a755eb19faabed5832d5382b9c4 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Tue, 7 Jul 2020 14:30:44 +0200
Subject: [PATCH 28/44] bmo#1650299: Unify the inclusion of the ICU data file

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 config/external/icu/data/genicudata.py | 21 -----------------
 config/external/icu/data/icudata.c     | 28 +++++++++++++++++++++++
 config/external/icu/data/icudata.s     | 31 --------------------------
 config/external/icu/data/icudata_gas.S | 17 --------------
 config/external/icu/data/moz.build     | 29 +++++-------------------
 js/moz.configure                       |  7 ------
 6 files changed, 33 insertions(+), 100 deletions(-)
 delete mode 100644 config/external/icu/data/genicudata.py
 create mode 100644 config/external/icu/data/icudata.c
 delete mode 100644 config/external/icu/data/icudata.s
 delete mode 100644 config/external/icu/data/icudata_gas.S

diff --git a/config/external/icu/data/genicudata.py b/config/external/icu/data/genicudata.py
deleted file mode 100644
index 50bc93988a..0000000000
--- a/config/external/icu/data/genicudata.py
+++ /dev/null
@@ -1,21 +0,0 @@
-# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
-# vim: set filetype=python:
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-
-from __future__ import absolute_import
-import buildconfig
-
-
-def main(output, data_file, data_symbol):
-    if buildconfig.substs.get('WINE'):
-        drive = 'z:'
-    else:
-        drive = ''
-    output.write('''    AREA |.rdata|,ALIGN=4,DATA,READONLY
-    EXPORT |{data_symbol}|[DATA]
-|{data_symbol}|
-    INCBIN {drive}{data_file}
-    END
-'''.format(data_file=data_file, data_symbol=data_symbol, drive=drive))
diff --git a/config/external/icu/data/icudata.c b/config/external/icu/data/icudata.c
new file mode 100644
index 0000000000..7299ac9f6b
--- /dev/null
+++ b/config/external/icu/data/icudata.c
@@ -0,0 +1,28 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifdef __APPLE__
+#  define RODATA ".data\n.const"
+#else
+#  define RODATA ".section .rodata"
+#endif
+
+#if defined(__APPLE__) || (defined(_WIN32) && defined(__i386__))
+#  define _PREFIXED(x) _##x
+#else
+#  define _PREFIXED(x) x
+#endif
+#define PREFIXED(x) _PREFIXED(x)
+
+#define DATA(sym, file) DATA2(sym, file)
+// clang-format off
+#define DATA2(sym, file)              \
+  __asm__(".global " #sym "\n"        \
+          RODATA "\n"                 \
+          ".balign 16\n"              \
+          #sym ":\n"                  \
+          "    .incbin " #file "\n")
+// clang-format on
+
+DATA(PREFIXED(ICU_DATA_SYMBOL), ICU_DATA_FILE);
diff --git a/config/external/icu/data/icudata.s b/config/external/icu/data/icudata.s
deleted file mode 100644
index a740f3260b..0000000000
--- a/config/external/icu/data/icudata.s
+++ /dev/null
@@ -1,31 +0,0 @@
-;; This Source Code Form is subject to the terms of the Mozilla Public
-;; License, v. 2.0. If a copy of the MPL was not distributed with this
-;; file, You can obtain one at http://mozilla.org/MPL/2.0/.
-
-%ifdef PREFIX
-    %define DATA_SYMBOL _ %+ ICU_DATA_SYMBOL
-%else
-    %define DATA_SYMBOL ICU_DATA_SYMBOL
-%endif
-
-%ifidn __OUTPUT_FORMAT__,elf
-    %define FORMAT_ELF 1
-%elifidn __OUTPUT_FORMAT__,elf32
-    %define FORMAT_ELF 1
-%elifidn __OUTPUT_FORMAT__,elf64
-    %define FORMAT_ELF 1
-%else
-    %define FORMAT_ELF 0
-%endif
-
-%if FORMAT_ELF
-    global DATA_SYMBOL:data hidden
-    ; This is needed for ELF, otherwise the GNU linker assumes the stack is executable by default.
-    [SECTION .note.GNU-stack noalloc noexec nowrite progbits]
-%else
-    global DATA_SYMBOL
-%endif
-
-SECTION .rodata align=16
-DATA_SYMBOL:
-        incbin ICU_DATA_FILE
diff --git a/config/external/icu/data/icudata_gas.S b/config/external/icu/data/icudata_gas.S
deleted file mode 100644
index 6c9abc822c..0000000000
--- a/config/external/icu/data/icudata_gas.S
+++ /dev/null
@@ -1,17 +0,0 @@
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-
-#if defined(__linux__) && defined(__ELF__)
-.section .note.GNU-stack,"",%progbits
-#endif
-#ifdef PREFIX
-#  define DATA_SYMBOL _##ICU_DATA_SYMBOL
-#else
-#  define DATA_SYMBOL ICU_DATA_SYMBOL
-#endif
-.global DATA_SYMBOL
-.data
-.balign 16
-DATA_SYMBOL:
-        .incbin ICU_DATA_FILE
diff --git a/config/external/icu/data/moz.build b/config/external/icu/data/moz.build
index d4741a0668..023b4e9f49 100644
--- a/config/external/icu/data/moz.build
+++ b/config/external/icu/data/moz.build
@@ -8,29 +8,10 @@
 # JSAPI consumers don't have to deal with setting ICU's data path.
 Library('icudata')
 
-if CONFIG['OS_ARCH'] == 'WINNT':
-    if CONFIG['CPU_ARCH'] == 'x86':
-        ASFLAGS += ['-DPREFIX']
-elif CONFIG['OS_ARCH'] == 'Darwin':
-    ASFLAGS += ['-DPREFIX']
-
-data_symbol = 'icudt%s_dat' % CONFIG['MOZ_ICU_VERSION']
-asflags = [
-    '-I%s/config/external/icu/data/' % TOPSRCDIR,
-    '-DICU_DATA_FILE="%s"' % CONFIG['ICU_DATA_FILE'],
-    '-DICU_DATA_SYMBOL=%s' % data_symbol,
-]
 LOCAL_INCLUDES += ['.']
 
-if CONFIG['OS_TARGET'] == 'WINNT' and CONFIG['CPU_ARCH'] == 'aarch64':
-    icudata = 'icudata.asm'
-    GeneratedFile(icudata, script='genicudata.py',
-                  inputs=[CONFIG['ICU_DATA_FILE']], flags=[data_symbol])
-    SOURCES += ['!%s' % icudata]
-elif CONFIG['HAVE_YASM']:
-    USE_YASM = True
-    SOURCES += ['icudata.s']
-    ASFLAGS += asflags
-elif CONFIG['GNU_AS']:
-    SOURCES += ['icudata_gas.S']
-    ASFLAGS += asflags
+DEFINES['ICU_DATA_FILE'] = '"icudt%sl.dat"' % CONFIG['MOZ_ICU_VERSION']
+DEFINES['ICU_DATA_SYMBOL'] = 'icudt%s_dat' % CONFIG['MOZ_ICU_VERSION']
+SOURCES += [
+    'icudata.c',
+]
diff --git a/js/moz.configure b/js/moz.configure
index b1c9685733..4ac0bd8220 100644
--- a/js/moz.configure
+++ b/js/moz.configure
@@ -760,13 +760,6 @@ def icu_version(build_env):
 
 set_config('MOZ_ICU_VERSION', icu_version)
 
-@depends(icu_version, target, when='--with-intl-api')
-def icu_data_file(version, target):
-    # target.endianness is always 'big' or 'little'
-    return 'icudt%s%s.dat' % (version, target.endianness[0])
-
-set_config('ICU_DATA_FILE', icu_data_file)
-
 # Source files that use ICU should have control over which parts of the ICU
 # namespace they want to use.
 set_define('U_USING_ICU_NAMESPACE', '0', when='--with-intl-api')
-- 
2.31.1

From 9b20644be64ee35ae11e49f2f5d5a99e410663c5 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Tue, 7 Jul 2020 14:57:59 +0200
Subject: [PATCH 29/44] bmo#1264836: Automatically convert the little-endian
 ICU data file for big-endian builds

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 config/external/icu/common/moz.build          | 18 ++++++++++++
 config/external/icu/common/sources.mozbuild   |  2 +-
 config/external/icu/data/convert_icudata.py   | 17 +++++++++++
 config/external/icu/data/moz.build            | 17 ++++++++++-
 config/external/icu/defs.mozbuild             |  6 ++++
 config/external/icu/i18n/moz.build            |  8 ++++++
 config/external/icu/i18n/sources.mozbuild     |  2 +-
 config/external/icu/icupkg/moz.build          | 25 +++++++++++++++++
 config/external/icu/icupkg/sources.mozbuild   |  5 ++++
 config/external/icu/moz.build                 |  5 ++++
 config/external/icu/toolutil/moz.build        | 20 +++++++++++++
 config/external/icu/toolutil/sources.mozbuild | 28 +++++++++++++++++++
 config/recurse.mk                             |  6 ++++
 intl/icu_sources_data.py                      | 21 ++++++++------
 14 files changed, 169 insertions(+), 11 deletions(-)
 create mode 100644 config/external/icu/data/convert_icudata.py
 create mode 100644 config/external/icu/icupkg/moz.build
 create mode 100644 config/external/icu/icupkg/sources.mozbuild
 create mode 100644 config/external/icu/toolutil/moz.build
 create mode 100644 config/external/icu/toolutil/sources.mozbuild

diff --git a/config/external/icu/common/moz.build b/config/external/icu/common/moz.build
index 61ff5dc72e..5e00bc32d6 100644
--- a/config/external/icu/common/moz.build
+++ b/config/external/icu/common/moz.build
@@ -23,3 +23,21 @@ if CONFIG['CC_TYPE'] in ('clang', 'gcc'):
 
 include('../defs.mozbuild')
 include('sources.mozbuild')
+
+SOURCES += sources
+
+if CONFIG['TARGET_ENDIANNESS'] == 'big':
+    HostLibrary('host_icuuc')
+    HOST_DEFINES['U_COMMON_IMPLEMENTATION'] = True
+    HOST_SOURCES += sources
+    HOST_SOURCES += [
+        '/intl/icu/source/common/cstr.cpp',
+        '/intl/icu/source/common/ucnv2022.cpp',
+        '/intl/icu/source/common/ucnv_ct.cpp',
+        '/intl/icu/source/common/ucnv_ext.cpp',
+        '/intl/icu/source/common/ucnv_lmb.cpp',
+        '/intl/icu/source/common/ucnvdisp.cpp',
+        '/intl/icu/source/common/ucnvhz.cpp',
+        '/intl/icu/source/common/ucnvisci.cpp',
+        '/intl/icu/source/common/ucnvmbcs.cpp',
+    ]
diff --git a/config/external/icu/common/sources.mozbuild b/config/external/icu/common/sources.mozbuild
index 1582a4f209..b064e110eb 100644
--- a/config/external/icu/common/sources.mozbuild
+++ b/config/external/icu/common/sources.mozbuild
@@ -1,5 +1,5 @@
 # THIS FILE IS GENERATED BY /intl/icu_sources_data.py DO NOT EDIT
-SOURCES += [
+sources = [
    '/intl/icu/source/common/appendable.cpp',
    '/intl/icu/source/common/bmpset.cpp',
    '/intl/icu/source/common/brkeng.cpp',
diff --git a/config/external/icu/data/convert_icudata.py b/config/external/icu/data/convert_icudata.py
new file mode 100644
index 0000000000..22779274eb
--- /dev/null
+++ b/config/external/icu/data/convert_icudata.py
@@ -0,0 +1,17 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+import os
+import subprocess
+import buildconfig
+
+
+def main(output, data_file):
+    output.close()
+    subprocess.run([
+        os.path.join(buildconfig.topobjdir, 'dist', 'host', 'bin', 'icupkg'),
+        '-tb',
+        data_file,
+        output.name,
+    ])
diff --git a/config/external/icu/data/moz.build b/config/external/icu/data/moz.build
index 023b4e9f49..84a8a9941e 100644
--- a/config/external/icu/data/moz.build
+++ b/config/external/icu/data/moz.build
@@ -10,8 +10,23 @@ Library('icudata')
 
 LOCAL_INCLUDES += ['.']
 
-DEFINES['ICU_DATA_FILE'] = '"icudt%sl.dat"' % CONFIG['MOZ_ICU_VERSION']
+data_file = {
+    'little': 'icudt%sl.dat' % CONFIG['MOZ_ICU_VERSION'],
+    'big': 'icudt%sb.dat' % CONFIG['MOZ_ICU_VERSION'],
+}
+DEFINES['ICU_DATA_FILE'] = '"%s"' % data_file[CONFIG['TARGET_ENDIANNESS']]
 DEFINES['ICU_DATA_SYMBOL'] = 'icudt%s_dat' % CONFIG['MOZ_ICU_VERSION']
 SOURCES += [
     'icudata.c',
 ]
+
+if CONFIG['TARGET_ENDIANNESS'] == 'big':
+    HostLibrary('host_icudata')
+    HOST_DEFINES['ICU_DATA_FILE'] = '"%s"' % data_file['little']
+    HOST_DEFINES['ICU_DATA_SYMBOL'] = DEFINES['ICU_DATA_SYMBOL']
+    HOST_SOURCES += [
+        'icudata.c',
+    ]
+    GeneratedFile(data_file['big'],
+                  script='convert_icudata.py',
+                  inputs=[data_file['little']])
diff --git a/config/external/icu/defs.mozbuild b/config/external/icu/defs.mozbuild
index 07874b6b3c..fda0361e30 100644
--- a/config/external/icu/defs.mozbuild
+++ b/config/external/icu/defs.mozbuild
@@ -24,6 +24,8 @@ DEFINES['U_CHARSET_IS_UTF8'] = True
 DEFINES['UNISTR_FROM_CHAR_EXPLICIT'] = "explicit"
 DEFINES['UNISTR_FROM_STRING_EXPLICIT'] = "explicit"
 
+DEFINES['U_ENABLE_DYLOAD'] = 0
+
 if not CONFIG['HAVE_LANGINFO_CODESET']:
     DEFINES['U_HAVE_NL_LANGINFO_CODESET'] = 0
 
@@ -53,3 +55,7 @@ if CONFIG['CC_TYPE'] == 'clang-cl':
         '-Wno-macro-redefined',
         '-Wno-microsoft-include',
     ]
+
+for k, v in DEFINES.items():
+    if k != 'UCONFIG_NO_LEGACY_CONVERSION':
+        HOST_DEFINES[k] = v
diff --git a/config/external/icu/i18n/moz.build b/config/external/icu/i18n/moz.build
index f5482351c5..890edfcf8d 100644
--- a/config/external/icu/i18n/moz.build
+++ b/config/external/icu/i18n/moz.build
@@ -13,3 +13,11 @@ LOCAL_INCLUDES += ['/intl/icu/source/common']
 
 include('../defs.mozbuild')
 include('sources.mozbuild')
+
+SOURCES += sources
+
+if CONFIG['TARGET_ENDIANNESS'] == 'big':
+    HostLibrary('host_icui18n')
+    HOST_DEFINES['U_I18N_IMPLEMENTATION'] = True
+    HOST_SOURCES += sources
+    HOST_SOURCES += ['/intl/icu/source/i18n/ulocdata.cpp']
diff --git a/config/external/icu/i18n/sources.mozbuild b/config/external/icu/i18n/sources.mozbuild
index be7f29f629..36f93e7075 100644
--- a/config/external/icu/i18n/sources.mozbuild
+++ b/config/external/icu/i18n/sources.mozbuild
@@ -1,5 +1,5 @@
 # THIS FILE IS GENERATED BY /intl/icu_sources_data.py DO NOT EDIT
-SOURCES += [
+sources = [
    '/intl/icu/source/i18n/astro.cpp',
    '/intl/icu/source/i18n/basictz.cpp',
    '/intl/icu/source/i18n/bocsu.cpp',
diff --git a/config/external/icu/icupkg/moz.build b/config/external/icu/icupkg/moz.build
new file mode 100644
index 0000000000..b4010b1227
--- /dev/null
+++ b/config/external/icu/icupkg/moz.build
@@ -0,0 +1,25 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+HostProgram('icupkg')
+
+LOCAL_INCLUDES += [
+    '/intl/icu/source/common',
+    '/intl/icu/source/i18n',
+    '/intl/icu/source/tools/toolutil',
+]
+
+include('../defs.mozbuild')
+include('sources.mozbuild')
+
+HOST_SOURCES += sources
+
+HOST_USE_LIBS += [
+    'host_icudata',
+    'host_icui18n',
+    'host_icutoolutil',
+    'host_icuuc',
+]
diff --git a/config/external/icu/icupkg/sources.mozbuild b/config/external/icu/icupkg/sources.mozbuild
new file mode 100644
index 0000000000..68b7520b5b
--- /dev/null
+++ b/config/external/icu/icupkg/sources.mozbuild
@@ -0,0 +1,5 @@
+# THIS FILE IS GENERATED BY /intl/icu_sources_data.py DO NOT EDIT
+sources = [
+   '/intl/icu/source/tools/icupkg/icupkg.cpp',
+]
+
diff --git a/config/external/icu/moz.build b/config/external/icu/moz.build
index b1b2a9de28..ee203e8cdb 100644
--- a/config/external/icu/moz.build
+++ b/config/external/icu/moz.build
@@ -14,4 +14,9 @@ else:
         'data',
         'i18n',
     ]
+    if CONFIG['TARGET_ENDIANNESS'] == 'big':
+        DIRS += [
+            'toolutil',
+            'icupkg',
+        ]
     USE_LIBS += ['icudata']
diff --git a/config/external/icu/toolutil/moz.build b/config/external/icu/toolutil/moz.build
new file mode 100644
index 0000000000..7de97db9e1
--- /dev/null
+++ b/config/external/icu/toolutil/moz.build
@@ -0,0 +1,20 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+HostLibrary('host_icutoolutil')
+FINAL_LIBRARY = 'icu'
+
+DEFINES['U_TOOLUTIL_IMPLEMENTATION'] = True
+
+LOCAL_INCLUDES += [
+    '/intl/icu/source/common',
+    '/intl/icu/source/i18n',
+]
+
+include('../defs.mozbuild')
+include('sources.mozbuild')
+
+HOST_SOURCES += sources
diff --git a/config/external/icu/toolutil/sources.mozbuild b/config/external/icu/toolutil/sources.mozbuild
new file mode 100644
index 0000000000..b885078e0e
--- /dev/null
+++ b/config/external/icu/toolutil/sources.mozbuild
@@ -0,0 +1,28 @@
+# THIS FILE IS GENERATED BY /intl/icu_sources_data.py DO NOT EDIT
+sources = [
+   '/intl/icu/source/tools/toolutil/collationinfo.cpp',
+   '/intl/icu/source/tools/toolutil/dbgutil.cpp',
+   '/intl/icu/source/tools/toolutil/denseranges.cpp',
+   '/intl/icu/source/tools/toolutil/filestrm.cpp',
+   '/intl/icu/source/tools/toolutil/filetools.cpp',
+   '/intl/icu/source/tools/toolutil/flagparser.cpp',
+   '/intl/icu/source/tools/toolutil/package.cpp',
+   '/intl/icu/source/tools/toolutil/pkg_genc.cpp',
+   '/intl/icu/source/tools/toolutil/pkg_gencmn.cpp',
+   '/intl/icu/source/tools/toolutil/pkg_icu.cpp',
+   '/intl/icu/source/tools/toolutil/pkgitems.cpp',
+   '/intl/icu/source/tools/toolutil/ppucd.cpp',
+   '/intl/icu/source/tools/toolutil/swapimpl.cpp',
+   '/intl/icu/source/tools/toolutil/toolutil.cpp',
+   '/intl/icu/source/tools/toolutil/ucbuf.cpp',
+   '/intl/icu/source/tools/toolutil/ucln_tu.cpp',
+   '/intl/icu/source/tools/toolutil/ucm.cpp',
+   '/intl/icu/source/tools/toolutil/ucmstate.cpp',
+   '/intl/icu/source/tools/toolutil/udbgutil.cpp',
+   '/intl/icu/source/tools/toolutil/unewdata.cpp',
+   '/intl/icu/source/tools/toolutil/uoptions.cpp',
+   '/intl/icu/source/tools/toolutil/uparse.cpp',
+   '/intl/icu/source/tools/toolutil/writesrc.cpp',
+   '/intl/icu/source/tools/toolutil/xmlparser.cpp',
+]
+
diff --git a/config/recurse.mk b/config/recurse.mk
index 5f8d950b92..721b9b1754 100644
--- a/config/recurse.mk
+++ b/config/recurse.mk
@@ -184,6 +184,12 @@ toolkit/components/telemetry/export: layout/style/export
 # currently have a good way of expressing this dependency.
 toolkit/components/updateagent/target: toolkit/mozapps/update/common/target
 
+ifeq ($(TARGET_ENDIANNESS),big)
+config/external/icu/data/target-objects: config/external/icu/data/icudt$(MOZ_ICU_VERSION)b.dat
+config/external/icu/data/icudt$(MOZ_ICU_VERSION)b.dat: config/external/icu/icupkg/host
+	$(MAKE) -C $(@D) $(@F)
+endif
+
 ifdef ENABLE_CLANG_PLUGIN
 # Only target rules use the clang plugin.
 $(filter %/target %/target-objects,$(filter-out config/export config/host build/unix/stdc++compat/% build/clang-plugin/%,$(compile_targets))): build/clang-plugin/host build/clang-plugin/tests/target-objects
diff --git a/intl/icu_sources_data.py b/intl/icu_sources_data.py
index 1037861107..c05e03ceac 100644
--- a/intl/icu_sources_data.py
+++ b/intl/icu_sources_data.py
@@ -162,27 +162,32 @@ def write_sources(mozbuild, sources, headers):
     with open(mozbuild, 'wb') as f:
         f.write('# THIS FILE IS GENERATED BY /intl/icu_sources_data.py ' +
                 'DO NOT EDIT\n' +
-                'SOURCES += [\n')
+                'sources = [\n')
         f.write(''.join("   '/%s',\n" % s for s in sources))
         f.write(']\n\n')
-        f.write('EXPORTS.unicode += [\n')
-        f.write(''.join("   '/%s',\n" % s for s in headers))
-        f.write(']\n')
+        if headers:
+            f.write('EXPORTS.unicode += [\n')
+            f.write(''.join("   '/%s',\n" % s for s in headers))
+            f.write(']\n')
 
 
 def update_sources(topsrcdir):
     print('Updating ICU sources lists...')
     sys.path.append(mozpath.join(topsrcdir, 'build/pymake'))
-    for d in ['common', 'i18n']:
+    for d in ['common', 'i18n', 'tools/toolutil', 'tools/icupkg']:
         base_path = mozpath.join(topsrcdir, 'intl/icu/source/%s' % d)
         makefile = mozpath.join(base_path, 'Makefile.in')
         mozbuild = mozpath.join(topsrcdir,
-                                'config/external/icu/%s/sources.mozbuild' % d)
+                                'config/external/icu/%s/sources.mozbuild' % mozpath.basename(d))
         sources = [mozpath.relpath(s, topsrcdir)
                    for s in get_sources_from_makefile(makefile)]
         sources = filter(lambda x: x not in UNUSED_SOURCES, sources)
-        headers = [mozpath.normsep(os.path.relpath(s, topsrcdir))
-                   for s in list_headers(mozpath.join(base_path, 'unicode'))]
+        unicode = mozpath.join(base_path, 'unicode')
+        if os.path.exists(unicode):
+            headers = [mozpath.normsep(os.path.relpath(s, topsrcdir))
+                       for s in list_headers(unicode)]
+        else:
+            headers = None
         write_sources(mozbuild, sources, headers)
 
 
-- 
2.31.1

From 6e547dacca76e18e54caa9344d9a61971110d9f0 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Tue, 14 Jul 2020 15:57:10 +0200
Subject: [PATCH 30/44] bmo#1651207: Build the ICU data through an assembly
 file

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 config/external/icu/data/icu_data.S | 24 ++++++++++++++++++++++++
 config/external/icu/data/icudata.c  | 28 ----------------------------
 config/external/icu/data/moz.build  | 26 +++++++++-----------------
 3 files changed, 33 insertions(+), 45 deletions(-)
 create mode 100644 config/external/icu/data/icu_data.S
 delete mode 100644 config/external/icu/data/icudata.c

diff --git a/config/external/icu/data/icu_data.S b/config/external/icu/data/icu_data.S
new file mode 100644
index 0000000000..95e2e359f9
--- /dev/null
+++ b/config/external/icu/data/icu_data.S
@@ -0,0 +1,24 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#if defined(_WIN32) && defined(__i386__)
+// Mark the object as SAFESEH-enabled.
+.def @feat.00;
+.scl 3;
+.type 0;
+.endef
+.global @feat.00
+.set @feat.00, 1
+#endif
+
+.global ICU_DATA_SYMBOL
+#ifdef __APPLE__
+.data
+.const
+#else
+.section .rodata
+#endif
+.balign 16
+ICU_DATA_SYMBOL:
+    .incbin ICU_DATA_FILE
diff --git a/config/external/icu/data/icudata.c b/config/external/icu/data/icudata.c
deleted file mode 100644
index 7299ac9f6b..0000000000
--- a/config/external/icu/data/icudata.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#ifdef __APPLE__
-#  define RODATA ".data\n.const"
-#else
-#  define RODATA ".section .rodata"
-#endif
-
-#if defined(__APPLE__) || (defined(_WIN32) && defined(__i386__))
-#  define _PREFIXED(x) _##x
-#else
-#  define _PREFIXED(x) x
-#endif
-#define PREFIXED(x) _PREFIXED(x)
-
-#define DATA(sym, file) DATA2(sym, file)
-// clang-format off
-#define DATA2(sym, file)              \
-  __asm__(".global " #sym "\n"        \
-          RODATA "\n"                 \
-          ".balign 16\n"              \
-          #sym ":\n"                  \
-          "    .incbin " #file "\n")
-// clang-format on
-
-DATA(PREFIXED(ICU_DATA_SYMBOL), ICU_DATA_FILE);
diff --git a/config/external/icu/data/moz.build b/config/external/icu/data/moz.build
index 84a8a9941e..26ae97a856 100644
--- a/config/external/icu/data/moz.build
+++ b/config/external/icu/data/moz.build
@@ -10,23 +10,15 @@ Library('icudata')
 
 LOCAL_INCLUDES += ['.']
 
-data_file = {
-    'little': 'icudt%sl.dat' % CONFIG['MOZ_ICU_VERSION'],
-    'big': 'icudt%sb.dat' % CONFIG['MOZ_ICU_VERSION'],
-}
-DEFINES['ICU_DATA_FILE'] = '"%s"' % data_file[CONFIG['TARGET_ENDIANNESS']]
-DEFINES['ICU_DATA_SYMBOL'] = 'icudt%s_dat' % CONFIG['MOZ_ICU_VERSION']
+prefix = ''
+if (CONFIG['OS_ARCH'] == 'WINNT' and CONFIG['CPU_ARCH'] == 'x86') or CONFIG['OS_ARCH'] == 'Darwin':
+    prefix = '_'
+
+DEFINES['ICU_DATA_FILE'] = '"%s/icudt%sl.dat"' % (SRCDIR, CONFIG['MOZ_ICU_VERSION'])
+DEFINES['ICU_DATA_SYMBOL'] = '%sicudt%s_dat' % (prefix, CONFIG['MOZ_ICU_VERSION'])
 SOURCES += [
-    'icudata.c',
+    'icu_data.S',
 ]
 
-if CONFIG['TARGET_ENDIANNESS'] == 'big':
-    HostLibrary('host_icudata')
-    HOST_DEFINES['ICU_DATA_FILE'] = '"%s"' % data_file['little']
-    HOST_DEFINES['ICU_DATA_SYMBOL'] = DEFINES['ICU_DATA_SYMBOL']
-    HOST_SOURCES += [
-        'icudata.c',
-    ]
-    GeneratedFile(data_file['big'],
-                  script='convert_icudata.py',
-                  inputs=[data_file['little']])
+if CONFIG['OS_ARCH'] == 'WINNT' and CONFIG['CC_TYPE'] == 'clang-cl':
+    USE_INTEGRATED_CLANGCL_AS = True
-- 
2.31.1

From 15fbf4d01cf9a34007d96e69c8ba7109bf5a1cee Mon Sep 17 00:00:00 2001
From: Jan Grulich <jgrulich@redhat.com>
Date: Fri, 22 May 2020 10:26:54 +0000
Subject: [PATCH 31/44] Add support for PipeWire 0.3

---
 config/system-headers.mozbuild                |   6 +
 .../webrtc/modules/desktop_capture/BUILD.gn   |   2 +-
 .../desktop_capture_generic_gn/moz.build      |  24 +
 .../desktop_capture/desktop_capture_options.h |   2 +-
 .../linux/base_capturer_pipewire.cc           | 446 ++++++++++--------
 .../linux/base_capturer_pipewire.h            |  56 ++-
 .../linux/screen_capturer_pipewire.cc         |   2 +-
 .../linux/window_capturer_pipewire.cc         |   2 +-
 .../desktop_capture/screen_capturer_linux.cc  |   2 +-
 .../desktop_capture/window_capturer_linux.cc  |   2 +-
 toolkit/moz.configure                         |  12 +
 11 files changed, 340 insertions(+), 216 deletions(-)

diff --git a/config/system-headers.mozbuild b/config/system-headers.mozbuild
index a55e585447..b19999b2d1 100644
--- a/config/system-headers.mozbuild
+++ b/config/system-headers.mozbuild
@@ -1350,6 +1350,12 @@ if CONFIG['MOZ_SYSTEM_ICU']:
         'unicode/utypes.h',
     ]
 
+if CONFIG['MOZ_PIPEWIRE']:
+    system_headers += [
+        'gio/gunixfdlist.h',
+        'pipewire/pipewire.h',
+    ]
+
 if CONFIG['MOZ_WAYLAND']:
     system_headers += [
         'xkbcommon/xkbcommon.h',
diff --git a/media/webrtc/trunk/webrtc/modules/desktop_capture/BUILD.gn b/media/webrtc/trunk/webrtc/modules/desktop_capture/BUILD.gn
index ba885217b3..201d3b7552 100644
--- a/media/webrtc/trunk/webrtc/modules/desktop_capture/BUILD.gn
+++ b/media/webrtc/trunk/webrtc/modules/desktop_capture/BUILD.gn
@@ -158,7 +158,7 @@ if (rtc_include_tests) {
 if (is_linux) {
   if (rtc_use_pipewire) {
     pkg_config("pipewire") {
-      packages = [ "libpipewire-0.2" ]
+      packages = [ "libpipewire-0.3" ]
 
       defines = [ "WEBRTC_USE_PIPEWIRE" ]
     }
diff --git a/media/webrtc/trunk/webrtc/modules/desktop_capture/desktop_capture_generic_gn/moz.build b/media/webrtc/trunk/webrtc/modules/desktop_capture/desktop_capture_generic_gn/moz.build
index 90b40431c7..7608237f4d 100644
--- a/media/webrtc/trunk/webrtc/modules/desktop_capture/desktop_capture_generic_gn/moz.build
+++ b/media/webrtc/trunk/webrtc/modules/desktop_capture/desktop_capture_generic_gn/moz.build
@@ -194,6 +194,30 @@ if CONFIG["OS_TARGET"] == "Linux":
         "/media/webrtc/trunk/webrtc/modules/desktop_capture/window_capturer_linux.cc"
     ]
 
+# PipeWire specific files
+if CONFIG['MOZ_PIPEWIRE']:
+
+    DEFINES["WEBRTC_USE_PIPEWIRE"] = "1"
+
+    OS_LIBS += [
+        "rt",
+        "pipewire-0.3",
+        "glib-2.0",
+        "gio-2.0",
+        "gobject-2.0"
+    ]
+
+    CXXFLAGS += CONFIG['TK_CFLAGS']
+    CXXFLAGS += [ "-I/usr/include/pipewire-0.3" ]
+    CXXFLAGS += [ "-I/usr/include/spa-0.2" ]
+
+    UNIFIED_SOURCES += [
+        "/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.cc",
+        "/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/screen_capturer_pipewire.cc",
+        "/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/window_capturer_pipewire.cc"
+    ]
+
+
 if CONFIG["OS_TARGET"] == "NetBSD":
 
     DEFINES["USE_X11"] = "1"
diff --git a/media/webrtc/trunk/webrtc/modules/desktop_capture/desktop_capture_options.h b/media/webrtc/trunk/webrtc/modules/desktop_capture/desktop_capture_options.h
index 1eb8ead26e..316468eed1 100644
--- a/media/webrtc/trunk/webrtc/modules/desktop_capture/desktop_capture_options.h
+++ b/media/webrtc/trunk/webrtc/modules/desktop_capture/desktop_capture_options.h
@@ -141,7 +141,7 @@ class DesktopCaptureOptions {
   bool disable_effects_ = true;
   bool detect_updated_region_ = false;
 #if defined(WEBRTC_USE_PIPEWIRE)
-  bool allow_pipewire_ = false;
+  bool allow_pipewire_ = true;
 #endif
 };
 
diff --git a/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.cc b/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.cc
index 379341c833..76349f1fbd 100644
--- a/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.cc
+++ b/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.cc
@@ -15,8 +15,11 @@
 
 #include <spa/param/format-utils.h>
 #include <spa/param/props.h>
-#include <spa/param/video/raw-utils.h>
-#include <spa/support/type-map.h>
+
+#include <linux/dma-buf.h>
+#include <sys/mman.h>
+#include <sys/ioctl.h>
+#include <sys/syscall.h>
 
 #include <memory>
 #include <utility>
@@ -36,31 +39,36 @@ const char kSessionInterfaceName[] = "org.freedesktop.portal.Session";
 const char kRequestInterfaceName[] = "org.freedesktop.portal.Request";
 const char kScreenCastInterfaceName[] = "org.freedesktop.portal.ScreenCast";
 
-// static
-void BaseCapturerPipeWire::OnStateChanged(void* data,
-                                          pw_remote_state old_state,
-                                          pw_remote_state state,
-                                          const char* error_message) {
-  BaseCapturerPipeWire* that = static_cast<BaseCapturerPipeWire*>(data);
-  RTC_DCHECK(that);
 
-  switch (state) {
-    case PW_REMOTE_STATE_ERROR:
-      RTC_LOG(LS_ERROR) << "PipeWire remote state error: " << error_message;
-      break;
-    case PW_REMOTE_STATE_CONNECTED:
-      RTC_LOG(LS_INFO) << "PipeWire remote state: connected.";
-      that->CreateReceivingStream();
-      break;
-    case PW_REMOTE_STATE_CONNECTING:
-      RTC_LOG(LS_INFO) << "PipeWire remote state: connecting.";
+// static
+void BaseCapturerPipeWire::SyncDmaBuf(int fd, uint64_t start_or_end) {
+  struct dma_buf_sync sync = { 0 };
+
+  sync.flags = start_or_end | DMA_BUF_SYNC_READ;
+
+  while(true) {
+    int ret;
+    ret = ioctl (fd, DMA_BUF_IOCTL_SYNC, &sync);
+    if (ret == -1 && errno == EINTR) {
+      continue;
+    } else if (ret == -1) {
+      RTC_LOG(LS_ERROR) << "Failed to synchronize DMA buffer: " << g_strerror(errno);
       break;
-    case PW_REMOTE_STATE_UNCONNECTED:
-      RTC_LOG(LS_INFO) << "PipeWire remote state: unconnected.";
+    } else {
       break;
+    }
   }
 }
 
+// static
+void BaseCapturerPipeWire::OnCoreError(void *data,
+                                       uint32_t id,
+                                       int seq,
+                                       int res,
+                                       const char *message) {
+  RTC_LOG(LS_ERROR) << "core error: " << message;
+}
+
 // static
 void BaseCapturerPipeWire::OnStreamStateChanged(void* data,
                                                 pw_stream_state old_state,
@@ -73,76 +81,54 @@ void BaseCapturerPipeWire::OnStreamStateChanged(void* data,
     case PW_STREAM_STATE_ERROR:
       RTC_LOG(LS_ERROR) << "PipeWire stream state error: " << error_message;
       break;
-    case PW_STREAM_STATE_CONFIGURE:
-      pw_stream_set_active(that->pw_stream_, true);
-      break;
-    case PW_STREAM_STATE_UNCONNECTED:
-    case PW_STREAM_STATE_CONNECTING:
-    case PW_STREAM_STATE_READY:
     case PW_STREAM_STATE_PAUSED:
     case PW_STREAM_STATE_STREAMING:
+    case PW_STREAM_STATE_UNCONNECTED:
+    case PW_STREAM_STATE_CONNECTING:
       break;
   }
 }
 
 // static
-void BaseCapturerPipeWire::OnStreamFormatChanged(void* data,
-                                                 const struct spa_pod* format) {
+void BaseCapturerPipeWire::OnStreamParamChanged(void *data, uint32_t id,
+                                                const struct spa_pod *format) {
   BaseCapturerPipeWire* that = static_cast<BaseCapturerPipeWire*>(data);
   RTC_DCHECK(that);
 
-  RTC_LOG(LS_INFO) << "PipeWire stream format changed.";
+  RTC_LOG(LS_INFO) << "PipeWire stream param changed.";
 
-  if (!format) {
-    pw_stream_finish_format(that->pw_stream_, /*res=*/0, /*params=*/nullptr,
-                            /*n_params=*/0);
+  if (!format || id != SPA_PARAM_Format) {
     return;
   }
 
-  that->spa_video_format_ = new spa_video_info_raw();
-  spa_format_video_raw_parse(format, that->spa_video_format_,
-                             &that->pw_type_->format_video);
+  spa_format_video_raw_parse(format, &that->spa_video_format_);
 
-  auto width = that->spa_video_format_->size.width;
-  auto height = that->spa_video_format_->size.height;
+  auto width = that->spa_video_format_.size.width;
+  auto height = that->spa_video_format_.size.height;
   auto stride = SPA_ROUND_UP_N(width * kBytesPerPixel, 4);
   auto size = height * stride;
 
+  that->desktop_size_ = DesktopSize(width, height);
+
   uint8_t buffer[1024] = {};
   auto builder = spa_pod_builder{buffer, sizeof(buffer)};
 
   // Setup buffers and meta header for new format.
-  const struct spa_pod* params[2];
-  params[0] = reinterpret_cast<spa_pod*>(spa_pod_builder_object(
-      &builder,
-      // id to enumerate buffer requirements
-      that->pw_core_type_->param.idBuffers,
-      that->pw_core_type_->param_buffers.Buffers,
-      // Size: specified as integer (i) and set to specified size
-      ":", that->pw_core_type_->param_buffers.size, "i", size,
-      // Stride: specified as integer (i) and set to specified stride
-      ":", that->pw_core_type_->param_buffers.stride, "i", stride,
-      // Buffers: specifies how many buffers we want to deal with, set as
-      // integer (i) where preferred number is 8, then allowed number is defined
-      // as range (r) from min and max values and it is undecided (u) to allow
-      // negotiation
-      ":", that->pw_core_type_->param_buffers.buffers, "iru", 8,
-      SPA_POD_PROP_MIN_MAX(1, 32),
-      // Align: memory alignment of the buffer, set as integer (i) to specified
-      // value
-      ":", that->pw_core_type_->param_buffers.align, "i", 16));
-  params[1] = reinterpret_cast<spa_pod*>(spa_pod_builder_object(
-      &builder,
-      // id to enumerate supported metadata
-      that->pw_core_type_->param.idMeta, that->pw_core_type_->param_meta.Meta,
-      // Type: specified as id or enum (I)
-      ":", that->pw_core_type_->param_meta.type, "I",
-      that->pw_core_type_->meta.Header,
-      // Size: size of the metadata, specified as integer (i)
-      ":", that->pw_core_type_->param_meta.size, "i",
-      sizeof(struct spa_meta_header)));
-
-  pw_stream_finish_format(that->pw_stream_, /*res=*/0, params, /*n_params=*/2);
+  const struct spa_pod* params[3];
+  params[0] = reinterpret_cast<spa_pod *>(spa_pod_builder_add_object(&builder,
+              SPA_TYPE_OBJECT_ParamBuffers, SPA_PARAM_Buffers,
+              SPA_PARAM_BUFFERS_size, SPA_POD_Int(size),
+              SPA_PARAM_BUFFERS_stride, SPA_POD_Int(stride),
+              SPA_PARAM_BUFFERS_buffers, SPA_POD_CHOICE_RANGE_Int(8, 1, 32)));
+  params[1] = reinterpret_cast<spa_pod *>(spa_pod_builder_add_object(&builder,
+              SPA_TYPE_OBJECT_ParamMeta, SPA_PARAM_Meta,
+              SPA_PARAM_META_type, SPA_POD_Id(SPA_META_Header),
+              SPA_PARAM_META_size, SPA_POD_Int(sizeof(struct spa_meta_header))));
+  params[2] = reinterpret_cast<spa_pod *>(spa_pod_builder_add_object(&builder,
+              SPA_TYPE_OBJECT_ParamMeta, SPA_PARAM_Meta,
+              SPA_PARAM_META_type, SPA_POD_Id (SPA_META_VideoCrop),
+              SPA_PARAM_META_size, SPA_POD_Int (sizeof(struct spa_meta_region))));
+  pw_stream_update_params(that->pw_stream_, params, 3);
 }
 
 // static
@@ -150,15 +136,25 @@ void BaseCapturerPipeWire::OnStreamProcess(void* data) {
   BaseCapturerPipeWire* that = static_cast<BaseCapturerPipeWire*>(data);
   RTC_DCHECK(that);
 
-  pw_buffer* buf = nullptr;
+  struct pw_buffer *next_buffer;
+  struct pw_buffer *buffer = nullptr;
+
+  next_buffer = pw_stream_dequeue_buffer(that->pw_stream_);
+  while (next_buffer) {
+    buffer = next_buffer;
+    next_buffer = pw_stream_dequeue_buffer(that->pw_stream_);
 
-  if (!(buf = pw_stream_dequeue_buffer(that->pw_stream_))) {
+    if (next_buffer)
+      pw_stream_queue_buffer (that->pw_stream_, buffer);
+  }
+
+  if (!buffer) {
     return;
   }
 
-  that->HandleBuffer(buf);
+  that->HandleBuffer(buffer);
 
-  pw_stream_queue_buffer(that->pw_stream_, buf);
+  pw_stream_queue_buffer(that->pw_stream_, buffer);
 }
 
 BaseCapturerPipeWire::BaseCapturerPipeWire(CaptureSourceType source_type)
@@ -169,38 +165,22 @@ BaseCapturerPipeWire::~BaseCapturerPipeWire() {
     pw_thread_loop_stop(pw_main_loop_);
   }
 
-  if (pw_type_) {
-    delete pw_type_;
-  }
-
-  if (spa_video_format_) {
-    delete spa_video_format_;
-  }
-
   if (pw_stream_) {
     pw_stream_destroy(pw_stream_);
   }
 
-  if (pw_remote_) {
-    pw_remote_destroy(pw_remote_);
+  if (pw_core_) {
+    pw_core_disconnect(pw_core_);
   }
 
-  if (pw_core_) {
-    pw_core_destroy(pw_core_);
+  if (pw_context_) {
+    pw_context_destroy(pw_context_);
   }
 
   if (pw_main_loop_) {
     pw_thread_loop_destroy(pw_main_loop_);
   }
 
-  if (pw_loop_) {
-    pw_loop_destroy(pw_loop_);
-  }
-
-  if (current_frame_) {
-    free(current_frame_);
-  }
-
   if (start_request_signal_id_) {
     g_dbus_connection_signal_unsubscribe(connection_, start_request_signal_id_);
   }
@@ -250,27 +230,35 @@ void BaseCapturerPipeWire::InitPortal() {
 void BaseCapturerPipeWire::InitPipeWire() {
   pw_init(/*argc=*/nullptr, /*argc=*/nullptr);
 
-  pw_loop_ = pw_loop_new(/*properties=*/nullptr);
-  pw_main_loop_ = pw_thread_loop_new(pw_loop_, "pipewire-main-loop");
-
-  pw_core_ = pw_core_new(pw_loop_, /*properties=*/nullptr);
-  pw_core_type_ = pw_core_get_type(pw_core_);
-  pw_remote_ = pw_remote_new(pw_core_, nullptr, /*user_data_size=*/0);
+  pw_main_loop_ = pw_thread_loop_new("pipewire-main-loop", nullptr);
+  pw_context_ = pw_context_new(pw_thread_loop_get_loop(pw_main_loop_), nullptr, 0);
+  if (!pw_context_) {
+    RTC_LOG(LS_ERROR) << "Failed to create PipeWire context";
+    return;
+  }
 
-  InitPipeWireTypes();
+  pw_core_ = pw_context_connect(pw_context_, nullptr, 0);
+  if (!pw_core_) {
+    RTC_LOG(LS_ERROR) << "Failed to connect PipeWire context";
+    return;
+  }
 
   // Initialize event handlers, remote end and stream-related.
-  pw_remote_events_.version = PW_VERSION_REMOTE_EVENTS;
-  pw_remote_events_.state_changed = &OnStateChanged;
+  pw_core_events_.version = PW_VERSION_CORE_EVENTS;
+  pw_core_events_.error = &OnCoreError;
 
   pw_stream_events_.version = PW_VERSION_STREAM_EVENTS;
   pw_stream_events_.state_changed = &OnStreamStateChanged;
-  pw_stream_events_.format_changed = &OnStreamFormatChanged;
+  pw_stream_events_.param_changed = &OnStreamParamChanged;
   pw_stream_events_.process = &OnStreamProcess;
 
-  pw_remote_add_listener(pw_remote_, &spa_remote_listener_, &pw_remote_events_,
-                         this);
-  pw_remote_connect_fd(pw_remote_, pw_fd_);
+  pw_core_add_listener(pw_core_, &spa_core_listener_, &pw_core_events_, this);
+
+  pw_stream_ = CreateReceivingStream();
+  if (!pw_stream_) {
+    RTC_LOG(LS_ERROR) << "Failed to create PipeWire stream";
+    return;
+  }
 
   if (pw_thread_loop_start(pw_main_loop_) < 0) {
     RTC_LOG(LS_ERROR) << "Failed to start main PipeWire loop";
@@ -278,81 +266,132 @@ void BaseCapturerPipeWire::InitPipeWire() {
   }
 }
 
-void BaseCapturerPipeWire::InitPipeWireTypes() {
-  spa_type_map* map = pw_core_type_->map;
-  pw_type_ = new PipeWireType();
-
-  spa_type_media_type_map(map, &pw_type_->media_type);
-  spa_type_media_subtype_map(map, &pw_type_->media_subtype);
-  spa_type_format_video_map(map, &pw_type_->format_video);
-  spa_type_video_format_map(map, &pw_type_->video_format);
-}
-
-void BaseCapturerPipeWire::CreateReceivingStream() {
+pw_stream* BaseCapturerPipeWire::CreateReceivingStream() {
   spa_rectangle pwMinScreenBounds = spa_rectangle{1, 1};
-  spa_rectangle pwScreenBounds =
-      spa_rectangle{static_cast<uint32_t>(desktop_size_.width()),
-                    static_cast<uint32_t>(desktop_size_.height())};
+  spa_rectangle pwMaxScreenBounds = spa_rectangle{INT32_MAX, INT32_MAX};
 
-  spa_fraction pwFrameRateMin = spa_fraction{0, 1};
-  spa_fraction pwFrameRateMax = spa_fraction{60, 1};
+  auto stream = pw_stream_new(pw_core_, "webrtc-pipewire-stream", nullptr);
 
-  pw_properties* reuseProps = pw_properties_new("pipewire.client.reuse", "1",
-                                                /*end of varargs*/ nullptr);
-  pw_stream_ = pw_stream_new(pw_remote_, "webrtc-consume-stream", reuseProps);
+  if (!stream) {
+    RTC_LOG(LS_ERROR) << "Could not create receiving stream.";
+    return nullptr;
+  }
 
   uint8_t buffer[1024] = {};
-  const spa_pod* params[1];
-  spa_pod_builder builder = spa_pod_builder{buffer, sizeof(buffer)};
-  params[0] = reinterpret_cast<spa_pod*>(spa_pod_builder_object(
-      &builder,
-      // id to enumerate formats
-      pw_core_type_->param.idEnumFormat, pw_core_type_->spa_format, "I",
-      pw_type_->media_type.video, "I", pw_type_->media_subtype.raw,
-      // Video format: specified as id or enum (I), preferred format is BGRx,
-      // then allowed formats are enumerated (e) and the format is undecided (u)
-      // to allow negotiation
-      ":", pw_type_->format_video.format, "Ieu", pw_type_->video_format.BGRx,
-      SPA_POD_PROP_ENUM(2, pw_type_->video_format.RGBx,
-                        pw_type_->video_format.BGRx),
-      // Video size: specified as rectangle (R), preferred size is specified as
-      // first parameter, then allowed size is defined as range (r) from min and
-      // max values and the format is undecided (u) to allow negotiation
-      ":", pw_type_->format_video.size, "Rru", &pwScreenBounds, 2,
-      &pwMinScreenBounds, &pwScreenBounds,
-      // Frame rate: specified as fraction (F) and set to minimum frame rate
-      // value
-      ":", pw_type_->format_video.framerate, "F", &pwFrameRateMin,
-      // Max frame rate: specified as fraction (F), preferred frame rate is set
-      // to maximum value, then allowed frame rate is defined as range (r) from
-      // min and max values and it is undecided (u) to allow negotiation
-      ":", pw_type_->format_video.max_framerate, "Fru", &pwFrameRateMax, 2,
-      &pwFrameRateMin, &pwFrameRateMax));
-
-  pw_stream_add_listener(pw_stream_, &spa_stream_listener_, &pw_stream_events_,
-                         this);
+  const spa_pod* params[2];
+  spa_pod_builder builder = SPA_POD_BUILDER_INIT(buffer, sizeof (buffer));
+
+  params[0] = reinterpret_cast<spa_pod *>(spa_pod_builder_add_object(&builder,
+              SPA_TYPE_OBJECT_Format, SPA_PARAM_EnumFormat,
+              SPA_FORMAT_mediaType, SPA_POD_Id(SPA_MEDIA_TYPE_video),
+              SPA_FORMAT_mediaSubtype, SPA_POD_Id(SPA_MEDIA_SUBTYPE_raw),
+              SPA_FORMAT_VIDEO_format, SPA_POD_CHOICE_ENUM_Id(5, SPA_VIDEO_FORMAT_BGRx, SPA_VIDEO_FORMAT_RGBx, SPA_VIDEO_FORMAT_RGBA,
+                                                                 SPA_VIDEO_FORMAT_BGRx, SPA_VIDEO_FORMAT_BGRA),
+              SPA_FORMAT_VIDEO_size, SPA_POD_CHOICE_RANGE_Rectangle(&pwMinScreenBounds,
+                                                                    &pwMinScreenBounds,
+                                                                    &pwMaxScreenBounds),
+              0));
+  pw_stream_add_listener(stream, &spa_stream_listener_, &pw_stream_events_, this);
+
   pw_stream_flags flags = static_cast<pw_stream_flags>(
-      PW_STREAM_FLAG_AUTOCONNECT | PW_STREAM_FLAG_INACTIVE |
-      PW_STREAM_FLAG_MAP_BUFFERS);
-  if (pw_stream_connect(pw_stream_, PW_DIRECTION_INPUT, /*port_path=*/nullptr,
-                        flags, params,
-                        /*n_params=*/1) != 0) {
+      PW_STREAM_FLAG_AUTOCONNECT | PW_STREAM_FLAG_INACTIVE);
+
+  if (pw_stream_connect(stream, PW_DIRECTION_INPUT, pw_stream_node_id_, PW_STREAM_FLAG_AUTOCONNECT, params, 1) != 0) {
     RTC_LOG(LS_ERROR) << "Could not connect receiving stream.";
     portal_init_failed_ = true;
-    return;
   }
+
+  return stream;
 }
 
 void BaseCapturerPipeWire::HandleBuffer(pw_buffer* buffer) {
+  struct spa_meta_region* video_crop;
   spa_buffer* spaBuffer = buffer->buffer;
-  void* src = nullptr;
+  uint8_t *map = nullptr;
+  uint8_t* src = nullptr;
+  uint8_t* dst = nullptr;
+
+  if (spaBuffer->datas[0].chunk->size == 0) {
+    map = nullptr;
+    src = nullptr;
+  } else if (spaBuffer->datas[0].type == SPA_DATA_MemFd) {
+    map = static_cast<uint8_t*>(mmap(
+        nullptr, spaBuffer->datas[0].maxsize + spaBuffer->datas[0].mapoffset,
+        PROT_READ, MAP_PRIVATE, spaBuffer->datas[0].fd, 0));
+
+    if (map == MAP_FAILED) {
+      RTC_LOG(LS_ERROR) << "Failed to mmap the memory: " << std::strerror(errno);
+      return;
+    }
+
+    src = SPA_MEMBER(map, spaBuffer->datas[0].mapoffset, uint8_t);
+  } else if (spaBuffer->datas[0].type == SPA_DATA_DmaBuf) {
+    int fd;
+    fd = spaBuffer->datas[0].fd;
 
-  if (!(src = spaBuffer->datas[0].data)) {
+    map = static_cast<uint8_t*>(mmap(
+        nullptr, spaBuffer->datas[0].maxsize + spaBuffer->datas[0].mapoffset,
+        PROT_READ, MAP_PRIVATE, fd, 0));
+
+    if (map == MAP_FAILED) {
+      RTC_LOG(LS_ERROR) << "Failed to mmap the memory: " << std::strerror(errno);
+      return;
+    }
+
+    SyncDmaBuf(fd, DMA_BUF_SYNC_START);
+
+    src = SPA_MEMBER(map, spaBuffer->datas[0].mapoffset, uint8_t);
+  } else if (spaBuffer->datas[0].type == SPA_DATA_MemPtr) {
+    map = nullptr;
+    src = static_cast<uint8_t*>(spaBuffer->datas[0].data);
+  } else {
     return;
   }
 
-  uint32_t maxSize = spaBuffer->datas[0].maxsize;
-  int32_t srcStride = spaBuffer->datas[0].chunk->stride;
+  if (!src) {
+    return;
+  }
+
+  DesktopSize prev_crop_size = DesktopSize(0, 0);
+  if (video_crop_size_initialized_) {
+    prev_crop_size = video_crop_size_;
+  }  
+
+  if ((video_crop = static_cast<struct spa_meta_region*>(
+           spa_buffer_find_meta_data(spaBuffer, SPA_META_VideoCrop, sizeof(*video_crop))))) {
+    RTC_DCHECK(video_crop->region.size.width <= desktop_size_.width() &&
+               video_crop->region.size.height <= desktop_size_.height());
+    if ((video_crop->region.size.width != desktop_size_.width() ||
+        video_crop->region.size.height != desktop_size_.height()) && video_crop->region.size.width && video_crop->region.size.height) {
+      video_crop_size_ = DesktopSize(video_crop->region.size.width, video_crop->region.size.height);
+      video_crop_size_initialized_ = true;
+    } else {
+      video_crop_size_initialized_ = false;
+    }
+  } else {
+    video_crop_size_initialized_ = false;
+  }
+
+  size_t frame_size;
+  if (video_crop_size_initialized_) {
+    frame_size =
+        video_crop_size_.width() * video_crop_size_.height() * kBytesPerPixel;
+  } else {
+    frame_size =
+        desktop_size_.width() * desktop_size_.height() * kBytesPerPixel;
+  }
+
+  if (!current_frame_ ||
+      (video_crop_size_initialized_ && !video_crop_size_.equals(prev_crop_size))) {
+    current_frame_ = std::make_unique<uint8_t[]>(frame_size);
+  }
+  RTC_DCHECK(current_frame_ != nullptr);
+
+  const int32_t dstStride = video_crop_size_initialized_
+                                ? video_crop_size_.width() * kBytesPerPixel
+                                : desktop_size_.width() * kBytesPerPixel;
+  const int32_t srcStride = spaBuffer->datas[0].chunk->stride;
+
   if (srcStride != (desktop_size_.width() * kBytesPerPixel)) {
     RTC_LOG(LS_ERROR) << "Got buffer with stride different from screen stride: "
                       << srcStride
@@ -361,21 +400,40 @@ void BaseCapturerPipeWire::HandleBuffer(pw_buffer* buffer) {
     return;
   }
 
-  if (!current_frame_) {
-    current_frame_ = static_cast<uint8_t*>(malloc(maxSize));
+  dst = current_frame_.get();
+
+  // Adjust source content based on crop video position
+  if (video_crop_size_initialized_ &&
+      (video_crop->region.position.y + video_crop_size_.height() <= desktop_size_.height())) {
+    for (int i = 0; i < video_crop->region.position.y; ++i) {
+      src += srcStride;
+    }
+  }
+  const int xOffset =
+      video_crop_size_initialized_ && (video_crop->region.position.x + video_crop_size_.width() <=
+                           desktop_size_.width())
+          ? video_crop->region.position.x * kBytesPerPixel
+          : 0;
+  const int height = video_crop_size_initialized_ ? video_crop_size_.height() : desktop_size_.height();
+  for (int i = 0; i < height; ++i) {
+    // Adjust source content based on crop video position if needed
+    src += xOffset;
+    std::memcpy(dst, src, dstStride);
+    // If both sides decided to go with the RGBx format we need to convert it to
+    // BGRx to match color format expected by WebRTC.
+    if (spa_video_format_.format == SPA_VIDEO_FORMAT_RGBx ||
+        spa_video_format_.format == SPA_VIDEO_FORMAT_RGBA) {
+      ConvertRGBxToBGRx(dst, dstStride);
+    }
+    src += srcStride - xOffset;
+    dst += dstStride;
   }
-  RTC_DCHECK(current_frame_ != nullptr);
 
-  // If both sides decided to go with the RGBx format we need to convert it to
-  // BGRx to match color format expected by WebRTC.
-  if (spa_video_format_->format == pw_type_->video_format.RGBx) {
-    uint8_t* tempFrame = static_cast<uint8_t*>(malloc(maxSize));
-    std::memcpy(tempFrame, src, maxSize);
-    ConvertRGBxToBGRx(tempFrame, maxSize);
-    std::memcpy(current_frame_, tempFrame, maxSize);
-    free(tempFrame);
-  } else {
-    std::memcpy(current_frame_, src, maxSize);
+  if (map) {
+    if (spaBuffer->datas[0].type == SPA_DATA_DmaBuf) {
+      SyncDmaBuf(spaBuffer->datas[0].fd, DMA_BUF_SYNC_END);
+    }
+    munmap(map, spaBuffer->datas[0].maxsize + spaBuffer->datas[0].mapoffset);
   }
 }
 
@@ -725,10 +783,7 @@ void BaseCapturerPipeWire::OnStartRequestResponseSignal(
       g_variant_get(variant, "(u@a{sv})", &stream_id, &options);
       RTC_DCHECK(options != nullptr);
 
-      g_variant_lookup(options, "size", "(ii)", &width, &height);
-
-      that->desktop_size_.set(width, height);
-
+      that->pw_stream_node_id_ = stream_id;
       g_variant_unref(options);
       g_variant_unref(variant);
     }
@@ -813,10 +868,15 @@ void BaseCapturerPipeWire::CaptureFrame() {
     return;
   }
 
-  std::unique_ptr<DesktopFrame> result(new BasicDesktopFrame(desktop_size_));
+  DesktopSize frame_size = desktop_size_;
+  if (video_crop_size_initialized_) {
+    frame_size = video_crop_size_;
+  }
+  
+  std::unique_ptr<DesktopFrame> result(new BasicDesktopFrame(frame_size));
   result->CopyPixelsFrom(
-      current_frame_, (desktop_size_.width() * kBytesPerPixel),
-      DesktopRect::MakeWH(desktop_size_.width(), desktop_size_.height()));
+      current_frame_.get(), (frame_size.width() * kBytesPerPixel),
+      DesktopRect::MakeWH(frame_size.width(), frame_size.height()));
   if (!result) {
     callback_->OnCaptureResult(Result::ERROR_TEMPORARY, nullptr);
     return;
@@ -837,4 +897,22 @@ bool BaseCapturerPipeWire::SelectSource(SourceId id) {
   return true;
 }
 
+// static
+std::unique_ptr<DesktopCapturer>
+BaseCapturerPipeWire::CreateRawScreenCapturer(
+    const DesktopCaptureOptions& options) {
+  std::unique_ptr<BaseCapturerPipeWire> capturer =
+      std::make_unique<BaseCapturerPipeWire>(BaseCapturerPipeWire::CaptureSourceType::kAny);
+  return std::move(capturer);}
+
+// static
+std::unique_ptr<DesktopCapturer>
+BaseCapturerPipeWire::CreateRawWindowCapturer(
+    const DesktopCaptureOptions& options) {
+
+  std::unique_ptr<BaseCapturerPipeWire> capturer =
+      std::make_unique<BaseCapturerPipeWire>(BaseCapturerPipeWire::CaptureSourceType::kAny);
+  return std::move(capturer);
+}
+
 }  // namespace webrtc
diff --git a/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.h b/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.h
index 56b101acba..de54157d1a 100644
--- a/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.h
+++ b/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.h
@@ -22,17 +22,13 @@
 
 namespace webrtc {
 
-class PipeWireType {
- public:
-  spa_type_media_type media_type;
-  spa_type_media_subtype media_subtype;
-  spa_type_format_video format_video;
-  spa_type_video_format video_format;
-};
-
 class BaseCapturerPipeWire : public DesktopCapturer {
  public:
-  enum CaptureSourceType { Screen = 1, Window };
+  enum CaptureSourceType : uint32_t {
+    kScreen = 0b01,
+    kWindow = 0b10,
+    kAny = 0b11
+  };
 
   explicit BaseCapturerPipeWire(CaptureSourceType source_type);
   ~BaseCapturerPipeWire() override;
@@ -43,28 +39,32 @@ class BaseCapturerPipeWire : public DesktopCapturer {
   bool GetSourceList(SourceList* sources) override;
   bool SelectSource(SourceId id) override;
 
+  static std::unique_ptr<DesktopCapturer> CreateRawScreenCapturer(
+      const DesktopCaptureOptions& options);
+
+  static std::unique_ptr<DesktopCapturer> CreateRawWindowCapturer(
+      const DesktopCaptureOptions& options);
+
  private:
   // PipeWire types -->
+  pw_context* pw_context_ = nullptr;
   pw_core* pw_core_ = nullptr;
-  pw_type* pw_core_type_ = nullptr;
   pw_stream* pw_stream_ = nullptr;
-  pw_remote* pw_remote_ = nullptr;
-  pw_loop* pw_loop_ = nullptr;
   pw_thread_loop* pw_main_loop_ = nullptr;
-  PipeWireType* pw_type_ = nullptr;
 
+  spa_hook spa_core_listener_ = {};
   spa_hook spa_stream_listener_ = {};
-  spa_hook spa_remote_listener_ = {};
 
+  pw_core_events pw_core_events_ = {};
   pw_stream_events pw_stream_events_ = {};
-  pw_remote_events pw_remote_events_ = {};
 
-  spa_video_info_raw* spa_video_format_ = nullptr;
+  struct spa_video_info_raw spa_video_format_;
 
+  guint32 pw_stream_node_id_ = 0;
   gint32 pw_fd_ = -1;
 
   CaptureSourceType capture_source_type_ =
-      BaseCapturerPipeWire::CaptureSourceType::Screen;
+      BaseCapturerPipeWire::CaptureSourceType::kAny;
 
   // <-- end of PipeWire types
 
@@ -78,33 +78,37 @@ class BaseCapturerPipeWire : public DesktopCapturer {
   guint sources_request_signal_id_ = 0;
   guint start_request_signal_id_ = 0;
 
+  bool video_crop_size_initialized_ = false;
+  DesktopSize video_crop_size_;;
   DesktopSize desktop_size_ = {};
   DesktopCaptureOptions options_ = {};
 
-  uint8_t* current_frame_ = nullptr;
+  std::unique_ptr<uint8_t[]> current_frame_;
   Callback* callback_ = nullptr;
 
   bool portal_init_failed_ = false;
 
   void InitPortal();
   void InitPipeWire();
-  void InitPipeWireTypes();
 
-  void CreateReceivingStream();
+  pw_stream* CreateReceivingStream();
   void HandleBuffer(pw_buffer* buffer);
 
   void ConvertRGBxToBGRx(uint8_t* frame, uint32_t size);
 
-  static void OnStateChanged(void* data,
-                             pw_remote_state old_state,
-                             pw_remote_state state,
-                             const char* error);
+  static void SyncDmaBuf(int fd, uint64_t start_or_end);
+  static void OnCoreError(void *data,
+                          uint32_t id,
+                          int seq,
+                          int res,
+                          const char *message);
+  static void OnStreamParamChanged(void *data,
+                                   uint32_t id,
+                                   const struct spa_pod *format);
   static void OnStreamStateChanged(void* data,
                                    pw_stream_state old_state,
                                    pw_stream_state state,
                                    const char* error_message);
-
-  static void OnStreamFormatChanged(void* data, const struct spa_pod* format);
   static void OnStreamProcess(void* data);
   static void OnNewBuffer(void* data, uint32_t id);
 
diff --git a/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/screen_capturer_pipewire.cc b/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/screen_capturer_pipewire.cc
index 26956fc67d..3813d697bb 100644
--- a/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/screen_capturer_pipewire.cc
+++ b/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/screen_capturer_pipewire.cc
@@ -15,7 +15,7 @@
 namespace webrtc {
 
 ScreenCapturerPipeWire::ScreenCapturerPipeWire()
-    : BaseCapturerPipeWire(BaseCapturerPipeWire::CaptureSourceType::Screen) {}
+    : BaseCapturerPipeWire(BaseCapturerPipeWire::CaptureSourceType::kScreen) {}
 ScreenCapturerPipeWire::~ScreenCapturerPipeWire() {}
 
 // static
diff --git a/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/window_capturer_pipewire.cc b/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/window_capturer_pipewire.cc
index 35436475cb..c43a1f1a0c 100644
--- a/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/window_capturer_pipewire.cc
+++ b/media/webrtc/trunk/webrtc/modules/desktop_capture/linux/window_capturer_pipewire.cc
@@ -15,7 +15,7 @@
 namespace webrtc {
 
 WindowCapturerPipeWire::WindowCapturerPipeWire()
-    : BaseCapturerPipeWire(BaseCapturerPipeWire::CaptureSourceType::Window) {}
+    : BaseCapturerPipeWire(BaseCapturerPipeWire::CaptureSourceType::kWindow) {}
 WindowCapturerPipeWire::~WindowCapturerPipeWire() {}
 
 // static
diff --git a/media/webrtc/trunk/webrtc/modules/desktop_capture/screen_capturer_linux.cc b/media/webrtc/trunk/webrtc/modules/desktop_capture/screen_capturer_linux.cc
index cf8a9dd0e0..d27fab8d28 100644
--- a/media/webrtc/trunk/webrtc/modules/desktop_capture/screen_capturer_linux.cc
+++ b/media/webrtc/trunk/webrtc/modules/desktop_capture/screen_capturer_linux.cc
@@ -26,7 +26,7 @@ std::unique_ptr<DesktopCapturer> DesktopCapturer::CreateRawScreenCapturer(
     const DesktopCaptureOptions& options) {
 #if defined(WEBRTC_USE_PIPEWIRE)
   if (options.allow_pipewire() && DesktopCapturer::IsRunningUnderWayland()) {
-    return ScreenCapturerPipeWire::CreateRawScreenCapturer(options);
+    return BaseCapturerPipeWire::CreateRawScreenCapturer(options);
   }
 #endif  // defined(WEBRTC_USE_PIPEWIRE)
 
diff --git a/media/webrtc/trunk/webrtc/modules/desktop_capture/window_capturer_linux.cc b/media/webrtc/trunk/webrtc/modules/desktop_capture/window_capturer_linux.cc
index 82359e50c2..bb9724cf7c 100644
--- a/media/webrtc/trunk/webrtc/modules/desktop_capture/window_capturer_linux.cc
+++ b/media/webrtc/trunk/webrtc/modules/desktop_capture/window_capturer_linux.cc
@@ -26,7 +26,7 @@ std::unique_ptr<DesktopCapturer> DesktopCapturer::CreateRawWindowCapturer(
     const DesktopCaptureOptions& options) {
 #if defined(WEBRTC_USE_PIPEWIRE)
   if (options.allow_pipewire() && DesktopCapturer::IsRunningUnderWayland()) {
-    return WindowCapturerPipeWire::CreateRawWindowCapturer(options);
+    return BaseCapturerPipeWire::CreateRawWindowCapturer(options);
   }
 #endif  // defined(WEBRTC_USE_PIPEWIRE)
 
diff --git a/toolkit/moz.configure b/toolkit/moz.configure
index ed340fb530..359734e676 100644
--- a/toolkit/moz.configure
+++ b/toolkit/moz.configure
@@ -781,6 +781,18 @@ def app_system_headers(value):
 set_config('MOZ_APP_SYSTEM_HEADERS', app_system_headers)
 set_define('MOZ_APP_SYSTEM_HEADERS', app_system_headers)
 
+
+# PipeWire
+# ==============================================================
+option('--enable-pipewire', env='MOZ_PIPEWIRE',
+       help='Enable pipewire support.')
+
+pipewire = pkg_check_modules('MOZ_PIPEWIRE', 'libpipewire-0.3', when='--enable-pipewire')
+
+set_config('MOZ_PIPEWIRE', depends_if(pipewire)(lambda _: True))
+set_define('MOZ_PIPEWIRE', depends_if(pipewire)(lambda _: True))
+
+
 # Printing
 # ==============================================================
 option('--disable-printing', help='Disable printing support')
-- 
2.31.1

From e29325fc5656a6f64a52c549b006831eb0de40f3 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Tue, 14 Jul 2020 20:50:55 +0200
Subject: [PATCH 32/44] geckodriver: Build regex with unicode feature

Link: https://github.com/mozilla/geckodriver/issues/1743
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 testing/geckodriver/Cargo.toml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/testing/geckodriver/Cargo.toml b/testing/geckodriver/Cargo.toml
index 40599f8156..43df1fb866 100644
--- a/testing/geckodriver/Cargo.toml
+++ b/testing/geckodriver/Cargo.toml
@@ -21,7 +21,7 @@ mozdevice = { path = "../mozbase/rust/mozdevice" }
 mozprofile = { path = "../mozbase/rust/mozprofile" }
 mozrunner = { path = "../mozbase/rust/mozrunner" }
 mozversion = { path = "../mozbase/rust/mozversion" }
-regex = { version="1.0", default-features = false, features = ["perf", "std"] }
+regex = { version="1.3", default-features = false, features = ["perf", "std", "unicode"] }
 serde = "1.0"
 serde_derive = "1.0"
 serde_json = "1.0"
-- 
2.31.1

From cc5e8ecedf5c1c6c6a8af10ffba28928d5705c56 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Sat, 29 Aug 2020 22:30:59 +0200
Subject: [PATCH 33/44] LTO: Only enable LTO for Rust when complete build uses
 LTO

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 config/makefiles/rust.mk | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/config/makefiles/rust.mk b/config/makefiles/rust.mk
index f4475054f8..c952dbc008 100644
--- a/config/makefiles/rust.mk
+++ b/config/makefiles/rust.mk
@@ -56,6 +56,7 @@ endif
 # These flags are passed via `cargo rustc` and only apply to the final rustc
 # invocation (i.e., only the top-level crate, not its dependencies).
 cargo_rustc_flags = $(CARGO_RUSTCFLAGS)
+ifdef MOZ_LTO
 ifndef DEVELOPER_OPTIONS
 ifndef MOZ_DEBUG_RUST
 # Enable link-time optimization for release builds, but not when linking
@@ -70,6 +71,7 @@ RUSTFLAGS += -Cembed-bitcode=yes
 endif
 endif
 endif
+endif
 
 ifdef CARGO_INCREMENTAL
 export CARGO_INCREMENTAL
-- 
2.31.1

From 3228e1b2068c8833407afd85c258013638c7ca81 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 28 Sep 2020 20:52:24 +0200
Subject: [PATCH 34/44] Make elfhack use toolchain

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 build/unix/elfhack/Makefile.in | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/build/unix/elfhack/Makefile.in b/build/unix/elfhack/Makefile.in
index cd713093ca..27ef3d9e91 100644
--- a/build/unix/elfhack/Makefile.in
+++ b/build/unix/elfhack/Makefile.in
@@ -20,7 +20,7 @@ test-array$(DLL_SUFFIX) test-ctors$(DLL_SUFFIX): %$(DLL_SUFFIX): %.$(OBJ_SUFFIX)
 	# Fail if the backup file doesn't exist
 	[ -f '$@.bak' ]
 	# Fail if the new library doesn't contain less relocations
-	[ $$($(TOOLCHAIN_PREFIX)objdump -R $@.bak | wc -l) -gt $$(objdump -R $@ | wc -l) ]
+	[ $$($(TOOLCHAIN_PREFIX)objdump -R $@.bak | wc -l) -gt $$($(TOOLCHAIN_PREFIX)objdump -R $@ | wc -l) ]
 
 test-array$(DLL_SUFFIX) test-ctors$(DLL_SUFFIX): DSO_SONAME=$@
 test-array$(DLL_SUFFIX): DT_TYPE=INIT_ARRAY
-- 
2.31.1

From 0ff5cbfc2de5bde8e6e3cc57653901398d821baf Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Sat, 10 Oct 2020 16:07:49 +0200
Subject: [PATCH 36/44] bmo#1643201: Cherry-pick some servo changes to
 derive_common

Link: https://bugzilla.mozilla.org/show_bug.cgi?id=1663715#c7
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 servo/components/derive_common/cg.rs | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/servo/components/derive_common/cg.rs b/servo/components/derive_common/cg.rs
index 8abfd87149..f6bfeb1177 100644
--- a/servo/components/derive_common/cg.rs
+++ b/servo/components/derive_common/cg.rs
@@ -218,6 +218,10 @@ where
             elem: Box::new(map_type_params(&inner.elem, params, self_type, f)),
             ..inner.clone()
         }),
+        Type::Group(ref inner) => Type::from(TypeGroup {
+            elem: Box::new(map_type_params(&inner.elem, params, f)),
+            ..inner.clone()
+        }),
         ref ty => panic!("type {:?} cannot be mapped yet", ty),
     }
 }
-- 
2.31.1

From c133ee334d3a2a06bbc2bee017daf7d2855ac287 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Tue, 20 Oct 2020 15:19:21 +0200
Subject: [PATCH 37/44] bmo#1653339: Teach style_derive's map_type_params about
 mapping self correctly

Link: https://bugzilla.mozilla.org/show_bug.cgi?id=1643201#c30
---
 servo/components/derive_common/cg.rs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/servo/components/derive_common/cg.rs b/servo/components/derive_common/cg.rs
index f6bfeb1177..5e994230cf 100644
--- a/servo/components/derive_common/cg.rs
+++ b/servo/components/derive_common/cg.rs
@@ -219,7 +219,7 @@ where
             ..inner.clone()
         }),
         Type::Group(ref inner) => Type::from(TypeGroup {
-            elem: Box::new(map_type_params(&inner.elem, params, f)),
+            elem: Box::new(map_type_params(&inner.elem, params, self_type, f)),
             ..inner.clone()
         }),
         ref ty => panic!("type {:?} cannot be mapped yet", ty),
-- 
2.31.1

From a76e1216251025e0f819f142ab602cea6be134f2 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 1 Feb 2021 15:27:21 +0100
Subject: [PATCH 39/44] bmo#1684365: Add a null pointer check so that Firefox
 won't crash when it can't initialize mRemoteServer

Bug: https://bugs.gentoo.org/762035
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 toolkit/components/remote/nsRemoteService.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/toolkit/components/remote/nsRemoteService.cpp b/toolkit/components/remote/nsRemoteService.cpp
index 6a4b8f0491..6b5ba9e6f3 100644
--- a/toolkit/components/remote/nsRemoteService.cpp
+++ b/toolkit/components/remote/nsRemoteService.cpp
@@ -169,6 +169,10 @@ void nsRemoteService::StartupServer() {
   return;
 #endif
 
+  if (!mRemoteServer) {
+    return;
+  }
+
   nsresult rv = mRemoteServer->Startup(mProgram.get(), mProfile.get());
 
   if (NS_FAILED(rv)) {
-- 
2.31.1

From bbf48f5c0a9d868c8c89b8eb3e527e2e9bb80df6 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Mon, 26 Apr 2021 01:14:04 +0200
Subject: [PATCH 40/44] bmo#1694575: Don't include mozalloc.h from the iosfwd
 wrapper

Bug: https://bugs.gentoo.org/785622
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 config/gcc-stl-wrapper.template.h | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/config/gcc-stl-wrapper.template.h b/config/gcc-stl-wrapper.template.h
index 9fe70fbaab..0003722b2c 100644
--- a/config/gcc-stl-wrapper.template.h
+++ b/config/gcc-stl-wrapper.template.h
@@ -27,7 +27,11 @@
 //  # define _GLIBCXX_DEBUG 1
 #endif
 
-// Don't include mozalloc for cstdlib. See bug 1245076.
+// Don't include mozalloc.h for cstdlib, type_traits, limits and iosfwd.
+// See bug 1245076 (cstdlib), bug 1594027 (type_traits, limits) and
+// bug 1694575 (iosfwd).
+// Please be careful when adding more exceptions, especially regarding
+// the header not directly or indirectly including <new>.
 #ifndef moz_dont_include_mozalloc_for_cstdlib
 #  define moz_dont_include_mozalloc_for_cstdlib
 #endif
@@ -40,6 +44,10 @@
 #  define moz_dont_include_mozalloc_for_limits
 #endif
 
+#ifndef moz_dont_include_mozalloc_for_iosfwd
+#  define moz_dont_include_mozalloc_for_iosfwd
+#endif
+
 // Include mozalloc after the STL header and all other headers it includes
 // have been preprocessed.
 #if !defined(MOZ_INCLUDE_MOZALLOC_H) && \
-- 
2.31.1

From 03a634ff2733f86fd9f70c06123bf789779d130f Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Fri, 21 May 2021 17:21:59 +0200
Subject: [PATCH 43/44] bmo#1661027: Update `cc` crate to v1.0.59

Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 Cargo.lock                                  |   5 +-
 third_party/rust/cc/.cargo-checksum.json    |   2 +-
 third_party/rust/cc/Cargo.lock              | 133 +++--
 third_party/rust/cc/Cargo.toml              |  12 +-
 third_party/rust/cc/README.md               |   3 +-
 third_party/rust/cc/src/lib.rs              | 574 +++++++++++++++-----
 third_party/rust/cc/src/windows_registry.rs |  90 ++-
 third_party/rust/cc/tests/support/mod.rs    |  16 +-
 third_party/rust/cc/tests/test.rs           |  36 ++
 9 files changed, 621 insertions(+), 250 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 42a245ce80..aec9e964d2 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -514,12 +514,11 @@ checksum = "926013f2860c46252efceabb19f4a6b308197505082c609025aa6706c011d427"
 
 [[package]]
 name = "cc"
-version = "1.0.47"
+version = "1.0.59"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "aa87058dce70a3ff5621797f1506cb837edd02ac4c0ae642b4542dce802908b8"
+checksum = "66120af515773fb005778dc07c261bd201ec8ce50bd6e7144c927753fe013381"
 dependencies = [
  "jobserver",
- "num_cpus",
 ]
 
 [[package]]
diff --git a/third_party/rust/cc/.cargo-checksum.json b/third_party/rust/cc/.cargo-checksum.json
index 417fde7953..a9252fa545 100644
--- a/third_party/rust/cc/.cargo-checksum.json
+++ b/third_party/rust/cc/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.lock":"3aff5f8b0a7f4d72852b11b0526f0002e6bf55f19f1ebd6470d7f97fbd540e60","Cargo.toml":"6ab10d9b6a9c6f0909074e6698c90c6b6a7223661ec2e83174d2593117cbe7f2","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"378f5840b258e2779c39418f3f2d7b2ba96f1c7917dd6be0713f88305dbda397","README.md":"7184fbdf375a057e673257348f6d7584c0dd11b66318d98f3647f69eb610b097","src/bin/gcc-shim.rs":"b77907875029494b6288841c3aed2e4939ed40708c7f597fca5c9e2570490ca6","src/com.rs":"bcdaf1c28b71e6ef889c6b08d1ce9d7c0761344a677f523bc4c3cd297957f804","src/lib.rs":"4753929dbb7b676c19d7cfa06d0a47e37003554b80c536cbf2b892d591ef61c2","src/registry.rs":"3cc1b5a50879fa751572878ae1d0afbfc960c11665258492754b2c8bccb0ff5d","src/setup_config.rs":"7014103587d3382eac599cb76f016e2609b8140970861b2237982d1db24af265","src/winapi.rs":"ea8b7edbb9ff87957254f465c2334e714c5d6b3b19a8d757c48ea7ca0881c50c","src/windows_registry.rs":"388e79dcf3e84078ae0b086c6cdee9cf9eb7e3ffafdcbf3e2df26163661f5856","tests/cc_env.rs":"e02b3b0824ad039b47e4462c5ef6dbe6c824c28e7953af94a0f28f7b5158042e","tests/cflags.rs":"57f06eb5ce1557e5b4a032d0c4673e18fbe6f8d26c1deb153126e368b96b41b3","tests/cxxflags.rs":"c2c6c6d8a0d7146616fa1caed26876ee7bc9fcfffd525eb4743593cade5f3371","tests/support/mod.rs":"71620b178583b6e6e5e0d4cac14e2cef6afc62fb6841e0c72ed1784543abf8ac","tests/test.rs":"1605640c9b94a77f48fc92e1dc0485bdf1960da5626e2e00279e4703691656bc"},"package":"aa87058dce70a3ff5621797f1506cb837edd02ac4c0ae642b4542dce802908b8"}
\ No newline at end of file
+{"files":{"Cargo.lock":"bd34a585a35969291c78b96b1f239fa09f1f9dbeee48474989695def1ed64052","Cargo.toml":"cb73923110f764c2a6da0fde98db8f5f7c7194bd56e96e2f302da9ba29cba0a8","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"378f5840b258e2779c39418f3f2d7b2ba96f1c7917dd6be0713f88305dbda397","README.md":"68fe1bc9f8aab4d8d195e8bc39fe76562742dc392f5c490e5404e01463100277","src/bin/gcc-shim.rs":"b77907875029494b6288841c3aed2e4939ed40708c7f597fca5c9e2570490ca6","src/com.rs":"bcdaf1c28b71e6ef889c6b08d1ce9d7c0761344a677f523bc4c3cd297957f804","src/lib.rs":"96f4782c70e0bd8d9ab7ce3efcc2091d2591c3276c0ed672e2379748bb3930aa","src/registry.rs":"3cc1b5a50879fa751572878ae1d0afbfc960c11665258492754b2c8bccb0ff5d","src/setup_config.rs":"7014103587d3382eac599cb76f016e2609b8140970861b2237982d1db24af265","src/winapi.rs":"ea8b7edbb9ff87957254f465c2334e714c5d6b3b19a8d757c48ea7ca0881c50c","src/windows_registry.rs":"52afe8554f577c87841c48ddee3ba7ffe70a00129e1d6eeb2ec0efb3d2b9aa11","tests/cc_env.rs":"e02b3b0824ad039b47e4462c5ef6dbe6c824c28e7953af94a0f28f7b5158042e","tests/cflags.rs":"57f06eb5ce1557e5b4a032d0c4673e18fbe6f8d26c1deb153126e368b96b41b3","tests/cxxflags.rs":"c2c6c6d8a0d7146616fa1caed26876ee7bc9fcfffd525eb4743593cade5f3371","tests/support/mod.rs":"16274867f23871e9b07614eda4c7344da13d1751fed63d4f633857e40be86394","tests/test.rs":"65c073e0e2cf4aa0433066102788e9f57442719e6f32f5ad5248aa7132bb4597"},"package":"66120af515773fb005778dc07c261bd201ec8ce50bd6e7144c927753fe013381"}
\ No newline at end of file
diff --git a/third_party/rust/cc/Cargo.lock b/third_party/rust/cc/Cargo.lock
index ee899568d1..a624f35455 100644
--- a/third_party/rust/cc/Cargo.lock
+++ b/third_party/rust/cc/Cargo.lock
@@ -2,153 +2,144 @@
 # It is not intended for manual editing.
 [[package]]
 name = "cc"
-version = "1.0.47"
+version = "1.0.59"
 dependencies = [
- "jobserver 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)",
- "num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)",
+ "jobserver",
+ "tempfile",
 ]
 
 [[package]]
 name = "cfg-if"
 version = "0.1.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-
-[[package]]
-name = "fuchsia-cprng"
-version = "0.1.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822"
 
 [[package]]
 name = "getrandom"
-version = "0.1.12"
+version = "0.1.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb"
 dependencies = [
- "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.64 (registry+https://github.com/rust-lang/crates.io-index)",
- "wasi 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if",
+ "libc",
+ "wasi",
 ]
 
 [[package]]
 name = "jobserver"
-version = "0.1.17"
+version = "0.1.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5c71313ebb9439f74b00d9d2dcec36440beaf57a6aa0623068441dd7cd81a7f2"
 dependencies = [
- "getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.64 (registry+https://github.com/rust-lang/crates.io-index)",
- "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc",
 ]
 
 [[package]]
 name = "libc"
-version = "0.2.64"
+version = "0.2.74"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a2f02823cf78b754822df5f7f268fb59822e7296276d3e069d8e8cb26a14bd10"
 
 [[package]]
-name = "log"
-version = "0.4.8"
+name = "ppv-lite86"
+version = "0.2.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
-]
+checksum = "237a5ed80e274dbc66f86bd59c1e25edc039660be53194b5fe0a482e0f2612ea"
 
 [[package]]
-name = "num_cpus"
-version = "1.10.1"
+name = "rand"
+version = "0.7.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03"
 dependencies = [
- "libc 0.2.64 (registry+https://github.com/rust-lang/crates.io-index)",
+ "getrandom",
+ "libc",
+ "rand_chacha",
+ "rand_core",
+ "rand_hc",
 ]
 
 [[package]]
-name = "rand"
-version = "0.4.6"
+name = "rand_chacha"
+version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402"
 dependencies = [
- "fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.64 (registry+https://github.com/rust-lang/crates.io-index)",
- "rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "ppv-lite86",
+ "rand_core",
 ]
 
 [[package]]
 name = "rand_core"
-version = "0.3.1"
+version = "0.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19"
 dependencies = [
- "rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "getrandom",
 ]
 
 [[package]]
-name = "rand_core"
-version = "0.4.2"
+name = "rand_hc"
+version = "0.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c"
+dependencies = [
+ "rand_core",
+]
 
 [[package]]
-name = "rdrand"
-version = "0.4.0"
+name = "redox_syscall"
+version = "0.1.57"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
-]
+checksum = "41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce"
 
 [[package]]
 name = "remove_dir_all"
-version = "0.5.2"
+version = "0.5.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7"
 dependencies = [
- "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi",
 ]
 
 [[package]]
-name = "tempdir"
-version = "0.3.7"
+name = "tempfile"
+version = "3.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9"
 dependencies = [
- "rand 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if",
+ "libc",
+ "rand",
+ "redox_syscall",
+ "remove_dir_all",
+ "winapi",
 ]
 
 [[package]]
 name = "wasi"
-version = "0.7.0"
+version = "0.9.0+wasi-snapshot-preview1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"
 
 [[package]]
 name = "winapi"
-version = "0.3.8"
+version = "0.3.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
 dependencies = [
- "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi-i686-pc-windows-gnu",
+ "winapi-x86_64-pc-windows-gnu",
 ]
 
 [[package]]
 name = "winapi-i686-pc-windows-gnu"
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
 
 [[package]]
 name = "winapi-x86_64-pc-windows-gnu"
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-
-[metadata]
-"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)" = "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822"
-"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba"
-"checksum getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)" = "473a1265acc8ff1e808cd0a1af8cee3c2ee5200916058a2ca113c29f2d903571"
-"checksum jobserver 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)" = "f2b1d42ef453b30b7387e113da1c83ab1605d90c5b4e0eb8e96d016ed3b8c160"
-"checksum libc 0.2.64 (registry+https://github.com/rust-lang/crates.io-index)" = "74dfca3d9957906e8d1e6a0b641dc9a59848e793f1da2165889fd4f62d10d79c"
-"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)" = "14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7"
-"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)" = "bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273"
-"checksum rand 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)" = "552840b97013b1a26992c11eac34bdd778e464601a4c2054b5f0bff7c6761293"
-"checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b"
-"checksum rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)" = "9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc"
-"checksum rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2"
-"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)" = "4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e"
-"checksum tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)" = "15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8"
-"checksum wasi 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "b89c3ce4ce14bdc6fb6beaf9ec7928ca331de5df7e5ea278375642a2f478570d"
-"checksum winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)" = "8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6"
-"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
-"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
diff --git a/third_party/rust/cc/Cargo.toml b/third_party/rust/cc/Cargo.toml
index 8efe26374c..2b3aac577f 100644
--- a/third_party/rust/cc/Cargo.toml
+++ b/third_party/rust/cc/Cargo.toml
@@ -13,7 +13,7 @@
 [package]
 edition = "2018"
 name = "cc"
-version = "1.0.47"
+version = "1.0.59"
 authors = ["Alex Crichton <alex@alexcrichton.com>"]
 exclude = ["/.travis.yml", "/appveyor.yml"]
 description = "A build-time dependency for Cargo build scripts to assist in invoking the native\nC compiler to compile native C code into a static archive to be linked into Rust\ncode.\n"
@@ -27,12 +27,8 @@ repository = "https://github.com/alexcrichton/cc-rs"
 [dependencies.jobserver]
 version = "0.1.16"
 optional = true
-
-[dependencies.num_cpus]
-version = "1.10"
-optional = true
-[dev-dependencies.tempdir]
-version = "0.3"
+[dev-dependencies.tempfile]
+version = "3"
 
 [features]
-parallel = ["num_cpus", "jobserver"]
+parallel = ["jobserver"]
diff --git a/third_party/rust/cc/README.md b/third_party/rust/cc/README.md
index 68448aceca..e147d7e177 100644
--- a/third_party/rust/cc/README.md
+++ b/third_party/rust/cc/README.md
@@ -39,7 +39,7 @@ application will now have the C files `foo.c` and `bar.c` compiled into a file
 named libfoo.a. You can call the functions in Rust by declaring functions in
 your Rust code like so:
 
-```
+```rust,no_run
 extern {
     fn foo_function();
     fn bar_function();
@@ -150,6 +150,7 @@ fn main() {
 When using C++ library compilation switch, the `CXX` and `CXXFLAGS` env
 variables are used instead of `CC` and `CFLAGS` and the C++ standard library is
 linked to the crate target.
+Remember that C++ does name mangling so `extern "C"` might be required to enable rust linker to find your functions.
 
 ## CUDA C++ support
 
diff --git a/third_party/rust/cc/src/lib.rs b/third_party/rust/cc/src/lib.rs
index 621d31d6b8..fecc073056 100644
--- a/third_party/rust/cc/src/lib.rs
+++ b/third_party/rust/cc/src/lib.rs
@@ -120,6 +120,7 @@ pub struct Build {
     warnings: Option<bool>,
     extra_warnings: Option<bool>,
     env_cache: Arc<Mutex<HashMap<String, Option<String>>>>,
+    apple_sdk_root_cache: Arc<Mutex<HashMap<String, OsString>>>,
 }
 
 /// Represents the types of errors that may occur while using cc-rs.
@@ -167,6 +168,8 @@ impl Display for Error {
     }
 }
 
+impl std::error::Error for Error {}
+
 /// Configuration used to represent an invocation of a C compiler.
 ///
 /// This can be used to figure out what compiler is in use, what the arguments
@@ -310,6 +313,7 @@ impl Build {
             extra_warnings: None,
             warnings_into_errors: false,
             env_cache: Arc::new(Mutex::new(HashMap::new())),
+            apple_sdk_root_cache: Arc::new(Mutex::new(HashMap::new())),
         }
     }
 
@@ -412,7 +416,7 @@ impl Build {
     /// For a convenience method for setting flags conditionally,
     /// see `flag_if_supported()`.
     ///
-    /// It may return error if it's unable to run the compilier with a test file
+    /// It may return error if it's unable to run the compiler with a test file
     /// (e.g. the compiler is missing or a write to the `out_dir` failed).
     ///
     /// Note: Once computed, the result of this call is stored in the
@@ -447,11 +451,13 @@ impl Build {
 
         let mut cmd = compiler.to_command();
         let is_arm = target.contains("aarch64") || target.contains("arm");
+        let clang = compiler.family == ToolFamily::Clang;
         command_add_output_file(
             &mut cmd,
             &obj,
             self.cuda,
             target.contains("msvc"),
+            clang,
             false,
             is_arm,
         );
@@ -845,7 +851,7 @@ impl Build {
 
     /// Configures whether the compiler will emit position independent code.
     ///
-    /// This option defaults to `false` for `windows-gnu` and `riscv` targets and
+    /// This option defaults to `false` for `windows-gnu` and bare metal targets and
     /// to `true` for all other targets.
     pub fn pic(&mut self, pic: bool) -> &mut Build {
         self.pic = Some(pic);
@@ -964,7 +970,7 @@ impl Build {
     /// Run the compiler, generating the file `output`
     ///
     /// The name `output` should be the name of the library.  For backwards compatibility,
-    /// the `output` may start with `lib` and end with `.a`.  The Rust compilier will create
+    /// the `output` may start with `lib` and end with `.a`.  The Rust compiler will create
     /// the assembly with the lib prefix and .a extension.  MSVC will create a file without prefix,
     /// ending with `.lib`.
     ///
@@ -1099,9 +1105,13 @@ impl Build {
                 return client;
             }
 
-            // ... but if that fails for whatever reason fall back to the number
-            // of cpus on the system or the `NUM_JOBS` env var.
-            let mut parallelism = num_cpus::get();
+            // ... but if that fails for whatever reason select something
+            // reasonable and crate a new jobserver. Use `NUM_JOBS` if set (it's
+            // configured by Cargo) and otherwise just fall back to a
+            // semi-reasonable number. Note that we could use `num_cpus` here
+            // but it's an extra dependency that will almost never be used, so
+            // it's generally not too worth it.
+            let mut parallelism = 4;
             if let Ok(amt) = env::var("NUM_JOBS") {
                 if let Ok(amt) = amt.parse() {
                     parallelism = amt;
@@ -1138,10 +1148,11 @@ impl Build {
         let is_asm = obj.src.extension().and_then(|s| s.to_str()) == Some("asm");
         let target = self.get_target()?;
         let msvc = target.contains("msvc");
+        let compiler = self.try_get_compiler()?;
+        let clang = compiler.family == ToolFamily::Clang;
         let (mut cmd, name) = if msvc && is_asm {
             self.msvc_macro_assembler()?
         } else {
-            let compiler = self.try_get_compiler()?;
             let mut cmd = compiler.to_command();
             for &(ref a, ref b) in self.env.iter() {
                 cmd.env(a, b);
@@ -1157,12 +1168,15 @@ impl Build {
             )
         };
         let is_arm = target.contains("aarch64") || target.contains("arm");
-        command_add_output_file(&mut cmd, &obj.dst, self.cuda, msvc, is_asm, is_arm);
+        command_add_output_file(&mut cmd, &obj.dst, self.cuda, msvc, clang, is_asm, is_arm);
         // armasm and armasm64 don't requrie -c option
         if !msvc || !is_asm || !is_arm {
             cmd.arg("-c");
         }
         cmd.arg(&obj.src);
+        if cfg!(target_os = "macos") {
+            self.fix_env_for_apple_os(&mut cmd)?;
+        }
 
         run(&mut cmd, &name)?;
         Ok(())
@@ -1361,14 +1375,23 @@ impl Build {
                     cmd.push_opt_unless_duplicate(format!("-O{}", opt_level).into());
                 }
 
+                if cmd.family == ToolFamily::Clang && target.contains("android") {
+                    // For compatibility with code that doesn't use pre-defined `__ANDROID__` macro.
+                    // If compiler used via ndk-build or cmake (officially supported build methods)
+                    // this macros is defined.
+                    // See https://android.googlesource.com/platform/ndk/+/refs/heads/ndk-release-r21/build/cmake/android.toolchain.cmake#456
+                    // https://android.googlesource.com/platform/ndk/+/refs/heads/ndk-release-r21/build/core/build-binary.mk#141
+                    cmd.push_opt_unless_duplicate("-DANDROID".into());
+                }
+
                 if !target.contains("-ios") {
                     cmd.push_cc_arg("-ffunction-sections".into());
                     cmd.push_cc_arg("-fdata-sections".into());
                 }
-                // Disable generation of PIC on RISC-V for now: rust-lld doesn't support this yet
+                // Disable generation of PIC on bare-metal for now: rust-lld doesn't support this yet
                 if self
                     .pic
-                    .unwrap_or(!target.contains("windows-gnu") && !target.contains("riscv"))
+                    .unwrap_or(!target.contains("windows") && !target.contains("-none-"))
                 {
                     cmd.push_cc_arg("-fPIC".into());
                     // PLT only applies if code is compiled with PIC support,
@@ -1397,19 +1420,23 @@ impl Build {
         // Target flags
         match cmd.family {
             ToolFamily::Clang => {
-                cmd.args.push(format!("--target={}", target).into());
+                if !(target.contains("android")
+                    && android_clang_compiler_uses_target_arg_internally(&cmd.path))
+                {
+                    cmd.args.push(format!("--target={}", target).into());
+                }
             }
             ToolFamily::Msvc { clang_cl } => {
                 // This is an undocumented flag from MSVC but helps with making
                 // builds more reproducible by avoiding putting timestamps into
                 // files.
-                cmd.args.push("-Brepro".into());
+                cmd.push_cc_arg("-Brepro".into());
 
                 if clang_cl {
                     if target.contains("x86_64") {
-                        cmd.args.push("-m64".into());
+                        cmd.push_cc_arg("-m64".into());
                     } else if target.contains("86") {
-                        cmd.args.push("-m32".into());
+                        cmd.push_cc_arg("-m32".into());
                         cmd.push_cc_arg("-arch:IA32".into());
                     } else {
                         cmd.push_cc_arg(format!("--target={}", target).into());
@@ -1443,6 +1470,19 @@ impl Build {
                     cmd.args.push("-m64".into());
                 }
 
+                if target.contains("darwin") {
+                    if target.contains("x86_64") {
+                        cmd.args.push("-arch".into());
+                        cmd.args.push("x86_64".into());
+                    } else if target.contains("arm64e") {
+                        cmd.args.push("-arch".into());
+                        cmd.args.push("arm64e".into());
+                    } else if target.contains("aarch64") {
+                        cmd.args.push("-arch".into());
+                        cmd.args.push("arm64".into());
+                    }
+                }
+
                 if self.static_flag.is_none() {
                     let features = self
                         .getenv("CARGO_CFG_TARGET_FEATURE")
@@ -1582,19 +1622,30 @@ impl Build {
                         cmd.args.push("-mfloat-abi=soft".into());
                     }
                 }
+                if target.starts_with("armv7a") {
+                    cmd.args.push("-march=armv7-a".into());
+
+                    if target.ends_with("eabihf") {
+                        // lowest common denominator FPU
+                        cmd.args.push("-mfpu=vfpv3-d16".into());
+                    }
+                }
                 if target.starts_with("riscv32") || target.starts_with("riscv64") {
                     // get the 32i/32imac/32imc/64gc/64imac/... part
                     let mut parts = target.split('-');
                     if let Some(arch) = parts.next() {
                         let arch = &arch[5..];
                         cmd.args.push(("-march=rv".to_owned() + arch).into());
-                        // ABI is always soft-float right now, update this when this is no longer the
-                        // case:
-                        if arch.starts_with("64") {
+                        if target.contains("linux") && arch.starts_with("64") {
+                            cmd.args.push("-mabi=lp64d".into());
+                        } else if target.contains("linux") && arch.starts_with("32") {
+                            cmd.args.push("-mabi=ilp32d".into());
+                        } else if arch.starts_with("64") {
                             cmd.args.push("-mabi=lp64".into());
                         } else {
                             cmd.args.push("-mabi=ilp32".into());
                         }
+                        cmd.args.push("-mcmodel=medany".into());
                     }
                 }
             }
@@ -1654,14 +1705,19 @@ impl Build {
             "ml.exe"
         };
         let mut cmd = windows_registry::find(&target, tool).unwrap_or_else(|| self.cmd(tool));
+        cmd.arg("-nologo"); // undocumented, yet working with armasm[64]
         for directory in self.include_directories.iter() {
             cmd.arg("-I").arg(directory);
         }
-        for &(ref key, ref value) in self.definitions.iter() {
-            if let Some(ref value) = *value {
-                cmd.arg(&format!("-D{}={}", key, value));
-            } else {
-                cmd.arg(&format!("-D{}", key));
+        if target.contains("aarch64") || target.contains("arm") {
+            println!("cargo:warning=The MSVC ARM assemblers do not support -D flags");
+        } else {
+            for &(ref key, ref value) in self.definitions.iter() {
+                if let Some(ref value) = *value {
+                    cmd.arg(&format!("-D{}={}", key, value));
+                } else {
+                    cmd.arg(&format!("-D{}", key));
+                }
             }
         }
 
@@ -1804,6 +1860,7 @@ impl Build {
         let arch = match arch {
             "arm" | "armv7" | "thumbv7" => ArchSpec::Device("armv7"),
             "armv7s" | "thumbv7s" => ArchSpec::Device("armv7s"),
+            "arm64e" => ArchSpec::Device("arm64e"),
             "arm64" | "aarch64" => ArchSpec::Device("arm64"),
             "i386" | "i686" => ArchSpec::Simulator("-m32"),
             "x86_64" => ArchSpec::Simulator("-m64"),
@@ -1835,30 +1892,12 @@ impl Build {
         };
 
         self.print(&format!("Detecting iOS SDK path for {}", sdk));
-        let sdk_path = self
-            .cmd("xcrun")
-            .arg("--show-sdk-path")
-            .arg("--sdk")
-            .arg(sdk)
-            .stderr(Stdio::inherit())
-            .output()?
-            .stdout;
-
-        let sdk_path = match String::from_utf8(sdk_path) {
-            Ok(p) => p,
-            Err(_) => {
-                return Err(Error::new(
-                    ErrorKind::IOError,
-                    "Unable to determine iOS SDK path.",
-                ));
-            }
-        };
-
+        let sdk_path = self.apple_sdk_root(sdk)?;
         cmd.args.push("-isysroot".into());
-        cmd.args.push(sdk_path.trim().into());
+        cmd.args.push(sdk_path);
         cmd.args.push("-fembed-bitcode".into());
         /*
-         * TODO we probably ultimatedly want the -fembed-bitcode-marker flag
+         * TODO we probably ultimately want the -fembed-bitcode-marker flag
          * but can't have it now because of an issue in LLVM:
          * https://github.com/alexcrichton/cc-rs/issues/301
          * https://github.com/rust-lang/rust/pull/48896#comment-372192660
@@ -1892,8 +1931,11 @@ impl Build {
             ("CC", "cl.exe", "gcc", "cc", "clang")
         };
 
-        // On Solaris, c++/cc unlikely to exist or be correct.
-        let default = if host.contains("solaris") {
+        // On historical Solaris systems, "cc" may have been Sun Studio, which
+        // is not flag-compatible with "gcc".  This history casts a long shadow,
+        // and many modern illumos distributions today ship GCC as "gcc" without
+        // also making it available as "cc".
+        let default = if host.contains("solaris") || host.contains("illumos") {
             gnu
         } else {
             traditional
@@ -1910,13 +1952,13 @@ impl Build {
                     .iter()
                     .find(|a| a.starts_with(DRIVER_MODE))
                     .map(|a| &a[DRIVER_MODE.len()..]);
-                // chop off leading/trailing whitespace to work around
+                // Chop off leading/trailing whitespace to work around
                 // semi-buggy build scripts which are shared in
                 // makefiles/configure scripts (where spaces are far more
                 // lenient)
                 let mut t = Tool::with_clang_driver(PathBuf::from(tool.trim()), driver_mode);
-                if let Some(cc) = wrapper {
-                    t.cc_wrapper_path = Some(PathBuf::from(cc));
+                if let Some(cc_wrapper) = wrapper {
+                    t.cc_wrapper_path = Some(PathBuf::from(cc_wrapper));
                 }
                 for arg in args {
                     t.cc_wrapper_args.push(arg.into());
@@ -1951,20 +1993,7 @@ impl Build {
                         format!("{}.exe", gnu)
                     }
                 } else if target.contains("android") {
-                    let target = target
-                        .replace("armv7neon", "arm")
-                        .replace("armv7", "arm")
-                        .replace("thumbv7neon", "arm")
-                        .replace("thumbv7", "arm");
-                    let gnu_compiler = format!("{}-{}", target, gnu);
-                    let clang_compiler = format!("{}-{}", target, clang);
-                    // Check if gnu compiler is present
-                    // if not, use clang
-                    if Command::new(&gnu_compiler).spawn().is_ok() {
-                        gnu_compiler
-                    } else {
-                        clang_compiler
-                    }
+                    autodetect_android_compiler(&target, &host, gnu, clang)
                 } else if target.contains("cloudabi") {
                     format!("{}-{}", target, traditional)
                 } else if target == "wasm32-wasi"
@@ -1975,79 +2004,7 @@ impl Build {
                 } else if target.contains("vxworks") {
                     "wr-c++".to_string()
                 } else if self.get_host()? != target {
-                    // CROSS_COMPILE is of the form: "arm-linux-gnueabi-"
-                    let cc_env = self.getenv("CROSS_COMPILE");
-                    let cross_compile = cc_env.as_ref().map(|s| s.trim_right_matches('-'));
-                    let prefix = cross_compile.or(match &target[..] {
-                        "aarch64-unknown-linux-gnu" => Some("aarch64-linux-gnu"),
-                        "aarch64-unknown-linux-musl" => Some("aarch64-linux-musl"),
-                        "aarch64-unknown-netbsd" => Some("aarch64--netbsd"),
-                        "arm-unknown-linux-gnueabi" => Some("arm-linux-gnueabi"),
-                        "armv4t-unknown-linux-gnueabi" => Some("arm-linux-gnueabi"),
-                        "armv5te-unknown-linux-gnueabi" => Some("arm-linux-gnueabi"),
-                        "arm-frc-linux-gnueabi" => Some("arm-frc-linux-gnueabi"),
-                        "arm-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
-                        "arm-unknown-linux-musleabi" => Some("arm-linux-musleabi"),
-                        "arm-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
-                        "arm-unknown-netbsd-eabi" => Some("arm--netbsdelf-eabi"),
-                        "armv6-unknown-netbsd-eabihf" => Some("armv6--netbsdelf-eabihf"),
-                        "armv7-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
-                        "armv7-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
-                        "armv7neon-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
-                        "armv7neon-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
-                        "thumbv7-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
-                        "thumbv7-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
-                        "thumbv7neon-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
-                        "thumbv7neon-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
-                        "armv7-unknown-netbsd-eabihf" => Some("armv7--netbsdelf-eabihf"),
-                        "i586-unknown-linux-musl" => Some("musl"),
-                        "i686-pc-windows-gnu" => Some("i686-w64-mingw32"),
-                        "i686-uwp-windows-gnu" => Some("i686-w64-mingw32"),
-                        "i686-unknown-linux-musl" => Some("musl"),
-                        "i686-unknown-netbsd" => Some("i486--netbsdelf"),
-                        "mips-unknown-linux-gnu" => Some("mips-linux-gnu"),
-                        "mipsel-unknown-linux-gnu" => Some("mipsel-linux-gnu"),
-                        "mips64-unknown-linux-gnuabi64" => Some("mips64-linux-gnuabi64"),
-                        "mips64el-unknown-linux-gnuabi64" => Some("mips64el-linux-gnuabi64"),
-                        "mipsisa32r6-unknown-linux-gnu" => Some("mipsisa32r6-linux-gnu"),
-                        "mipsisa32r6el-unknown-linux-gnu" => Some("mipsisa32r6el-linux-gnu"),
-                        "mipsisa64r6-unknown-linux-gnuabi64" => Some("mipsisa64r6-linux-gnuabi64"),
-                        "mipsisa64r6el-unknown-linux-gnuabi64" => {
-                            Some("mipsisa64r6el-linux-gnuabi64")
-                        }
-                        "powerpc-unknown-linux-gnu" => Some("powerpc-linux-gnu"),
-                        "powerpc-unknown-linux-gnuspe" => Some("powerpc-linux-gnuspe"),
-                        "powerpc-unknown-netbsd" => Some("powerpc--netbsd"),
-                        "powerpc64-unknown-linux-gnu" => Some("powerpc-linux-gnu"),
-                        "powerpc64le-unknown-linux-gnu" => Some("powerpc64le-linux-gnu"),
-                        "riscv32i-unknown-none-elf" => Some("riscv32-unknown-elf"),
-                        "riscv32imac-unknown-none-elf" => Some("riscv32-unknown-elf"),
-                        "riscv32imc-unknown-none-elf" => Some("riscv32-unknown-elf"),
-                        "riscv64gc-unknown-none-elf" => Some("riscv64-unknown-elf"),
-                        "riscv64imac-unknown-none-elf" => Some("riscv64-unknown-elf"),
-                        "s390x-unknown-linux-gnu" => Some("s390x-linux-gnu"),
-                        "sparc-unknown-linux-gnu" => Some("sparc-linux-gnu"),
-                        "sparc64-unknown-linux-gnu" => Some("sparc64-linux-gnu"),
-                        "sparc64-unknown-netbsd" => Some("sparc64--netbsd"),
-                        "sparcv9-sun-solaris" => Some("sparcv9-sun-solaris"),
-                        "armebv7r-none-eabi" => Some("arm-none-eabi"),
-                        "armebv7r-none-eabihf" => Some("arm-none-eabi"),
-                        "armv7r-none-eabi" => Some("arm-none-eabi"),
-                        "armv7r-none-eabihf" => Some("arm-none-eabi"),
-                        "thumbv6m-none-eabi" => Some("arm-none-eabi"),
-                        "thumbv7em-none-eabi" => Some("arm-none-eabi"),
-                        "thumbv7em-none-eabihf" => Some("arm-none-eabi"),
-                        "thumbv7m-none-eabi" => Some("arm-none-eabi"),
-                        "thumbv8m.base-none-eabi" => Some("arm-none-eabi"),
-                        "thumbv8m.main-none-eabi" => Some("arm-none-eabi"),
-                        "thumbv8m.main-none-eabihf" => Some("arm-none-eabi"),
-                        "x86_64-pc-windows-gnu" => Some("x86_64-w64-mingw32"),
-                        "x86_64-uwp-windows-gnu" => Some("x86_64-w64-mingw32"),
-                        "x86_64-rumprun-netbsd" => Some("x86_64-rumprun-netbsd"),
-                        "x86_64-unknown-linux-musl" => Some("musl"),
-                        "x86_64-unknown-netbsd" => Some("x86_64--netbsd"),
-                        _ => None,
-                    });
+                    let prefix = self.prefix_for_target(&target);
                     match prefix {
                         Some(prefix) => format!("{}-{}", prefix, gnu),
                         None => default.to_string(),
@@ -2055,7 +2012,12 @@ impl Build {
                 } else {
                     default.to_string()
                 };
-                Tool::new(PathBuf::from(compiler))
+
+                let mut t = Tool::new(PathBuf::from(compiler));
+                if let Some(cc_wrapper) = Self::rustc_wrapper_fallback() {
+                    t.cc_wrapper_path = Some(PathBuf::from(cc_wrapper));
+                }
+                t
             }
         };
 
@@ -2131,6 +2093,24 @@ impl Build {
             .collect()
     }
 
+    /// Returns a fallback `cc_compiler_wrapper` by introspecting `RUSTC_WRAPPER`
+    fn rustc_wrapper_fallback() -> Option<String> {
+        // No explicit CC wrapper was detected, but check if RUSTC_WRAPPER
+        // is defined and is a build accelerator that is compatible with
+        // C/C++ compilers (e.g. sccache)
+        let valid_wrappers = ["sccache"];
+
+        let rustc_wrapper = std::env::var_os("RUSTC_WRAPPER")?;
+        let wrapper_path = Path::new(&rustc_wrapper);
+        let wrapper_stem = wrapper_path.file_stem()?;
+
+        if valid_wrappers.contains(&wrapper_stem.to_str()?) {
+            Some(rustc_wrapper.to_str()?.to_owned())
+        } else {
+            None
+        }
+    }
+
     /// Returns compiler path, optional modifier name from whitelist, and arguments vec
     fn env_tool(&self, name: &str) -> Option<(String, Option<String>, Vec<String>)> {
         let tool = match self.get_var(name) {
@@ -2190,7 +2170,7 @@ impl Build {
 
         Some((
             maybe_wrapper.to_string(),
-            None,
+            Self::rustc_wrapper_fallback(),
             parts.map(|s| s.to_string()).collect(),
         ))
     }
@@ -2234,6 +2214,7 @@ impl Build {
             return Ok((self.cmd(&p), p));
         }
         let target = self.get_target()?;
+        let default_ar = "ar".to_string();
         let program = if target.contains("android") {
             format!("{}-ar", target.replace("armv7", "arm"))
         } else if target.contains("emscripten") {
@@ -2250,12 +2231,159 @@ impl Build {
                 Some(t) => return Ok((t, "lib.exe".to_string())),
                 None => "lib.exe".to_string(),
             }
+        } else if self.get_host()? != target {
+            match self.prefix_for_target(&target) {
+                Some(p) => {
+                    let target_ar = format!("{}-ar", p);
+                    if Command::new(&target_ar).output().is_ok() {
+                        target_ar
+                    } else {
+                        default_ar
+                    }
+                }
+                None => default_ar,
+            }
         } else {
-            "ar".to_string()
+            default_ar
         };
         Ok((self.cmd(&program), program))
     }
 
+    fn prefix_for_target(&self, target: &str) -> Option<String> {
+        // CROSS_COMPILE is of the form: "arm-linux-gnueabi-"
+        let cc_env = self.getenv("CROSS_COMPILE");
+        let cross_compile = cc_env
+            .as_ref()
+            .map(|s| s.trim_right_matches('-').to_owned());
+        cross_compile.or(match &target[..] {
+            "aarch64-unknown-linux-gnu" => Some("aarch64-linux-gnu"),
+            "aarch64-unknown-linux-musl" => Some("aarch64-linux-musl"),
+            "aarch64-unknown-netbsd" => Some("aarch64--netbsd"),
+            "arm-unknown-linux-gnueabi" => Some("arm-linux-gnueabi"),
+            "armv4t-unknown-linux-gnueabi" => Some("arm-linux-gnueabi"),
+            "armv5te-unknown-linux-gnueabi" => Some("arm-linux-gnueabi"),
+            "armv5te-unknown-linux-musleabi" => Some("arm-linux-gnueabi"),
+            "arm-frc-linux-gnueabi" => Some("arm-frc-linux-gnueabi"),
+            "arm-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
+            "arm-unknown-linux-musleabi" => Some("arm-linux-musleabi"),
+            "arm-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
+            "arm-unknown-netbsd-eabi" => Some("arm--netbsdelf-eabi"),
+            "armv6-unknown-netbsd-eabihf" => Some("armv6--netbsdelf-eabihf"),
+            "armv7-unknown-linux-gnueabi" => Some("arm-linux-gnueabi"),
+            "armv7-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
+            "armv7-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
+            "armv7neon-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
+            "armv7neon-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
+            "thumbv7-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
+            "thumbv7-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
+            "thumbv7neon-unknown-linux-gnueabihf" => Some("arm-linux-gnueabihf"),
+            "thumbv7neon-unknown-linux-musleabihf" => Some("arm-linux-musleabihf"),
+            "armv7-unknown-netbsd-eabihf" => Some("armv7--netbsdelf-eabihf"),
+            "hexagon-unknown-linux-musl" => Some("hexagon-linux-musl"),
+            "i586-unknown-linux-musl" => Some("musl"),
+            "i686-pc-windows-gnu" => Some("i686-w64-mingw32"),
+            "i686-uwp-windows-gnu" => Some("i686-w64-mingw32"),
+            "i686-unknown-linux-musl" => Some("musl"),
+            "i686-unknown-netbsd" => Some("i486--netbsdelf"),
+            "mips-unknown-linux-gnu" => Some("mips-linux-gnu"),
+            "mipsel-unknown-linux-gnu" => Some("mipsel-linux-gnu"),
+            "mips64-unknown-linux-gnuabi64" => Some("mips64-linux-gnuabi64"),
+            "mips64el-unknown-linux-gnuabi64" => Some("mips64el-linux-gnuabi64"),
+            "mipsisa32r6-unknown-linux-gnu" => Some("mipsisa32r6-linux-gnu"),
+            "mipsisa32r6el-unknown-linux-gnu" => Some("mipsisa32r6el-linux-gnu"),
+            "mipsisa64r6-unknown-linux-gnuabi64" => Some("mipsisa64r6-linux-gnuabi64"),
+            "mipsisa64r6el-unknown-linux-gnuabi64" => Some("mipsisa64r6el-linux-gnuabi64"),
+            "powerpc-unknown-linux-gnu" => Some("powerpc-linux-gnu"),
+            "powerpc-unknown-linux-gnuspe" => Some("powerpc-linux-gnuspe"),
+            "powerpc-unknown-netbsd" => Some("powerpc--netbsd"),
+            "powerpc64-unknown-linux-gnu" => Some("powerpc-linux-gnu"),
+            "powerpc64le-unknown-linux-gnu" => Some("powerpc64le-linux-gnu"),
+            "riscv32i-unknown-none-elf" => self.find_working_gnu_prefix(&[
+                "riscv32-unknown-elf",
+                "riscv64-unknown-elf",
+                "riscv-none-embed",
+            ]),
+            "riscv32imac-unknown-none-elf" => self.find_working_gnu_prefix(&[
+                "riscv32-unknown-elf",
+                "riscv64-unknown-elf",
+                "riscv-none-embed",
+            ]),
+            "riscv32imc-unknown-none-elf" => self.find_working_gnu_prefix(&[
+                "riscv32-unknown-elf",
+                "riscv64-unknown-elf",
+                "riscv-none-embed",
+            ]),
+            "riscv64gc-unknown-none-elf" => self.find_working_gnu_prefix(&[
+                "riscv64-unknown-elf",
+                "riscv32-unknown-elf",
+                "riscv-none-embed",
+            ]),
+            "riscv64imac-unknown-none-elf" => self.find_working_gnu_prefix(&[
+                "riscv64-unknown-elf",
+                "riscv32-unknown-elf",
+                "riscv-none-embed",
+            ]),
+            "riscv64gc-unknown-linux-gnu" => Some("riscv64-linux-gnu"),
+            "s390x-unknown-linux-gnu" => Some("s390x-linux-gnu"),
+            "sparc-unknown-linux-gnu" => Some("sparc-linux-gnu"),
+            "sparc64-unknown-linux-gnu" => Some("sparc64-linux-gnu"),
+            "sparc64-unknown-netbsd" => Some("sparc64--netbsd"),
+            "sparcv9-sun-solaris" => Some("sparcv9-sun-solaris"),
+            "armv7a-none-eabi" => Some("arm-none-eabi"),
+            "armv7a-none-eabihf" => Some("arm-none-eabi"),
+            "armebv7r-none-eabi" => Some("arm-none-eabi"),
+            "armebv7r-none-eabihf" => Some("arm-none-eabi"),
+            "armv7r-none-eabi" => Some("arm-none-eabi"),
+            "armv7r-none-eabihf" => Some("arm-none-eabi"),
+            "thumbv6m-none-eabi" => Some("arm-none-eabi"),
+            "thumbv7em-none-eabi" => Some("arm-none-eabi"),
+            "thumbv7em-none-eabihf" => Some("arm-none-eabi"),
+            "thumbv7m-none-eabi" => Some("arm-none-eabi"),
+            "thumbv8m.base-none-eabi" => Some("arm-none-eabi"),
+            "thumbv8m.main-none-eabi" => Some("arm-none-eabi"),
+            "thumbv8m.main-none-eabihf" => Some("arm-none-eabi"),
+            "x86_64-pc-windows-gnu" => Some("x86_64-w64-mingw32"),
+            "x86_64-uwp-windows-gnu" => Some("x86_64-w64-mingw32"),
+            "x86_64-rumprun-netbsd" => Some("x86_64-rumprun-netbsd"),
+            "x86_64-unknown-linux-musl" => Some("musl"),
+            "x86_64-unknown-netbsd" => Some("x86_64--netbsd"),
+            _ => None,
+        }
+        .map(|x| x.to_owned()))
+    }
+
+    /// Some platforms have multiple, compatible, canonical prefixes. Look through
+    /// each possible prefix for a compiler that exists and return it. The prefixes
+    /// should be ordered from most-likely to least-likely.
+    fn find_working_gnu_prefix(&self, prefixes: &[&'static str]) -> Option<&'static str> {
+        let suffix = if self.cpp { "-g++" } else { "-gcc" };
+        let extension = std::env::consts::EXE_SUFFIX;
+
+        // Loop through PATH entries searching for each toolchain. This ensures that we
+        // are more likely to discover the toolchain early on, because chances are good
+        // that the desired toolchain is in one of the higher-priority paths.
+        env::var_os("PATH")
+            .as_ref()
+            .and_then(|path_entries| {
+                env::split_paths(path_entries).find_map(|path_entry| {
+                    for prefix in prefixes {
+                        let target_compiler = format!("{}{}{}", prefix, suffix, extension);
+                        if path_entry.join(&target_compiler).exists() {
+                            return Some(prefix);
+                        }
+                    }
+                    None
+                })
+            })
+            .map(|prefix| *prefix)
+            .or_else(||
+            // If no toolchain was found, provide the first toolchain that was passed in.
+            // This toolchain has been shown not to exist, however it will appear in the
+            // error that is shown to the user which should make it easier to search for
+            // where it should be obtained.
+            prefixes.first().map(|prefix| *prefix))
+    }
+
     fn get_target(&self) -> Result<String, Error> {
         match self.target.clone() {
             Some(t) => Ok(t),
@@ -2326,6 +2454,63 @@ impl Build {
             println!("{}", s);
         }
     }
+
+    fn fix_env_for_apple_os(&self, cmd: &mut Command) -> Result<(), Error> {
+        let target = self.get_target()?;
+        let host = self.get_host()?;
+        if host.contains("apple-darwin") && target.contains("apple-darwin") {
+            // If, for example, `cargo` runs during the build of an XCode project, then `SDKROOT` environment variable
+            // would represent the current target, and this is the problem for us, if we want to compile something
+            // for the host, when host != target.
+            // We can not just remove `SDKROOT`, because, again, for example, XCode add to PATH
+            // /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
+            // and `cc` from this path can not find system include files, like `pthread.h`, if `SDKROOT`
+            // is not set
+            if let Ok(sdkroot) = env::var("SDKROOT") {
+                if !sdkroot.contains("MacOSX") {
+                    let macos_sdk = self.apple_sdk_root("macosx")?;
+                    cmd.env("SDKROOT", macos_sdk);
+                }
+            }
+            // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at
+            // "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld",
+            // although this is apparently ignored when using the linker at "/usr/bin/ld".
+            cmd.env_remove("IPHONEOS_DEPLOYMENT_TARGET");
+        }
+        Ok(())
+    }
+
+    fn apple_sdk_root(&self, sdk: &str) -> Result<OsString, Error> {
+        let mut cache = self
+            .apple_sdk_root_cache
+            .lock()
+            .expect("apple_sdk_root_cache lock failed");
+        if let Some(ret) = cache.get(sdk) {
+            return Ok(ret.clone());
+        }
+
+        let sdk_path = self
+            .cmd("xcrun")
+            .arg("--show-sdk-path")
+            .arg("--sdk")
+            .arg(sdk)
+            .stderr(Stdio::inherit())
+            .output()?
+            .stdout;
+
+        let sdk_path = match String::from_utf8(sdk_path) {
+            Ok(p) => p,
+            Err(_) => {
+                return Err(Error::new(
+                    ErrorKind::IOError,
+                    "Unable to determine iOS SDK path.",
+                ));
+            }
+        };
+        let ret: OsString = sdk_path.trim().into();
+        cache.insert(sdk.into(), ret.clone());
+        Ok(ret)
+    }
 }
 
 impl Default for Build {
@@ -2343,6 +2528,21 @@ impl Tool {
         Self::with_features(path, clang_driver, false)
     }
 
+    #[cfg(windows)]
+    /// Explictly set the `ToolFamily`, skipping name-based detection.
+    fn with_family(path: PathBuf, family: ToolFamily) -> Self {
+        Self {
+            path: path,
+            cc_wrapper_path: None,
+            cc_wrapper_args: Vec::new(),
+            args: Vec::new(),
+            env: Vec::new(),
+            family: family,
+            cuda: false,
+            removed_args: Vec::new(),
+        }
+    }
+
     fn with_features(path: PathBuf, clang_driver: Option<&str>, cuda: bool) -> Self {
         // Try to detect family of the tool from its name, falling back to Gnu.
         let family = if let Some(fname) = path.file_name().and_then(|p| p.to_str()) {
@@ -2651,10 +2851,11 @@ fn command_add_output_file(
     dst: &Path,
     cuda: bool,
     msvc: bool,
+    clang: bool,
     is_asm: bool,
     is_arm: bool,
 ) {
-    if msvc && !cuda && !(is_asm && is_arm) {
+    if msvc && !clang && !cuda && !(is_asm && is_arm) {
         let mut s = OsString::from("-Fo");
         s.push(&dst);
         cmd.arg(s);
@@ -2662,3 +2863,98 @@ fn command_add_output_file(
         cmd.arg("-o").arg(&dst);
     }
 }
+
+// Use by default minimum available API level
+// See note about naming here
+// https://android.googlesource.com/platform/ndk/+/refs/heads/ndk-release-r21/docs/BuildSystemMaintainers.md#Clang
+static NEW_STANDALONE_ANDROID_COMPILERS: [&str; 4] = [
+    "aarch64-linux-android21-clang",
+    "armv7a-linux-androideabi16-clang",
+    "i686-linux-android16-clang",
+    "x86_64-linux-android21-clang",
+];
+
+// New "standalone" C/C++ cross-compiler executables from recent Android NDK
+// are just shell scripts that call main clang binary (from Android NDK) with
+// proper `--target` argument.
+//
+// For example, armv7a-linux-androideabi16-clang passes
+// `--target=armv7a-linux-androideabi16` to clang.
+// So to construct proper command line check if
+// `--target` argument would be passed or not to clang
+fn android_clang_compiler_uses_target_arg_internally(clang_path: &Path) -> bool {
+    if let Some(filename) = clang_path.file_name() {
+        if let Some(filename_str) = filename.to_str() {
+            filename_str.contains("android")
+        } else {
+            false
+        }
+    } else {
+        false
+    }
+}
+
+#[test]
+fn test_android_clang_compiler_uses_target_arg_internally() {
+    for version in 16..21 {
+        assert!(android_clang_compiler_uses_target_arg_internally(
+            &PathBuf::from(format!("armv7a-linux-androideabi{}-clang", version))
+        ));
+        assert!(android_clang_compiler_uses_target_arg_internally(
+            &PathBuf::from(format!("armv7a-linux-androideabi{}-clang++", version))
+        ));
+    }
+    assert!(!android_clang_compiler_uses_target_arg_internally(
+        &PathBuf::from("clang")
+    ));
+    assert!(!android_clang_compiler_uses_target_arg_internally(
+        &PathBuf::from("clang++")
+    ));
+}
+
+fn autodetect_android_compiler(target: &str, host: &str, gnu: &str, clang: &str) -> String {
+    let new_clang_key = match target {
+        "aarch64-linux-android" => Some("aarch64"),
+        "armv7-linux-androideabi" => Some("armv7a"),
+        "i686-linux-android" => Some("i686"),
+        "x86_64-linux-android" => Some("x86_64"),
+        _ => None,
+    };
+
+    let new_clang = new_clang_key
+        .map(|key| {
+            NEW_STANDALONE_ANDROID_COMPILERS
+                .iter()
+                .find(|x| x.starts_with(key))
+        })
+        .unwrap_or(None);
+
+    if let Some(new_clang) = new_clang {
+        if Command::new(new_clang).output().is_ok() {
+            return (*new_clang).into();
+        }
+    }
+
+    let target = target
+        .replace("armv7neon", "arm")
+        .replace("armv7", "arm")
+        .replace("thumbv7neon", "arm")
+        .replace("thumbv7", "arm");
+    let gnu_compiler = format!("{}-{}", target, gnu);
+    let clang_compiler = format!("{}-{}", target, clang);
+
+    // On Windows, the Android clang compiler is provided as a `.cmd` file instead
+    // of a `.exe` file. `std::process::Command` won't run `.cmd` files unless the
+    // `.cmd` is explicitly appended to the command name, so we do that here.
+    let clang_compiler_cmd = format!("{}-{}.cmd", target, clang);
+
+    // Check if gnu compiler is present
+    // if not, use clang
+    if Command::new(&gnu_compiler).output().is_ok() {
+        gnu_compiler
+    } else if host.contains("windows") && Command::new(&clang_compiler_cmd).output().is_ok() {
+        clang_compiler_cmd
+    } else {
+        clang_compiler
+    }
+}
diff --git a/third_party/rust/cc/src/windows_registry.rs b/third_party/rust/cc/src/windows_registry.rs
index 5af3ff73b3..81725026b3 100644
--- a/third_party/rust/cc/src/windows_registry.rs
+++ b/third_party/rust/cc/src/windows_registry.rs
@@ -14,6 +14,11 @@
 use std::process::Command;
 
 use crate::Tool;
+#[cfg(windows)]
+use crate::ToolFamily;
+
+#[cfg(windows)]
+const MSVC_FAMILY: ToolFamily = ToolFamily::Msvc { clang_cl: false };
 
 /// Attempts to find a tool within an MSVC installation using the Windows
 /// registry as a point to search from.
@@ -70,7 +75,7 @@ pub fn find_tool(target: &str, tool: &str) -> Option<Tool> {
                     .map(|p| p.join(tool))
                     .find(|p| p.exists())
             })
-            .map(|path| Tool::new(path.into()));
+            .map(|path| Tool::with_family(path.into(), MSVC_FAMILY));
     }
 
     // Ok, if we're here, now comes the fun part of the probing. Default shells
@@ -80,7 +85,7 @@ pub fn find_tool(target: &str, tool: &str) -> Option<Tool> {
     // environment variables like `LIB`, `INCLUDE`, and `PATH` to ensure that
     // the tool is actually usable.
 
-    return impl_::find_msvc_15(tool, target)
+    return impl_::find_msvc_15plus(tool, target)
         .or_else(|| impl_::find_msvc_14(tool, target))
         .or_else(|| impl_::find_msvc_12(tool, target))
         .or_else(|| impl_::find_msvc_11(tool, target));
@@ -173,7 +178,9 @@ mod impl_ {
     use std::iter;
     use std::mem;
     use std::path::{Path, PathBuf};
+    use std::str::FromStr;
 
+    use super::MSVC_FAMILY;
     use crate::Tool;
 
     struct MsvcTool {
@@ -200,7 +207,7 @@ mod impl_ {
                 path,
                 include,
             } = self;
-            let mut tool = Tool::new(tool.into());
+            let mut tool = Tool::with_family(tool.into(), MSVC_FAMILY);
             add_env(&mut tool, "LIB", libs);
             add_env(&mut tool, "PATH", path);
             add_env(&mut tool, "INCLUDE", include);
@@ -210,7 +217,7 @@ mod impl_ {
 
     #[allow(bare_trait_objects)]
     fn vs16_instances() -> Box<Iterator<Item = PathBuf>> {
-        let instances = if let Some(instances) = vs15_instances() {
+        let instances = if let Some(instances) = vs15plus_instances() {
             instances
         } else {
             return Box::new(iter::empty());
@@ -220,6 +227,11 @@ mod impl_ {
             let installation_name = instance.installation_name().ok()?;
             if installation_name.to_str()?.starts_with("VisualStudio/16.") {
                 Some(PathBuf::from(instance.installation_path().ok()?))
+            } else if installation_name
+                .to_str()?
+                .starts_with("VisualStudioPreview/16.")
+            {
+                Some(PathBuf::from(instance.installation_path().ok()?))
             } else {
                 None
             }
@@ -233,7 +245,7 @@ mod impl_ {
                 if !path.is_file() {
                     return None;
                 }
-                let mut tool = Tool::new(path);
+                let mut tool = Tool::with_family(path, MSVC_FAMILY);
                 if target.contains("x86_64") {
                     tool.env.push(("Platform".into(), "X64".into()));
                 }
@@ -253,24 +265,34 @@ mod impl_ {
     // Note that much of this logic can be found [online] wrt paths, COM, etc.
     //
     // [online]: https://blogs.msdn.microsoft.com/vcblog/2017/03/06/finding-the-visual-c-compiler-tools-in-visual-studio-2017/
-    fn vs15_instances() -> Option<EnumSetupInstances> {
+    //
+    // Returns MSVC 15+ instances (15, 16 right now), the order should be consider undefined.
+    fn vs15plus_instances() -> Option<EnumSetupInstances> {
         com::initialize().ok()?;
 
         let config = SetupConfiguration::new().ok()?;
         config.enum_all_instances().ok()
     }
 
-    pub fn find_msvc_15(tool: &str, target: &str) -> Option<Tool> {
-        let iter = vs15_instances()?;
-        for instance in iter {
-            let instance = instance.ok()?;
-            let tool = tool_from_vs15_instance(tool, target, &instance);
-            if tool.is_some() {
-                return tool;
-            }
-        }
+    // Inspired from official microsoft/vswhere ParseVersionString
+    // i.e. at most four u16 numbers separated by '.'
+    fn parse_version(version: &str) -> Option<Vec<u16>> {
+        version
+            .split('.')
+            .map(|chunk| u16::from_str(chunk).ok())
+            .collect()
+    }
 
-        None
+    pub fn find_msvc_15plus(tool: &str, target: &str) -> Option<Tool> {
+        let iter = vs15plus_instances()?;
+        iter.filter_map(|instance| {
+            let instance = instance.ok()?;
+            let version = parse_version(instance.installation_version().ok()?.to_str()?)?;
+            let tool = tool_from_vs15plus_instance(tool, target, &instance)?;
+            Some((version, tool))
+        })
+        .max_by(|(a_version, _), (b_version, _)| a_version.cmp(b_version))
+        .map(|(_version, tool)| tool)
     }
 
     // While the paths to Visual Studio 2017's devenv and MSBuild could
@@ -281,7 +303,7 @@ mod impl_ {
     //
     // [more reliable]: https://github.com/alexcrichton/cc-rs/pull/331
     fn find_tool_in_vs15_path(tool: &str, target: &str) -> Option<Tool> {
-        let mut path = match vs15_instances() {
+        let mut path = match vs15plus_instances() {
             Some(instances) => instances
                 .filter_map(|instance| {
                     instance
@@ -304,7 +326,7 @@ mod impl_ {
         }
 
         path.map(|path| {
-            let mut tool = Tool::new(path);
+            let mut tool = Tool::with_family(path, MSVC_FAMILY);
             if target.contains("x86_64") {
                 tool.env.push(("Platform".into(), "X64".into()));
             }
@@ -312,14 +334,20 @@ mod impl_ {
         })
     }
 
-    fn tool_from_vs15_instance(tool: &str, target: &str, instance: &SetupInstance) -> Option<Tool> {
-        let (bin_path, host_dylib_path, lib_path, include_path) = vs15_vc_paths(target, instance)?;
+    fn tool_from_vs15plus_instance(
+        tool: &str,
+        target: &str,
+        instance: &SetupInstance,
+    ) -> Option<Tool> {
+        let (bin_path, host_dylib_path, lib_path, include_path) =
+            vs15plus_vc_paths(target, instance)?;
         let tool_path = bin_path.join(tool);
         if !tool_path.exists() {
             return None;
         };
 
         let mut tool = MsvcTool::new(tool_path);
+        tool.path.push(bin_path.clone());
         tool.path.push(host_dylib_path);
         tool.libs.push(lib_path);
         tool.include.push(include_path);
@@ -334,7 +362,7 @@ mod impl_ {
         Some(tool.into_tool())
     }
 
-    fn vs15_vc_paths(
+    fn vs15plus_vc_paths(
         target: &str,
         instance: &SetupInstance,
     ) -> Option<(PathBuf, PathBuf, PathBuf, PathBuf)> {
@@ -348,6 +376,9 @@ mod impl_ {
         let host = match host_arch() {
             X86 => "X86",
             X86_64 => "X64",
+            // There is no natively hosted compiler on ARM64.
+            // Instead, use the x86 toolchain under emulation (there is no x64 emulation).
+            AARCH64 => "X86",
             _ => return None,
         };
         let target = lib_subdir(target)?;
@@ -394,8 +425,15 @@ mod impl_ {
         let sub = lib_subdir(target)?;
         let (ucrt, ucrt_version) = get_ucrt_dir()?;
 
+        let host = match host_arch() {
+            X86 => "x86",
+            X86_64 => "x64",
+            AARCH64 => "arm64",
+            _ => return None,
+        };
+
         tool.path
-            .push(ucrt.join("bin").join(&ucrt_version).join(sub));
+            .push(ucrt.join("bin").join(&ucrt_version).join(host));
 
         let ucrt_include = ucrt.join("include").join(&ucrt_version);
         tool.include.push(ucrt_include.join("ucrt"));
@@ -404,7 +442,7 @@ mod impl_ {
         tool.libs.push(ucrt_lib.join("ucrt").join(sub));
 
         if let Some((sdk, version)) = get_sdk10_dir() {
-            tool.path.push(sdk.join("bin").join(sub));
+            tool.path.push(sdk.join("bin").join(host));
             let sdk_lib = sdk.join("lib").join(&version);
             tool.libs.push(sdk_lib.join("um").join(sub));
             let sdk_include = sdk.join("include").join(&version);
@@ -413,7 +451,7 @@ mod impl_ {
             tool.include.push(sdk_include.join("winrt"));
             tool.include.push(sdk_include.join("shared"));
         } else if let Some(sdk) = get_sdk81_dir() {
-            tool.path.push(sdk.join("bin").join(sub));
+            tool.path.push(sdk.join("bin").join(host));
             let sdk_lib = sdk.join("lib").join("winv6.3");
             tool.libs.push(sdk_lib.join("um").join(sub));
             let sdk_include = sdk.join("include");
@@ -580,8 +618,10 @@ mod impl_ {
 
     const PROCESSOR_ARCHITECTURE_INTEL: u16 = 0;
     const PROCESSOR_ARCHITECTURE_AMD64: u16 = 9;
+    const PROCESSOR_ARCHITECTURE_ARM64: u16 = 12;
     const X86: u16 = PROCESSOR_ARCHITECTURE_INTEL;
     const X86_64: u16 = PROCESSOR_ARCHITECTURE_AMD64;
+    const AARCH64: u16 = PROCESSOR_ARCHITECTURE_ARM64;
 
     // When choosing the tool to use, we have to choose the one which matches
     // the target architecture. Otherwise we end up in situations where someone
@@ -744,7 +784,7 @@ mod impl_ {
             .map(|path| {
                 let mut path = PathBuf::from(path);
                 path.push("MSBuild.exe");
-                let mut tool = Tool::new(path);
+                let mut tool = Tool::with_family(path, MSVC_FAMILY);
                 if target.contains("x86_64") {
                     tool.env.push(("Platform".into(), "X64".into()));
                 }
diff --git a/third_party/rust/cc/tests/support/mod.rs b/third_party/rust/cc/tests/support/mod.rs
index 7d74719c9f..cde930e90b 100644
--- a/third_party/rust/cc/tests/support/mod.rs
+++ b/third_party/rust/cc/tests/support/mod.rs
@@ -8,7 +8,7 @@ use std::io::prelude::*;
 use std::path::{Path, PathBuf};
 
 use cc;
-use tempdir::TempDir;
+use tempfile::{Builder, TempDir};
 
 pub struct Test {
     pub td: TempDir,
@@ -22,12 +22,24 @@ pub struct Execution {
 
 impl Test {
     pub fn new() -> Test {
+        // This is ugly: `sccache` needs to introspect the compiler it is
+        // executing, as it adjusts its behavior depending on the
+        // language/compiler. This crate's test driver uses mock compilers that
+        // are obviously not supported by sccache, so the tests fail if
+        // RUSTC_WRAPPER is set. rust doesn't build test dependencies with
+        // the `test` feature enabled, so we can't conditionally disable the
+        // usage of `sccache` if running in a test environment, at least not
+        // without setting an environment variable here and testing for it
+        // there. Explicitly deasserting RUSTC_WRAPPER here seems to be the
+        // lesser of the two evils.
+        env::remove_var("RUSTC_WRAPPER");
+
         let mut gcc = PathBuf::from(env::current_exe().unwrap());
         gcc.pop();
         if gcc.ends_with("deps") {
             gcc.pop();
         }
-        let td = TempDir::new_in(&gcc, "gcc-test").unwrap();
+        let td = Builder::new().prefix("gcc-test").tempdir_in(&gcc).unwrap();
         gcc.push(format!("gcc-shim{}", env::consts::EXE_SUFFIX));
         Test {
             td: td,
diff --git a/third_party/rust/cc/tests/test.rs b/third_party/rust/cc/tests/test.rs
index def11f0259..3c9b4dc498 100644
--- a/third_party/rust/cc/tests/test.rs
+++ b/third_party/rust/cc/tests/test.rs
@@ -2,8 +2,18 @@ use crate::support::Test;
 
 mod support;
 
+// Some tests check that a flag is *not* present.  These tests might fail if the flag is set in the
+// CFLAGS or CXXFLAGS environment variables.  This function clears the CFLAGS and CXXFLAGS
+// variables to make sure that the tests can run correctly.
+fn reset_env() {
+    std::env::set_var("CFLAGS", "");
+    std::env::set_var("CXXFLAGS", "");
+}
+
 #[test]
 fn gnu_smoke() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc().file("foo.c").compile("foo");
 
@@ -19,6 +29,8 @@ fn gnu_smoke() {
 
 #[test]
 fn gnu_opt_level_1() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc().opt_level(1).file("foo.c").compile("foo");
 
@@ -27,6 +39,8 @@ fn gnu_opt_level_1() {
 
 #[test]
 fn gnu_opt_level_s() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc().opt_level_str("s").file("foo.c").compile("foo");
 
@@ -56,6 +70,8 @@ fn gnu_debug_fp() {
 
 #[test]
 fn gnu_debug_nofp() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc()
         .debug(true)
@@ -100,6 +116,8 @@ fn gnu_warnings() {
 
 #[test]
 fn gnu_extra_warnings0() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc()
         .warnings(true)
@@ -113,6 +131,8 @@ fn gnu_extra_warnings0() {
 
 #[test]
 fn gnu_extra_warnings1() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc()
         .warnings(false)
@@ -126,6 +146,8 @@ fn gnu_extra_warnings1() {
 
 #[test]
 fn gnu_warnings_overridable() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc()
         .warnings(true)
@@ -154,6 +176,8 @@ fn gnu_x86_64() {
 
 #[test]
 fn gnu_x86_64_no_pic() {
+    reset_env();
+
     for vendor in &["unknown-linux-gnu", "apple-darwin"] {
         let target = format!("x86_64-{}", vendor);
         let test = Test::gnu();
@@ -215,6 +239,8 @@ fn gnu_x86_64_no_plt() {
 
 #[test]
 fn gnu_set_stdlib() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc()
         .cpp_set_stdlib(Some("foo"))
@@ -253,6 +279,8 @@ fn gnu_compile_assembly() {
 
 #[test]
 fn gnu_shared() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc()
         .file("foo.c")
@@ -265,6 +293,8 @@ fn gnu_shared() {
 
 #[test]
 fn gnu_flag_if_supported() {
+    reset_env();
+
     if cfg!(windows) {
         return;
     }
@@ -301,6 +331,8 @@ fn gnu_flag_if_supported_cpp() {
 
 #[test]
 fn gnu_static() {
+    reset_env();
+
     let test = Test::gnu();
     test.gcc()
         .file("foo.c")
@@ -313,6 +345,8 @@ fn gnu_static() {
 
 #[test]
 fn msvc_smoke() {
+    reset_env();
+
     let test = Test::msvc();
     test.gcc().file("foo.c").compile("foo");
 
@@ -327,6 +361,8 @@ fn msvc_smoke() {
 
 #[test]
 fn msvc_opt_level_0() {
+    reset_env();
+
     let test = Test::msvc();
     test.gcc().opt_level(0).file("foo.c").compile("foo");
 
-- 
2.31.1

From ab258afb3fbb4a88cfaf625e75c73cc4c1035ca2 Mon Sep 17 00:00:00 2001
From: Thomas Deutschmann <whissi@gentoo.org>
Date: Tue, 1 Jun 2021 09:35:57 +0200
Subject: [PATCH 44/44] bmo#1712947: Don't pass neon flags to rustc when using
 thumbv7neon targets

Bug: https://bugs.gentoo.org/792621
Signed-off-by: Thomas Deutschmann <whissi@gentoo.org>
---
 config/makefiles/rust.mk | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/config/makefiles/rust.mk b/config/makefiles/rust.mk
index c952dbc008..b989985726 100644
--- a/config/makefiles/rust.mk
+++ b/config/makefiles/rust.mk
@@ -79,10 +79,13 @@ endif
 
 rustflags_neon =
 ifeq (neon,$(MOZ_FPU))
-# Enable neon and disable restriction to 16 FPU registers
+ifneq (,$(filter thumbv7neon-,$(RUST_TARGET)))
+# Enable neon and disable restriction to 16 FPU registers when neon is enabled
+# but we're not using a thumbv7neon target, where it's already the default.
 # (CPUs with neon have 32 FPU registers available)
 rustflags_neon += -C target_feature=+neon,-d16
 endif
+endif
 
 rustflags_sancov =
 ifdef FUZZING_INTERFACES
-- 
2.31.1

