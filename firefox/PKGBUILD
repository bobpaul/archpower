# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Ionut Biru <ibiru@archlinux.org>
# Contributor: Jakub Schmidtke <sjakub@gmail.com>

pkgname=firefox
pkgver=130.0.1
pkgrel=1
pkgdesc="Standalone web browser from mozilla.org"
arch=(x86_64 powerpc64le powerpc64 riscv64)
url="https://www.mozilla.org/firefox/"
license=(
  GPL
  LGPL
  MPL
)
depends=(
  dbus
  ffmpeg
  gtk3
  libpulse
  libxss
  libxt
  mime-types
  nss
  ttf-font
)
makedepends=(
  cbindgen
  clang
  diffutils
  imake
  inetutils
  jack
  llvm
  mesa
  nasm
  nodejs-lts-iron
  python
  rust
  unzip
  wasi-compiler-rt
  wasi-libc
  wasi-libc++
  wasi-libc++abi
  xorg-server-xvfb
  zip
)
optdepends=(
  'hunspell-en_US: Spell checking, American English'
  'libnotify: Notification integration'
  'networkmanager: Location detection via available WiFi networks'
  'pulseaudio: Audio support'
  'speech-dispatcher: Text-to-Speech'
  'xdg-desktop-portal: Screensharing with Wayland'
)
makedepends_powerpc64=(lld)
makedepends_powerpc64le=(lld)
makedepends_x86_64=(lld yasm)
options=(
  !ccache
  !debug
  !emptydirs
  !lto
  !makeflags
)
source=(https://archive.mozilla.org/pub/firefox/releases/$pkgver/source/firefox-$pkgver.source.tar.xz{,.asc}
        $pkgname.desktop
        identity-icons-brand.svg
0001-LTO-Only-enable-LTO-for-Rust-when-complete-build-use.patch
0002-bmo-1196777-Set-GDK_FOCUS_CHANGE_MASK.patch
0003-enable-vaapi-on-all-amd-cards.patch
0004-big-endian-image-decoders.patch
0005-build-Disable-Werror.patch
0006-hotfix-ppc-not-power8.patch
0007-musl-Set-pthread-name-for-non-glibc-systems.patch
0008-musl-sys-auvx.h-avaliable-on-more-then-just-glibc-sy.patch
0009-musl-make-SYS_fork-non-fatal-musl-uses-it-for-fork-2.patch
0010-Fortify-sources-properly.patch
0011-bmo-847568-Support-system-harfbuzz.patch
0012-bgo-816975-fix-build-on-x86.patch
0013-bmo-847568-Support-system-graphite2.patch
0014-bmo-1754469-memory_mozalloc_throw.patch
0015-bmo-1516803-gcc-lto-sandbox.patch
0016-musl-Add-alternate-name-for-private-siginfo-struct-m.patch
#0017-bgo-907963-rustflags-single-string.patch
0018-bgo-910309-dont-link-widevineplugin-to-libgcc_s.patch
0019-musl-Fix-syscall-wrappers.patch
#0020-bmo-1862601-system-icu-74.patch
0021-bgo-748849-RUST_TARGET_override.patch
0022-bmo-1559213-Support-system-av1.patch
0023-bmo-1874059-fix-libcxx-18.patch
0024-dont-use-build-id.patch
0025-mozilla-bundled-ffmpeg-7-gcc-14-incompatible-pointer-types.patch
#0026-bmo-1898476-nvidia-wayland-egl-sync.patch
0027-bgo-925101-force-software-rendering-during-pgo-build.patch
0028-musl-Only-use-system-heap-reporter-with-glibc.patch
firefox-pgo.patch)
b2sums=('2d6496a4f476a5a276b70de43f5d58ce2a44007b754e05fcf757d4c1a1cdfcab910493f48e6a6e608b9719ab73cf56c066de56a4abc08ca42e83aa76f4f80c38'
        'SKIP'
        '51d7eb22cb568f0437ece2433091d8b54012324edd2fe52ec52cc00f1ad0d4bd84a4d549d78b4d77bbd6ae1c1e7d029d9d4dbff61c60f714362ef791f09fba8b'
        '63a8dd9d8910f9efb353bed452d8b4b2a2da435857ccee083fc0c557f8c4c1339ca593b463db320f70387a1b63f1a79e709e9d12c69520993e26d85a3d742e34'
        '6dc2566cb910a35ecc943d56aac5b0a863681513e4e3f6b95e5c718fe13e6b4e6d6b8e3efa786e9647e71aee71190c284b2911f0753c01680090642562fbc86d'
        'ebfaf3caa444cf21c6cc49e53682a686916addf11e5e12ebf3c4efff8236cce8f135e05321eff1a45d6d1f03cd548b5d75dfa6fe00a09e7a0a00e2294ffa001f'
        'f565ea3fb687f19a0660429cd9b9f9280a9a0c28407c4c70544a3d0e74dcf05b158facd1e7b9e16635f623bf08876e495e4ce398b26f7ffc5c20c1f6c18a4702'
        '5cbf300eb5706ccdc891c02076dc2607b12e218ba88963fde8fe1c3ae6ac2ea090d56b46cff4b4b4b02a8a3dbe6873c60f79088474f31db5f82189800eaeceaa'
        'e4b6afe78e298b76cf5c8d618cb15a1de43cfc790d2f4c7be0a597019f2a182bd70843b2e23d99d5e382a2bc2cc38fcf7cd0735b16dd32146eaf73d680560eab'
        '58e171381691559846838dd13ec6502e0a7c04d3aa20b8c024b1bb582e6db6ea03dbe819f629e51d2ff0185699ae99cecf3d688b6d40f7e196f19fd564c1e59d'
        'fb3cf661e39ece0e620c9e548b258bd47ff620fbf3cb5f4e6b3d238a3c85300bf2923fc77c895237f8ecf288856c74e001e273f129d94932f70f6eadf38895db'
        '7bd93fe1fbb09474edc19f70af2a1dc2c74b6f359b24de7632df858262fc744917b1e9763425a952e617e7586aecc7b3b5fc4b60346da4216cbe011aef7f7f50'
        '116cccbd88615da1692bd87cb69927716f6807c60020c430e588e867b3790ed461645b06a0a3e633af54750357980d68d7d9d9cb15436234cc4efcffad1d7fbb'
        'ad2ab01b250099da792f03208d8aa10b57d139252392ecf8a6c603141716b46d7744023e6bb1de63c8d64346de12646d50d546acaa7367e83a03e4e76a80606c'
        'e0e0970052d84c17696c882adc6d69874579612129115e6a908d33cfe44b0995b827218a3d4b990870cfb071f8daeb30cafb61662fac03a87f818f44dc33722f'
        'fede1c6522551ce861bb32e88a0aa1cf46b3a91aeb744ccf436865209119bb128360b9527944bbe494cf60dcc034ce63f851516baefc636ddd437a3d2da0ce13'
        '208f6cb88ff0f2d91c53e0f88f609b362d408c8f78781b0f0589abf0cec31e87ebf834468f99762d8b9561476081940fc091a7f7c31f3c81ca436c24b16ab527'
        '299488ab8b306ba12a0fc0db448327a6730d64d8ce24e6ce722e0e514de0a346f512ac62c5dd059177643ff435bfbcfc93f4ea062fcbe49cbb811679c36e8f72'
        '5005189c0f725c194c3100a764e384d9d9fb89d063edb9549dd7755cce7f8a919888dc22b65857756712589253b5d91e6cb7d9ea5def460ae7973298dc413d19'
        '8db41acb5cf8f46921a1482cd3a7142b2f88a09ebf54fcb93dfc225972e638786fb48bf11b5e4b61503ee8615a75bd9f6103cf31c6b43d05031f6f0e4e9e88a0'
        '827beddafbcea1f42787e56591d94f7b605a2439b30553fe2d4d258499bb165b9d534145620ded11a9279a09735a8fcc303b46258123e4760d7a5bff89ece3c3'
        '8de8369b9658477626923054a5fcdafa4233d11a6da391cb36d9d5a0234b275fab9c57c4e72998aff515b41914fe547b99424b9dbfd34bfe833426ebc353211e'
        '8e9e8724a79f7f4628d737b3b550ab605664c3db52168121d3193b03568290e6516661ff6063a3f05e3cd63efc744cbc8964b0003540372af83180101ac5c252'
        'ca6dc0c133a8b4ada8ff7678b0f1eab980a1e66ebdd68b12d14d2f15c01a70628907e62263f11fbf44a7e6e15e5d1fb75134b08839ec858ace6bd00cb822b27c'
        '76bcaaf9910d50d2d03600737c4d0e5c02642e9965576421dbb3d2eff728eeda513e34c0d02c1be12bab880fc613a2e93da5149b867e825f7592f54efe30c5f5'
        '9e2c7939aaf316b8acbc3706bd52195691d1ac8e72807376deebdc5d4a30733c439f0ec39cf8b9017dfeb9d297fdcbe0846297d160c9285c6a04e505ade4c25d'
        'a5104a4944aecbca7413f8ca024785f1e22fced0adb28a5fbb8693cdb6ff7398b7011a145d59aed51e90aed3285307f6efca382185c3c5e0590992f15b1464e7'
        '272d6a0182c005b5598c8fe0b90c1b8e6a923a6b6da5a22c7fafead9cda7ee8c1257a45ed0d9a3946e580e056516a6079c87fc31d6a269be23572be39c3a4ee4'
        '08b01926bc3fc6d722396a935e2ecc8a47f7589bf150eac25674fad7adbc24474e75d76502b2c1bc465f4c5bae93f5eb505bcb05744f0b4a6ed8416e8d5c2c72'
        '31dfc620b032b9315c2f6eb876d4b9a418eb9e6e89a212b1b847cfd96f13160f1d170ba7752c7a8caa3835e83232e86e4df923fd80e536c0f93d9f8c7387d8fe')
validpgpkeys=(
  # Mozilla Software Releases <release@mozilla.com>
  # https://blog.mozilla.org/security/2023/05/11/updated-gpg-key-for-signing-firefox-releases/
  14F26682D0916CDD81E37B6D61B7B526D98F0353
)

# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
# Note: These are for Arch POWER use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact alex.bldck@gmail.com for
# more information.
_google_api_key=AIzaSyDgkw4O3LM0Jnr2N7Wq2NG7iUVzRU5sBaA

# Mozilla API keys (see https://location.services.mozilla.com/api)
# Note: These are for Arch Linux POWER use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact alex.bldck@gmail.com for
# more information.
_mozilla_api_key=de0473f2-d53f-46da-956c-6aff61bda3ab

prepare() {
  mkdir -p mozbuild
  cd ${srcdir}/firefox-$pkgver

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    src="${src%.zst}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  case "${CARCH}" in
    powerpc64*)
    ;;
    *)
      patch -R -Np1 -i ${srcdir}/0006-hotfix-ppc-not-power8.patch
      patch -R -Np1 -i ${srcdir}/firefox-pgo.patch
    ;;
  esac

  sed -i 's/\("files":{\)[^}]*/\1/' third_party/rust/num-traits/.cargo-checksum.json

  echo -n "$_google_api_key" >$srcdir/google-api-key
  echo -n "$_mozilla_api_key" >$srcdir/mozilla-api-key

  cat >${srcdir}/mozconfig <<END
ac_add_options --enable-application=browser

ac_add_options --prefix=/usr
ac_add_options --enable-optimize
ac_add_options --enable-hardening
ac_add_options --enable-jemalloc
ac_add_options --enable-linker=bfd
export LDFLAGS="${LDFLAGS} -Wl,-rpath=/usr/lib/firefox"
mk_add_options MOZ_MAKE_FLAGS="${MAKEFLAGS}"

# Branding
ac_add_options --enable-official-branding
ac_add_options --enable-update-channel=release
ac_add_options --with-distribution-id=org.archlinuxpower
ac_add_options --with-unsigned-addon-scopes=app,system
export MOZ_APP_REMOTINGNAME=${pkgname//-/}
export MOZ_TELEMETRY_REPORTING=1
export MOZ_REQUIRE_SIGNING=1

# Keys
ac_add_options --with-google-location-service-api-keyfile=${srcdir}/google-api-key
ac_add_options --with-google-safebrowsing-api-keyfile=${srcdir}/google-api-key
ac_add_options --with-mozilla-api-keyfile=${srcdir}/mozilla-api-key

ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --enable-system-pixman

# Features
ac_add_options --enable-alsa
ac_add_options --enable-jack
ac_add_options --disable-crashreporter
ac_add_options --disable-updater
ac_add_options --disable-tests
END

  case "${CARCH}" in
    powerpc)
      echo "export LDFLAGS='${LDFLAGS} -Wl,-z,stack-size=1048576 -latomic -Wl,--no-keep-memory'" >> ${srcdir}/mozconfig 
      echo "export CXXFLAGS='${CXXFLAGS} -latomic -Wno-class-memaccess'" >> ${srcdir}/mozconfig
      # patch the rust debug level, this is hardcoded
      sed -i "s/debug_info = '2'/debug_info = '1'/" \
        build/moz.configure/toolchain.configure
    ;;
    powerpc64)
      echo "export LDFLAGS='${LDFLAGS} -Wl,-z,stack-size=1048576 -Wl,--no-keep-memory'" >> ${srcdir}/mozconfig 
      echo "ac_add_options --disable-webrtc" >> ${srcdir}/mozconfig
      echo "ac_add_options --enable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --disable-debug" >> ${srcdir}/mozconfig
      echo "ac_add_options --disable-jit" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
    ;;
    riscv64)
      echo "export LDFLAGS='${LDFLAGS} -Wl,-z,stack-size=1048576 -Wl,--no-keep-memory'" >> ${srcdir}/mozconfig 
      echo "ac_add_options --enable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --disable-debug" >> ${srcdir}/mozconfig
      echo "ac_add_options --disable-jit" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
      rm -fv ${srcdir}/firefox-${pkgver}/.cargo/config
    ;;
    *)
      echo "ac_add_options --enable-rust-simd" >> ${srcdir}/mozconfig
      echo "export RUSTC_OPT_LEVEL=2" >> ${srcdir}/mozconfig
      echo "ac_add_options --enable-lto=full" >> ${srcdir}/mozconfig
      echo "ac_add_options MOZ_PGO=1" >> ${srcdir}/mozconfig
    ;;
  esac

  case "${CARCH}" in
    x86_64)
      echo "ac_add_options --with-wasi-sysroot=/usr/share/wasi-sysroot" >> ${srcdir}/mozconfig
      echo "ac_add_options --enable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
      echo "export MOZILLA_OFFICIAL=1" >> ${srcdir}/mozconfig
      echo "export MOZ_TELEMETRY_REPORTING=1" >> ${srcdir}/mozconfig
      echo "export MOZ_REQUIRE_SIGNING=1" >> ${srcdir}/mozconfig
    ;;
    *)
      echo "ac_add_options --enable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
      echo "export MOZILLA_OFFICIAL=1" >> ${srcdir}/mozconfig
      echo "export MOZ_TELEMETRY_REPORTING=1" >> ${srcdir}/mozconfig
      echo "export MOZ_REQUIRE_SIGNING=1" >> ${srcdir}/mozconfig
    ;;
  esac

  mkdir ${srcdir}/.tmp
}

build() {
  cd firefox-$pkgver

  case "${CARCH}" in
    powerpc64*|riscv64)
      export CC=${CHOST}-gcc
      export CXX=${CHOST}-g++
      export CFLAGS="${CFLAGS/ -fexceptions/}"
      export CXXFLAGS="${CXXFLAGS/ -fexceptions/}"
      ;;
    *)
      export CC=clang
      export CXX=clang++
      ;;
  esac

  export TMPDIR=${srcdir}/.tmp

  export MOZCONFIG="$srcdir/mozconfig"
  export MOZ_NOSPAM=1
  export MOZBUILD_STATE_PATH="$srcdir/mozbuild"
  export MOZ_APP_REMOTINGNAME=${pkgname//-/}
  export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=pip

  # LTO needs more open files
  ulimit -n 4096

  rm -f old-configure
  case "${CARCH}" in
    riscv64) ./mach build ;;
    *)
      xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
      ./mach build
    ;;
  esac

  #echo "Building symbol archive..."
  #xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
  #./mach buildsymbols
}

package() {
  cd ${srcdir}/firefox-${pkgver}
  DESTDIR="$pkgdir" ./mach install || true

  local vendorjs="$pkgdir/usr/lib/$pkgname/browser/defaults/preferences/vendor.js"
  install -Dvm644 /dev/stdin "$vendorjs" <<END
// Use LANG environment variable to choose locale
pref("intl.locale.requested", "");

// Use system-provided dictionaries
pref("spellchecker.dictionary_path", "/usr/share/hunspell");

// Disable default browser checking.
pref("browser.shell.checkDefaultBrowser", false);

// Don't disable extensions in the application directory
pref("extensions.autoDisableScopes", 11);
END

  local distini="$pkgdir/usr/lib/$pkgname/distribution/distribution.ini"
  install -Dvm644 /dev/stdin "$distini" <<END
[Global]
id=archlinuxpower
version=1.0
about=Mozilla Firefox for Arch POWER 

[Preferences]
app.distributor=archlinuxpower
app.distributor.channel=$pkgname
app.partner.archlinuxpower=archlinuxpower
END

  install -Dvm644 ../$pkgname.desktop \
    "$pkgdir/usr/share/applications/$pkgname.desktop"

  local i theme=official
  for i in 16 22 24 32 48 64 128 256; do
    install -Dvm644 browser/branding/$theme/default$i.png \
      "$pkgdir/usr/share/icons/hicolor/${i}x${i}/apps/$pkgname.png"
  done
  install -Dvm644 browser/branding/$theme/content/about-logo.png \
    "$pkgdir/usr/share/icons/hicolor/192x192/apps/$pkgname.png"
  install -Dvm644 browser/branding/$theme/content/about-logo@2x.png \
    "$pkgdir/usr/share/icons/hicolor/384x384/apps/$pkgname.png"
  install -Dvm644 browser/branding/$theme/content/about-logo.svg \
    "$pkgdir/usr/share/icons/hicolor/scalable/apps/$pkgname.svg"
  install -Dvm644 ${srcdir}/identity-icons-brand.svg \
    "$pkgdir/usr/share/icons/hicolor/symbolic/apps/$pkgname-symbolic.svg"

  install -Dvm644 ${srcdir}/$pkgname.desktop \
    "$pkgdir/usr/share/applications/$pkgname.desktop"

  # Install a wrapper to avoid confusion about binary path
  install -Dvm755 /dev/stdin "$pkgdir/usr/bin/$pkgname" <<END
#!/bin/sh
exec /usr/lib/$pkgname/firefox "\$@"
END

  # Replace duplicate binary with wrapper
  # https://bugzilla.mozilla.org/show_bug.cgi?id=658850
  ln -srfv "$pkgdir/usr/bin/$pkgname" "$pkgdir/usr/lib/$pkgname/firefox-bin"

  # Use system certificates
  local nssckbi="$pkgdir/usr/lib/$pkgname/libnssckbi.so"
  if [[ -e $nssckbi ]]; then
    ln -srfv "$pkgdir/usr/lib/libnssckbi.so" "$nssckbi"
  fi

  #if [[ -f "$startdir/.crash-stats-api.token" ]]; then
  #  find . -name '*crashreporter-symbols-full.zip' -exec \
  #    "$startdir/upload-symbol-archive" "$startdir/.crash-stats-api.token" {} +
  #else
  #  find . -name '*crashreporter-symbols-full.zip' -exec \
  #    cp -fvt "$startdir" {} +
  #fi
}

# vim:set sw=2 sts=-1 et:
