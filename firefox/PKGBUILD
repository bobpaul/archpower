# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Ionut Biru <ibiru@archlinux.org>
# Contributor: Jakub Schmidtke <sjakub@gmail.com>

pkgname=firefox
pkgver=119.0
pkgrel=2
pkgdesc="Standalone web browser from mozilla.org"
arch=(x86_64 powerpc64le powerpc64 riscv64)
url="https://www.mozilla.org/firefox/"
license=(
  GPL
  LGPL
  MPL
)
depends=(
  dbus-glib
  ffmpeg
  gtk3
  libpulse
  libxss
  libxt
  mime-types
  nss
  ttf-font
)
makedepends=(
  cbindgen
  clang
  diffutils
  imake
  inetutils
  jack
  llvm
  mesa
  nasm
  nodejs
  python
  rust
  unzip
  wasi-compiler-rt
  wasi-libc
  wasi-libc++
  wasi-libc++abi
  xorg-server-xvfb
  zip
)
optdepends=(
  'hunspell-en_US: Spell checking, American English'
  'libnotify: Notification integration'
  'networkmanager: Location detection via available WiFi networks'
  'pulseaudio: Audio support'
  'speech-dispatcher: Text-to-Speech'
  'xdg-desktop-portal: Screensharing with Wayland'
)
makedepends_powerpc64=(lld)
makedepends_powerpc64le=(lld)
makedepends_x86_64=(lld yasm)
options=(
  !debug
  !emptydirs
  !lto
  !makeflags
  !strip
)
source=(https://archive.mozilla.org/pub/firefox/releases/$pkgver/source/firefox-$pkgver.source.tar.xz{,.asc}
        $pkgname.desktop
        identity-icons-brand.svg
        firefox-pgo.patch
        firefox-webrtc-p9.patch
        0001-LTO-Only-enable-LTO-for-Rust-when-complete-build-use.patch
        0002-bmo-1196777-Set-GDK_FOCUS_CHANGE_MASK.patch
        0003-enable-vaapi-on-all-amd-cards.patch
        0004-big-endian-image-decoders.patch)
b2sums=('4fc9852839a65b05c0861eea1d3c99aa9ef8eef02ba02dab15720d0da62b219f0fc2c4bdda1741dcf0eed316b88f032580c7cf433c4d09170b5c8e19e8ad4e1d'
        'SKIP'
        '51d7eb22cb568f0437ece2433091d8b54012324edd2fe52ec52cc00f1ad0d4bd84a4d549d78b4d77bbd6ae1c1e7d029d9d4dbff61c60f714362ef791f09fba8b'
        '63a8dd9d8910f9efb353bed452d8b4b2a2da435857ccee083fc0c557f8c4c1339ca593b463db320f70387a1b63f1a79e709e9d12c69520993e26d85a3d742e34'
        '1fd30afba7b8fedec4399ee2d617cf13844cff60512f045c5352146501e13086d7af7c0a419d6b74a113519b6fa923be1e4a43a0f461b99de204ad3011d46d92'
        '84d2a1c014ee9c4ad02d8d855ac906b5e3747044de831a14637c47f741f0000d620adb23c151f6c457a66ddf2ebef349a8c9268d1abd55cb48f4efa80a8378db'
        '6dc2566cb910a35ecc943d56aac5b0a863681513e4e3f6b95e5c718fe13e6b4e6d6b8e3efa786e9647e71aee71190c284b2911f0753c01680090642562fbc86d'
        'ebfaf3caa444cf21c6cc49e53682a686916addf11e5e12ebf3c4efff8236cce8f135e05321eff1a45d6d1f03cd548b5d75dfa6fe00a09e7a0a00e2294ffa001f'
        'f565ea3fb687f19a0660429cd9b9f9280a9a0c28407c4c70544a3d0e74dcf05b158facd1e7b9e16635f623bf08876e495e4ce398b26f7ffc5c20c1f6c18a4702'
        'da4b0953f705a82a228c2bb05d9aa82c2263d5176c40012895fd3e6ff9c1110fb595158521f3ddaa0ead6c6dfa098e2384e810aa90af8a7270163d232ad38cb6')
validpgpkeys=('14F26682D0916CDD81E37B6D61B7B526D98F0353') # Mozilla Software Releases <release@mozilla.com>

# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
# Note: These are for Arch POWER use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact alex.bldck@gmail.com for
# more information.
_google_api_key=AIzaSyDgkw4O3LM0Jnr2N7Wq2NG7iUVzRU5sBaA

# Mozilla API keys (see https://location.services.mozilla.com/api)
# Note: These are for Arch Linux POWER use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact alex.bldck@gmail.com for
# more information.
_mozilla_api_key=de0473f2-d53f-46da-956c-6aff61bda3ab

prepare() {
  mkdir -p mozbuild
  cd ${srcdir}/firefox-$pkgver

  patch -Np1 -i ${srcdir}/0001-LTO-Only-enable-LTO-for-Rust-when-complete-build-use.patch
  patch -Np1 -i ${srcdir}/0002-bmo-1196777-Set-GDK_FOCUS_CHANGE_MASK.patch
  patch -Np1 -i ${srcdir}/0003-enable-vaapi-on-all-amd-cards.patch
  patch -Np0 -i ${srcdir}/0004-big-endian-image-decoders.patch
  patch -Np1 -i ${srcdir}/firefox-pgo.patch
  patch -Np1 -i ${srcdir}/firefox-webrtc-p9.patch

  sed -i 's/\("files":{\)[^}]*/\1/' third_party/rust/num-traits/.cargo-checksum.json

  echo -n "$_google_api_key" >$srcdir/google-api-key
  echo -n "$_mozilla_api_key" >$srcdir/mozilla-api-key

  cat >${srcdir}/mozconfig <<END
ac_add_options --enable-application=browser

ac_add_options --prefix=/usr
ac_add_options --enable-optimize
ac_add_options --enable-hardening
ac_add_options --enable-jemalloc
ac_add_options --enable-linker=bfd
export LDFLAGS="${LDFLAGS} -Wl,-rpath=/usr/lib/firefox"
mk_add_options MOZ_MAKE_FLAGS="${MAKEFLAGS}"

# Branding
ac_add_options --enable-official-branding
ac_add_options --enable-update-channel=release
ac_add_options --with-distribution-id=org.archlinuxpower
ac_add_options --with-unsigned-addon-scopes=app,system
export MOZ_APP_REMOTINGNAME=${pkgname//-/}
export MOZ_TELEMETRY_REPORTING=1
export MOZ_REQUIRE_SIGNING=1

# Keys
ac_add_options --with-google-location-service-api-keyfile=${srcdir}/google-api-key
ac_add_options --with-google-safebrowsing-api-keyfile=${srcdir}/google-api-key
ac_add_options --with-mozilla-api-keyfile=${srcdir}/mozilla-api-key

ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --enable-system-pixman

# Features
ac_add_options --enable-alsa
ac_add_options --enable-jack
ac_add_options --disable-crashreporter
ac_add_options --disable-updater
ac_add_options --disable-tests
END

  case "${CARCH}" in
    powerpc)
      echo "export LDFLAGS='${LDFLAGS} -Wl,-z,stack-size=1048576 -latomic -Wl,--no-keep-memory'" >> ${srcdir}/mozconfig 
      echo "export CXXFLAGS='${CXXFLAGS} -latomic -Wno-class-memaccess'" >> ${srcdir}/mozconfig
      # patch the rust debug level, this is hardcoded
      sed -i "s/debug_info = '2'/debug_info = '1'/" \
        build/moz.configure/toolchain.configure
    ;;
    powerpc64)
      echo "ac_add_options --disable-webrtc" >> ${srcdir}/mozconfig
    ;;
    riscv64)
      echo "export LDFLAGS='${LDFLAGS} -Wl,-z,stack-size=1048576 -Wl,--no-keep-memory'" >> ${srcdir}/mozconfig 
    ;;
    *)
      echo "ac_add_options --enable-rust-simd" >> ${srcdir}/mozconfig
      echo "export RUSTC_OPT_LEVEL=2" >> ${srcdir}/mozconfig
      echo "ac_add_options --enable-lto=full" >> ${srcdir}/mozconfig
      echo "ac_add_options MOZ_PGO=1" >> ${srcdir}/mozconfig
    ;;
  esac

  case "${CARCH}" in
    riscv64)
      echo "ac_add_options --disable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --disable-debug" >> ${srcdir}/mozconfig
      echo "ac_add_options --disable-jit" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
      rm -fv ${srcdir}/firefox-${pkgver}/.cargo/config
    ;;
    x86_64)
      echo "ac_add_options --with-wasi-sysroot=/usr/share/wasi-sysroot" >> ${srcdir}/mozconfig
      echo "ac_add_options --enable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
      echo "export MOZILLA_OFFICIAL=1" >> ${srcdir}/mozconfig
      echo "export MOZ_TELEMETRY_REPORTING=1" >> ${srcdir}/mozconfig
      echo "export MOZ_REQUIRE_SIGNING=1" >> ${srcdir}/mozconfig
    ;;
    *)
      echo "ac_add_options --enable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
      echo "export MOZILLA_OFFICIAL=1" >> ${srcdir}/mozconfig
      echo "export MOZ_TELEMETRY_REPORTING=1" >> ${srcdir}/mozconfig
      echo "export MOZ_REQUIRE_SIGNING=1" >> ${srcdir}/mozconfig
    ;;
  esac

  mkdir ${srcdir}/.tmp
}

build() {
  cd firefox-$pkgver

  case "${CARCH}" in
    powerpc64*|riscv64)
      export CC=${CHOST}-gcc
      export CXX=${CHOST}-g++
      ;;
    *)
      export CC=clang
      export CXX=clang++
      ;;
  esac

  export TMPDIR=${srcdir}/.tmp

  export MOZCONFIG="$srcdir/mozconfig"
  export MOZ_NOSPAM=1
  export MOZBUILD_STATE_PATH="$srcdir/mozbuild"
  export MOZ_APP_REMOTINGNAME=${pkgname//-/}
  export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=pip

  # LTO needs more open files
  ulimit -n 4096

  rm -f old-configure
  xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
  ./mach build

  #echo "Building symbol archive..."
  #xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
  #./mach buildsymbols
}

package() {
  cd ${srcdir}/firefox-${pkgver}
  DESTDIR="$pkgdir" ./mach install || true

  local vendorjs="$pkgdir/usr/lib/$pkgname/browser/defaults/preferences/vendor.js"
  install -Dvm644 /dev/stdin "$vendorjs" <<END
// Use LANG environment variable to choose locale
pref("intl.locale.requested", "");

// Use system-provided dictionaries
pref("spellchecker.dictionary_path", "/usr/share/hunspell");

// Disable default browser checking.
pref("browser.shell.checkDefaultBrowser", false);

// Don't disable extensions in the application directory
pref("extensions.autoDisableScopes", 11);
END

  local distini="$pkgdir/usr/lib/$pkgname/distribution/distribution.ini"
  install -Dvm644 /dev/stdin "$distini" <<END
[Global]
id=archlinuxpower
version=1.0
about=Mozilla Firefox for Arch POWER 

[Preferences]
app.distributor=archlinuxpower
app.distributor.channel=$pkgname
app.partner.archlinuxpower=archlinuxpower
END

  install -Dvm644 ../$pkgname.desktop \
    "$pkgdir/usr/share/applications/$pkgname.desktop"

  local i theme=official
  for i in 16 22 24 32 48 64 128 256; do
    install -Dvm644 browser/branding/$theme/default$i.png \
      "$pkgdir/usr/share/icons/hicolor/${i}x${i}/apps/$pkgname.png"
  done
  install -Dvm644 browser/branding/$theme/content/about-logo.png \
    "$pkgdir/usr/share/icons/hicolor/192x192/apps/$pkgname.png"
  install -Dvm644 browser/branding/$theme/content/about-logo@2x.png \
    "$pkgdir/usr/share/icons/hicolor/384x384/apps/$pkgname.png"
  install -Dvm644 browser/branding/$theme/content/about-logo.svg \
    "$pkgdir/usr/share/icons/hicolor/scalable/apps/$pkgname.svg"
  install -Dvm644 ${srcdir}/identity-icons-brand.svg \
    "$pkgdir/usr/share/icons/hicolor/symbolic/apps/$pkgname-symbolic.svg"

  install -Dvm644 ${srcdir}/$pkgname.desktop \
    "$pkgdir/usr/share/applications/$pkgname.desktop"

  # Install a wrapper to avoid confusion about binary path
  install -Dvm755 /dev/stdin "$pkgdir/usr/bin/$pkgname" <<END
#!/bin/sh
exec /usr/lib/$pkgname/firefox "\$@"
END

  # Replace duplicate binary with wrapper
  # https://bugzilla.mozilla.org/show_bug.cgi?id=658850
  ln -srfv "$pkgdir/usr/bin/$pkgname" "$pkgdir/usr/lib/$pkgname/firefox-bin"

  # Use system certificates
  local nssckbi="$pkgdir/usr/lib/$pkgname/libnssckbi.so"
  if [[ -e $nssckbi ]]; then
    ln -srfv "$pkgdir/usr/lib/libnssckbi.so" "$nssckbi"
  fi

  #if [[ -f "$startdir/.crash-stats-api.token" ]]; then
  #  find . -name '*crashreporter-symbols-full.zip' -exec \
  #    "$startdir/upload-symbol-archive" "$startdir/.crash-stats-api.token" {} +
  #else
  #  find . -name '*crashreporter-symbols-full.zip' -exec \
  #    cp -fvt "$startdir" {} +
  #fi
}

# vim:set sw=2 sts=-1 et:
