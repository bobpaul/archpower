# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Ionut Biru <ibiru@archlinux.org>
# Contributor: Jakub Schmidtke <sjakub@gmail.com>

pkgname=firefox
pkgver=114.0.2
pkgrel=1
pkgdesc="Standalone web browser from mozilla.org"
arch=(x86_64 powerpc64le powerpc64 riscv64)
license=(MPL GPL LGPL)
url="https://www.mozilla.org/firefox/"
depends=(gtk3 libxt mime-types dbus-glib ffmpeg nss ttf-font libpulse jemalloc)
makedepends=(unzip zip diffutils mesa imake inetutils xorg-server-xvfb
             autoconf2.13 rust clang llvm jack gtk2 nodejs cbindgen
             python-setuptools python-psutil
             wasi-compiler-rt wasi-libc wasi-libc++ wasi-libc++abi gn)
makedepends_powerpc64=(lld)
makedepends_powerpc64le=(lld)
makedepends_x86_64=(lld)
optdepends=('networkmanager: Location detection via available WiFi networks'
            'libnotify: Notification integration'
            'pulseaudio: Audio support'
            'speech-dispatcher: Text-to-Speech'
            'hunspell-en_US: Spell checking, American English')
options=(!emptydirs !makeflags strip)
source=(https://archive.mozilla.org/pub/firefox/releases/$pkgver/source/firefox-$pkgver.source.tar.xz{,.asc}
        $pkgname.desktop
        identity-icons-brand.svg
        big-endian-image-decoders.patch
        firefox-pgo.patch
        mozilla-bmo181042.patch)
sha256sums=('aa602032f0b7065b743ba7fabf96714398aba538bcc017a4b0fff556dc69f8fe'
            'SKIP'
            'a9e5264257041c0b968425b5c97436ba48e8d294e1a0f02c59c35461ea245c33'
            'a9b8b4a0a1f4a7b4af77d5fc70c2686d624038909263c795ecc81e0aec7711e9'
            '0df637d44218524e213814d15d623f27724d8e405390173f6cc385e145110bfe'
            'c636ddb9e85626f5cadabbf051551ac2e6db44d764e993d3b64dabcb1bfa80bc'
            '48bcdf47123fa67212916d52b215e603b9969f2db74062832c514de6170b180a')
validpgpkeys=('14F26682D0916CDD81E37B6D61B7B526D98F0353') # Mozilla Software Releases <release@mozilla.com>

# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
# Note: These are for Arch Linux POWER use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact alex.bldck@gmail.com for
# more information.
_google_api_key=AIzaSyDgkw4O3LM0Jnr2N7Wq2NG7iUVzRU5sBaA

# Mozilla API keys (see https://location.services.mozilla.com/api)
# Note: These are for Arch Linux POWER use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact alex.bldck@gmail.com for
# more information.
_mozilla_api_key=de0473f2-d53f-46da-956c-6aff61bda3ab

prepare() {
  mkdir -p mozbuild
  cd ${srcdir}/firefox-$pkgver

  patch -Np0 -i ${srcdir}/big-endian-image-decoders.patch 
  patch -Np1 -i ${srcdir}/firefox-pgo.patch
  patch -Np1 -i ${srcdir}/mozilla-bmo181042.patch

  sed -i 's/\("files":{\)[^}]*/\1/' third_party/rust/num-traits/.cargo-checksum.json

  echo -n "$_google_api_key" >$srcdir/google-api-key
  echo -n "$_mozilla_api_key" >$srcdir/mozilla-api-key

  cat >${srcdir}/mozconfig <<END
ac_add_options --enable-application=browser

ac_add_options --prefix=/usr
ac_add_options --enable-optimize
ac_add_options --enable-hardening
ac_add_options --enable-jemalloc
ac_add_options --enable-linker=bfd
export LDFLAGS="${LDFLAGS} -Wl,-rpath=/usr/lib/firefox"
mk_add_options MOZ_MAKE_FLAGS="${MAKEFLAGS}"

# Branding
ac_add_options --enable-official-branding
ac_add_options --enable-update-channel=release
ac_add_options --with-distribution-id=org.archlinuxpower
ac_add_options --with-unsigned-addon-scopes=app,system
export MOZ_APP_REMOTINGNAME=${pkgname//-/}
export MOZ_TELEMETRY_REPORTING=1
export MOZ_REQUIRE_SIGNING=1

# Keys
ac_add_options --with-google-location-service-api-keyfile=${srcdir}/google-api-key
ac_add_options --with-google-safebrowsing-api-keyfile=${srcdir}/google-api-key
ac_add_options --with-mozilla-api-keyfile=${srcdir}/mozilla-api-key

ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --enable-system-pixman

# Features
ac_add_options --enable-alsa
ac_add_options --enable-jack
ac_add_options --disable-crashreporter
ac_add_options --disable-updater
ac_add_options --disable-tests
ac_add_options --disable-webrtc
END

  case "${CARCH}" in
    powerpc)
      echo "export LDFLAGS='${LDFLAGS} -Wl,-z,stack-size=1048576 -latomic -Wl,--no-keep-memory'" >> ${srcdir}/mozconfig 
      echo "export CXXFLAGS='${CXXFLAGS} -latomic -Wno-class-memaccess'" >> ${srcdir}/mozconfig
      # patch the rust debug level, this is hardcoded
      sed -i "s/debug_info = '2'/debug_info = '1'/" \
        build/moz.configure/toolchain.configure
    ;;
    riscv64)
      echo "export LDFLAGS='${LDFLAGS} -Wl,-z,stack-size=1048576 -Wl,--no-keep-memory'" >> ${srcdir}/mozconfig 
    ;;
    *)
      echo "ac_add_options --enable-rust-simd" >> ${srcdir}/mozconfig
      echo "export RUSTC_OPT_LEVEL=2" >> ${srcdir}/mozconfig
      echo "ac_add_options --enable-lto=full" >> ${srcdir}/mozconfig
      echo "ac_add_options MOZ_PGO=1" >> ${srcdir}/mozconfig
    ;;
  esac

  case "${CARCH}" in
    riscv64)
      echo "ac_add_options --disable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --disable-debug" >> ${srcdir}/mozconfig
      echo "ac_add_options --disable-jit" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
      rm -fv ${srcdir}/firefox-${pkgver}/.cargo/config
    ;;
    x86_64)
      echo "ac_add_options --with-wasi-sysroot=/usr/share/wasi-sysroot" >> ${srcdir}/mozconfig
      echo "ac_add_options --enable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
      echo "export MOZILLA_OFFICIAL=1" >> ${srcdir}/mozconfig
      echo "export MOZ_TELEMETRY_REPORTING=1" >> ${srcdir}/mozconfig
      echo "export MOZ_REQUIRE_SIGNING=1" >> ${srcdir}/mozconfig
    ;;
    *)
      echo "ac_add_options --enable-release" >> ${srcdir}/mozconfig
      echo "ac_add_options --without-wasm-sandboxed-libraries" >> ${srcdir}/mozconfig
      echo "export MOZILLA_OFFICIAL=1" >> ${srcdir}/mozconfig
      echo "export MOZ_TELEMETRY_REPORTING=1" >> ${srcdir}/mozconfig
      echo "export MOZ_REQUIRE_SIGNING=1" >> ${srcdir}/mozconfig
    ;;
  esac

  mkdir ${srcdir}/.tmp
}

build() {
  cd firefox-$pkgver

  case "${CARCH}" in
    powerpc64*|riscv64)
      export CC=${CHOST}-gcc
      export CXX=${CHOST}-g++
      ;;
    *)
      export CC=clang
      export CXX=clang++
      ;;
  esac

  export TMPDIR=${srcdir}/.tmp

  export MOZCONFIG="$srcdir/mozconfig"
  export MOZ_NOSPAM=1
  export MOZBUILD_STATE_PATH="$srcdir/mozbuild"
  export MOZ_APP_REMOTINGNAME=${pkgname//-/}
  #export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=system

  # LTO needs more open files
  ulimit -n 4096

  rm -f old-configure
  xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
  ./mach build

  #echo "Building symbol archive..."
  #xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
  #./mach buildsymbols
}

package() {
  cd ${srcdir}/firefox-${pkgver}
  DESTDIR="$pkgdir" ./mach install || true

  local vendorjs="$pkgdir/usr/lib/$pkgname/browser/defaults/preferences/vendor.js"
  install -Dvm644 /dev/stdin "$vendorjs" <<END
// Use LANG environment variable to choose locale
pref("intl.locale.requested", "");

// Use system-provided dictionaries
pref("spellchecker.dictionary_path", "/usr/share/hunspell");

// Disable default browser checking.
pref("browser.shell.checkDefaultBrowser", false);

// Don't disable extensions in the application directory
pref("extensions.autoDisableScopes", 11);
END

  local distini="$pkgdir/usr/lib/$pkgname/distribution/distribution.ini"
  install -Dvm644 /dev/stdin "$distini" <<END
[Global]
id=archlinuxpower
version=1.0
about=Mozilla Firefox for Arch POWER 

[Preferences]
app.distributor=archlinuxpower
app.distributor.channel=$pkgname
app.partner.archlinuxpower=archlinuxpower
END

  install -Dvm644 ../$pkgname.desktop \
    "$pkgdir/usr/share/applications/$pkgname.desktop"

  local i theme=official
  for i in 16 22 24 32 48 64 128 256; do
    install -Dvm644 browser/branding/$theme/default$i.png \
      "$pkgdir/usr/share/icons/hicolor/${i}x${i}/apps/$pkgname.png"
  done
  install -Dvm644 browser/branding/$theme/content/about-logo.png \
    "$pkgdir/usr/share/icons/hicolor/192x192/apps/$pkgname.png"
  install -Dvm644 browser/branding/$theme/content/about-logo@2x.png \
    "$pkgdir/usr/share/icons/hicolor/384x384/apps/$pkgname.png"
  install -Dvm644 browser/branding/$theme/content/about-logo.svg \
    "$pkgdir/usr/share/icons/hicolor/scalable/apps/$pkgname.svg"
  install -Dvm644 ${srcdir}/identity-icons-brand.svg \
    "$pkgdir/usr/share/icons/hicolor/symbolic/apps/$pkgname-symbolic.svg"

  install -Dvm644 ${srcdir}/$pkgname.desktop \
    "$pkgdir/usr/share/applications/$pkgname.desktop"

  # Install a wrapper to avoid confusion about binary path
  install -Dvm755 /dev/stdin "$pkgdir/usr/bin/$pkgname" <<END
#!/bin/sh
exec /usr/lib/$pkgname/firefox "\$@"
END

  # Replace duplicate binary with wrapper
  # https://bugzilla.mozilla.org/show_bug.cgi?id=658850
  ln -srfv "$pkgdir/usr/bin/$pkgname" "$pkgdir/usr/lib/$pkgname/firefox-bin"

  # Use system certificates
  local nssckbi="$pkgdir/usr/lib/$pkgname/libnssckbi.so"
  if [[ -e $nssckbi ]]; then
    ln -srfv "$pkgdir/usr/lib/libnssckbi.so" "$nssckbi"
  fi

  #if [[ -f "$startdir/.crash-stats-api.token" ]]; then
  #  find . -name '*crashreporter-symbols-full.zip' -exec \
  #    "$startdir/upload-symbol-archive" "$startdir/.crash-stats-api.token" {} +
  #else
  #  find . -name '*crashreporter-symbols-full.zip' -exec \
  #    cp -fvt "$startdir" {} +
  #fi
}

# vim:set sw=2 sts=-1 et:
