diff -r b22cb12f611c build/moz.configure/lto-pgo.configure
--- a/build/moz.configure/lto-pgo.configure	Thu Oct 07 08:11:19 2021 +0000
+++ b/build/moz.configure/lto-pgo.configure	Sun Oct 10 20:36:46 2021 -0700
@@ -81,17 +81,17 @@
 
 @depends(c_compiler, pgo_profile_path, target_is_windows)
 @imports("multiprocessing")
 def pgo_flags(compiler, profdata, target_is_windows):
     if compiler.type == "gcc":
         return namespace(
             gen_cflags=["-fprofile-generate"],
             gen_ldflags=["-fprofile-generate"],
-            use_cflags=["-fprofile-use", "-fprofile-correction", "-Wcoverage-mismatch"],
+            use_cflags=["-fprofile-use", "-fprofile-correction", "-Wno-coverage-mismatch"],
             use_ldflags=["-fprofile-use"],
         )
 
     if compiler.type in ("clang-cl", "clang"):
         prefix = ""
         if compiler.type == "clang-cl":
             prefix = "/clang:"
             gen_ldflags = None
diff -r b22cb12f611c build/pgo/profileserver.py
--- a/build/pgo/profileserver.py	Thu Oct 07 08:11:19 2021 +0000
+++ b/build/pgo/profileserver.py	Sun Oct 10 20:36:46 2021 -0700
@@ -82,19 +82,32 @@
         docroot=os.path.join(build.topsrcdir, "build", "pgo"),
         path_mappings=path_mappings,
     )
     httpd.start(block=False)
 
     locations = ServerLocations()
     locations.add_host(host="127.0.0.1", port=PORT, options="primary,privileged")
 
-    old_profraw_files = glob.glob("*.profraw")
-    for f in old_profraw_files:
-        os.remove(f)
+    using_gcc = False
+    try:
+        if build.config_environment.substs.get('CC_TYPE') == 'gcc':
+            using_gcc = True
+    except BuildEnvironmentNotFoundException:
+        pass
+
+    if using_gcc:
+        for dirpath, _, filenames in os.walk('.'):
+            for f in filenames:
+                if f.endswith('.gcda'):
+                    os.remove(os.path.join(dirpath, f))
+    else:
+        old_profraw_files = glob.glob('*.profraw')
+        for f in old_profraw_files:
+            os.remove(f)
 
     with TemporaryDirectory() as profilePath:
         # TODO: refactor this into mozprofile
         profile_data_dir = os.path.join(build.topsrcdir, "testing", "profiles")
         with open(os.path.join(profile_data_dir, "profiles.json"), "r") as fh:
             base_profiles = json.load(fh)["profileserver"]
 
         prefpaths = [
@@ -207,16 +220,20 @@
 
         # Try to move the crash reports to the artifacts even if Firefox appears
         # to exit successfully, in case there's a crash that doesn't set the
         # return code to non-zero for some reason.
         if get_crashreports(profilePath, name="Firefox exited successfully?") != 0:
             print("Firefox exited successfully, but produced a crashreport")
             sys.exit(1)
 
+        print('Copying profile data....')
+        os.system('pwd');
+        os.system('tar cf profdata.tar.gz `find . -name "*.gcda"`; cd ..; tar xf instrumented/profdata.tar.gz;');
+
         llvm_profdata = env.get("LLVM_PROFDATA")
         if llvm_profdata:
             profraw_files = glob.glob("*.profraw")
             if not profraw_files:
                 print(
                     "Could not find profraw files in the current directory: %s"
                     % os.getcwd()
                 )
diff -r b22cb12f611c toolkit/components/terminator/nsTerminator.cpp
--- a/toolkit/components/terminator/nsTerminator.cpp	Thu Apr 07 15:11:19 2022 +0000
+++ b/toolkit/components/terminator/nsTerminator.cpp	Thu Apr 07 20:44:28 2022 -0700
@@ -461,16 +461,21 @@
       // Defend against overflow
       crashAfterMS = INT32_MAX;
     } else {
       crashAfterMS *= scaleUp;
     }
   }
 #endif
 
+  // Disable watchdog for PGO train builds - writting profile information at
+  // exit may take time and it is better to make build hang rather than
+  // silently produce poorly performing binary.
+  crashAfterMS = INT32_MAX;
+
   UniquePtr<Options> options(new Options());
   // crashAfterTicks is guaranteed to be > 0 as
   // crashAfterMS >= ADDITIONAL_WAIT_BEFORE_CRASH_MS >> HEARTBEAT_INTERVAL_MS
   options->crashAfterTicks = crashAfterMS / HEARTBEAT_INTERVAL_MS;
 
   DebugOnly<PRThread*> watchdogThread =
       CreateSystemThread(RunWatchdog, options.release());
   MOZ_ASSERT(watchdogThread);
diff -r b22cb12f611c testing/mozbase/mozrunner/mozrunner/application.py
--- a/testing/mozbase/mozrunner/mozrunner/application.py	2024-01-25 00:10:58.000000000 -0800
+++ b/testing/mozbase/mozrunner/mozrunner/application.py	2024-01-27 16:12:54.503893331 -0800
@@ -1,16 +1,16 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 import os
 import posixpath
 from abc import ABCMeta, abstractmethod
-from distutils.spawn import find_executable
+from shutil import which
 
 import six
 from mozdevice import ADBDeviceFactory
 from mozprofile import (
     ChromeProfile,
     ChromiumProfile,
     FirefoxProfile,
     Profile,
@@ -46,17 +46,17 @@
     profile_class = Profile
     _bindir = None
     remote_test_root = ""
     remote_process = None
 
     @property
     def bindir(self):
         if self._bindir is None:
-            paths = [find_executable("emulator")]
+            paths = [which("emulator")]
             paths = [p for p in paths if p is not None if os.path.isfile(p)]
             if not paths:
                 self._bindir = ""
             else:
                 self._bindir = os.path.dirname(paths[0])
         return self._bindir
 
     @property
@@ -83,17 +83,17 @@
         return self._remote_profile
 
     def which(self, binary):
         paths = os.environ.get("PATH", {}).split(os.pathsep)
         if self.bindir is not None and os.path.abspath(self.bindir) not in paths:
             paths.insert(0, os.path.abspath(self.bindir))
             os.environ["PATH"] = os.pathsep.join(paths)
 
-        return find_executable(binary)
+        return which(binary)
 
     @abstractmethod
     def stop_application(self):
         """Run (device manager) command to stop application."""
         pass
 
 
 devices = {}
diff -r b22cb12f611c testing/mozbase/mozdevice/mozdevice/adb.py
--- a/testing/mozbase/mozdevice/mozdevice/adb.py	2024-01-25 00:10:58.000000000 -0800
+++ b/testing/mozbase/mozdevice/mozdevice/adb.py	2024-01-27 16:46:45.776346771 -0800
@@ -10,17 +10,16 @@
 import shlex
 import shutil
 import signal
 import subprocess
 import sys
 import tempfile
 import time
 import traceback
-from distutils import dir_util
 from threading import Thread
 
 import six
 from six.moves import range
 
 from . import version_codes
 
 _TEST_ROOT = None
@@ -2978,17 +2977,17 @@
         if os.path.isfile(local) and self.is_dir(remote):
             # force push to use the correct filename in the remote directory
             remote = posixpath.join(remote, os.path.basename(local))
         elif os.path.isdir(local):
             copy_required = True
             temp_parent = tempfile.mkdtemp()
             remote_name = os.path.basename(remote)
             new_local = os.path.join(temp_parent, remote_name)
-            dir_util.copy_tree(local, new_local)
+            shutil.copytree(local, new_local, dirs_exist_ok=True)
             local = new_local
             # See do_sync_push in
             # https://android.googlesource.com/platform/system/core/+/master/adb/file_sync_client.cpp
             # Work around change in behavior in adb 1.0.36 where if
             # the remote destination directory exists, adb push will
             # copy the source directory *into* the destination
             # directory otherwise it will copy the source directory
             # *onto* the destination directory.
