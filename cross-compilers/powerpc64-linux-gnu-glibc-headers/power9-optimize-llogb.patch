diff -ruN glibc-2.33.orig/sysdeps/powerpc/fpu/math_private.h glibc-2.33/sysdeps/powerpc/fpu/math_private.h
--- glibc-2.33.orig/sysdeps/powerpc/fpu/math_private.h	2021-03-21 22:07:51.472012834 +0100
+++ glibc-2.33/sysdeps/powerpc/fpu/math_private.h	2021-03-21 22:08:53.677792426 +0100
@@ -25,7 +25,28 @@
 
 #include_next <math_private.h>
 
-#if defined _ARCH_PWR9 && __HAVE_DISTINCT_FLOAT128
+#ifdef _ARCH_PWR9
+
+#if __GNUC_PREREQ (8, 0)
+# define _GL_HAS_BUILTIN_ILOGB 1
+#elif defined __has_builtin
+# define _GL_HAS_BUILTIN_ILOGB __has_builtin (__builtin_vsx_scalar_extract_exp)
+#else
+# define _GL_HAS_BUILTIN_ILOGB 0
+#endif
+
+#define __builtin_test_dc_ilogbf __builtin_test_dc_ilogb
+#define __builtin_ilogbf __builtin_ilogb
+
+#define __builtin_test_dc_ilogb(x, y) \
+        __builtin_vsx_scalar_test_data_class_dp(x, y)
+#define __builtin_ilogb(x) __builtin_vsx_scalar_extract_exp(x) - 0x3ff
+
+#define __builtin_test_dc_ilogbf128(x, y) \
+        __builtin_vsx_scalar_test_data_class_qp(x, y)
+#define __builtin_ilogbf128(x) __builtin_vsx_scalar_extract_expq(x) - 0x3fff
+
+#if __HAVE_DISTINCT_FLOAT128
 extern __always_inline _Float128
 __ieee754_sqrtf128 (_Float128 __x)
 {
@@ -34,5 +55,8 @@
   return __z;
 }
 #endif
+#else /* !_ARCH_PWR9 */
+#define _GL_HAS_BUILTIN_ILOGB 0
+#endif
 
 #endif /* _PPC_MATH_PRIVATE_H_ */
diff -ruN glibc-2.33.orig/sysdeps/powerpc/powerpc64/le/fpu/w_ilogbl.c glibc-2.33/sysdeps/powerpc/powerpc64/le/fpu/w_ilogbl.c
--- glibc-2.33.orig/sysdeps/powerpc/powerpc64/le/fpu/w_ilogbl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-2.33/sysdeps/powerpc/powerpc64/le/fpu/w_ilogbl.c	2021-03-21 22:08:53.677792426 +0100
@@ -0,0 +1,4 @@
+/* Skip the optimization for long double as ibm128 does not provide an
+   optimized builtin. */
+#include <math-type-macros-ldouble.h>
+#include <math/w_ilogb_template.c>
diff -ruN glibc-2.33.orig/sysdeps/powerpc/powerpc64/le/fpu/w_ilogb_template.c glibc-2.33/sysdeps/powerpc/powerpc64/le/fpu/w_ilogb_template.c
--- glibc-2.33.orig/sysdeps/powerpc/powerpc64/le/fpu/w_ilogb_template.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-2.33/sysdeps/powerpc/powerpc64/le/fpu/w_ilogb_template.c	2021-03-21 22:08:53.677792426 +0100
@@ -0,0 +1,30 @@
+#include <math.h>
+#include <errno.h>
+#include <limits.h>
+#include <math_private.h>
+#include <fenv.h>
+
+#if _GL_HAS_BUILTIN_ILOGB
+int
+M_DECL_FUNC (__ilogb) (FLOAT x)
+{
+  int r;
+  /* Check for exceptional cases.  */
+  if (! M_SUF(__builtin_test_dc_ilogb) (x, 0x7f))
+    r = M_SUF (__builtin_ilogb) (x);
+  else
+    /* Fallback to the generic ilogb if x is NaN, Inf or subnormal.  */
+    r = M_SUF (__ieee754_ilogb) (x);
+  if (__builtin_expect (r == FP_ILOGB0, 0)
+      || __builtin_expect (r == FP_ILOGBNAN, 0)
+      || __builtin_expect (r == INT_MAX, 0))
+    {
+      __set_errno (EDOM);
+      __feraiseexcept (FE_INVALID);
+    }
+  return r;
+}
+declare_mgen_alias (__ilogb, ilogb)
+#else
+#include <math/w_ilogb_template.c>
+#endif
diff -ruN glibc-2.33.orig/sysdeps/powerpc/powerpc64/le/fpu/w_llogbl.c glibc-2.33/sysdeps/powerpc/powerpc64/le/fpu/w_llogbl.c
--- glibc-2.33.orig/sysdeps/powerpc/powerpc64/le/fpu/w_llogbl.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-2.33/sysdeps/powerpc/powerpc64/le/fpu/w_llogbl.c	2021-03-21 22:09:13.627802608 +0100
@@ -0,0 +1,4 @@
+/* Skip the optimization for long double as ibm128 does not provide an
+   optimized builtin. */
+#include <math-type-macros-ldouble.h>
+#include <math/w_llogb_template.c>
diff -ruN glibc-2.33.orig/sysdeps/powerpc/powerpc64/le/fpu/w_llogb_template.c glibc-2.33/sysdeps/powerpc/powerpc64/le/fpu/w_llogb_template.c
--- glibc-2.33.orig/sysdeps/powerpc/powerpc64/le/fpu/w_llogb_template.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-2.33/sysdeps/powerpc/powerpc64/le/fpu/w_llogb_template.c	2021-03-21 22:09:13.627802608 +0100
@@ -0,0 +1,39 @@
+#include <math.h>
+#include <errno.h>
+#include <limits.h>
+#include <math_private.h>
+#include <fenv.h>
+
+#if _GL_HAS_BUILTIN_ILOGB
+long int
+M_DECL_FUNC (__llogb) (FLOAT x)
+{
+  int r;
+  /* Check for exceptional cases.  */
+  if (! M_SUF(__builtin_test_dc_ilogb) (x, 0x7f))
+    r = M_SUF (__builtin_ilogb) (x);
+  else
+    /* Fallback to the generic ilogb if x is NaN, Inf or subnormal.  */
+    r = M_SUF (__ieee754_ilogb) (x);
+  long int lr = r;
+  if (__glibc_unlikely (r == FP_ILOGB0)
+      || __glibc_unlikely (r == FP_ILOGBNAN)
+      || __glibc_unlikely (r == INT_MAX))
+    {
+#if LONG_MAX != INT_MAX
+      if (r == FP_ILOGB0)
+	lr = FP_LLOGB0;
+      else if (r == FP_ILOGBNAN)
+	lr = FP_LLOGBNAN;
+      else
+	lr = LONG_MAX;
+#endif
+      __set_errno (EDOM);
+      __feraiseexcept (FE_INVALID);
+    }
+  return lr;
+}
+declare_mgen_alias (__llogb, llogb)
+#else
+#include <math/w_llogb_template.c>
+#endif
