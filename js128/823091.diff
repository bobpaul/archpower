# HG changeset patch
# User Cameron Kaiser <spectre@floodgap.com>
# Date 1723177567 25200
#      Thu Aug 08 21:26:07 2024 -0700
# Node ID b47f3d563dbde57f7908c66551b74b4a87a29fb0
# Parent  9a197bcbc77065b82aa15f320683bab1a6ec9d8b
js build system for ppc64

diff -r 9a197bcbc770 -r b47f3d563dbd config/check_macroassembler_style.py
--- a/config/check_macroassembler_style.py	Thu Aug 08 21:25:14 2024 -0700
+++ b/config/check_macroassembler_style.py	Thu Aug 08 21:26:07 2024 -0700
@@ -21,17 +21,17 @@
 # ----------------------------------------------------------------------------
 
 import difflib
 import os
 import re
 import sys
 
 architecture_independent = set(["generic"])
-all_unsupported_architectures_names = set(["mips32", "mips64", "mips_shared"])
+all_unsupported_architectures_names = set(["mips32", "mips64", "mips_shared", "ppc64"])
 all_architecture_names = set(
     ["x86", "x64", "arm", "arm64", "loong64", "riscv64", "wasm32"]
 )
 all_shared_architecture_names = set(
     ["x86_shared", "arm", "arm64", "loong64", "riscv64", "wasm32"]
 )
 
 reBeforeArg = r"(?<=[(,\s])"
diff -r 9a197bcbc770 -r b47f3d563dbd js/moz.configure
--- a/js/moz.configure	Thu Aug 08 21:25:14 2024 -0700
+++ b/js/moz.configure	Thu Aug 08 21:26:07 2024 -0700
@@ -336,38 +336,42 @@
     if target.cpu == "aarch64":
         return namespace(arm64=True)
     elif target.cpu == "x86_64":
         return namespace(x64=True)
     elif target.cpu == "loongarch64":
         return namespace(loong64=True)
     elif target.cpu == "riscv64":
         return namespace(riscv64=True)
+    elif target.cpu == "ppc64":
+        return namespace(ppc64=True)
 
     return namespace(**{str(target.cpu): True})
 
 
 set_config("JS_CODEGEN_NONE", jit_codegen.none)
 set_config("JS_CODEGEN_ARM", jit_codegen.arm)
 set_config("JS_CODEGEN_ARM64", jit_codegen.arm64)
 set_config("JS_CODEGEN_MIPS32", jit_codegen.mips32)
 set_config("JS_CODEGEN_MIPS64", jit_codegen.mips64)
 set_config("JS_CODEGEN_LOONG64", jit_codegen.loong64)
 set_config("JS_CODEGEN_RISCV64", jit_codegen.riscv64)
+set_config("JS_CODEGEN_PPC64", jit_codegen.ppc64)
 set_config("JS_CODEGEN_X86", jit_codegen.x86)
 set_config("JS_CODEGEN_X64", jit_codegen.x64)
 set_config("JS_CODEGEN_WASM32", jit_codegen.wasm32)
 
 set_define("JS_CODEGEN_NONE", jit_codegen.none)
 set_define("JS_CODEGEN_ARM", jit_codegen.arm)
 set_define("JS_CODEGEN_ARM64", jit_codegen.arm64)
 set_define("JS_CODEGEN_MIPS32", jit_codegen.mips32)
 set_define("JS_CODEGEN_MIPS64", jit_codegen.mips64)
 set_define("JS_CODEGEN_LOONG64", jit_codegen.loong64)
 set_define("JS_CODEGEN_RISCV64", jit_codegen.riscv64)
+set_define("JS_CODEGEN_PPC64", jit_codegen.ppc64)
 set_define("JS_CODEGEN_X86", jit_codegen.x86)
 set_define("JS_CODEGEN_X64", jit_codegen.x64)
 set_define("JS_CODEGEN_WASM32", jit_codegen.wasm32)
 
 
 # Profiling
 # =======================================================
 option(
