--- src/mailclient_p.h	2023-11-22 20:09:08.609106058 +0100
+++ src/mailclient_p.h	2023-11-22 20:09:11.900759398 +0100
@@ -42,20 +19,6 @@
 class AKONADI_CALENDAR_TESTS_EXPORT MailClient : public QObject
 {
     Q_OBJECT
-
-    struct MessageData {
-        QString from;
-        QStringList to;
-        QStringList cc;
-        QString subject;
-        QString body;
-        bool hidden = false;
-        bool bccMe = false;
-        QString attachment;
-    };
-
-    bool mAkonadiLookupEnabled = true;
-
 public:
     enum Result { ResultSuccess, ResultNoAttendees, ResultReallyNoAttendees, ResultErrorCreatingTransport, ResultErrorFetchingTransport, ResultQueueJobError };
 
@@ -104,7 +67,14 @@
     */
     void send(const KCalendarCore::IncidenceBase::Ptr &incidence,
               const KIdentityManagement::Identity &identity,
-              const MessageData &msg,
+              const QString &from,
+              const QString &to,
+              const QString &cc,
+              const QString &subject,
+              const QString &body,
+              bool hidden = false,
+              bool bccMe = false,
+              const QString &attachment = QString(),
               const QString &mailTransport = QString());
 
 private:
@@ -116,53 +86,6 @@
 public:
     // For unit-test usage, since we can't depend on kdepim-runtime on jenkins
     ITIPHandlerComponentFactory *mFactory = nullptr;
-
-protected:
-    /** Allows to disable Akonadi lookup in KeyResolver (for tests) */
-    void setAkonadiLookupEnabled(bool enabled);
-    /** Allows to override KeyResolver contact preferences (useful for tests) */
-    virtual std::optional<MessageComposer::ContactPreference> contactPreference(const QString &email);
-
-    /** Whether to show key approval dialog or not. **/
-    virtual bool showKeyApprovalDialog() const;
-
-private:
-    std::vector<std::unique_ptr<MessageComposer::Composer>>
-    buildComposers(const KCalendarCore::IncidenceBase::Ptr &incidence, const KIdentityManagement::Identity &identity, const MessageData &msg);
-
-    void populateComposer(MessageComposer::Composer *composer, const MessageData &msg);
-
-    bool determineWhetherToSign(bool doSignCompletely,
-                                Kleo::KeyResolver *keyResolver,
-                                ITIPHandlerDialogDelegate *dialogDelegate,
-                                const KIdentityManagement::Identity &identity,
-                                bool signSomething,
-                                bool &signAttachments,
-                                bool &result,
-                                bool &canceled);
-
-    bool determineWhetherToEncrypt(bool doEncryptCompletely,
-                                   Kleo::KeyResolver *keyResolver,
-                                   ITIPHandlerDialogDelegate *dialogDelegate,
-                                   const KIdentityManagement::Identity &identity,
-                                   bool encryptSomething,
-                                   bool signSomething,
-                                   bool &encryptAttachments,
-                                   bool &result,
-                                   bool &canceled);
-
-    bool addKeysToContext(const QString &gnupgHome,
-                          const QVector<QPair<QStringList, std::vector<GpgME::Key>>> &data,
-                          const std::map<QByteArray, QString> &autocrypt);
-
-    void queueMessage(const MailTransport::Transport *transport,
-                      const MessageComposer::Composer *composer,
-                      const KCalendarCore::IncidenceBase::Ptr &incidence,
-                      const KIdentityManagement::Identity &identity,
-                      const MessageData &msg,
-                      const KMime::Message::Ptr &message);
-
-    void populateKeyResolverContactsPreferences(Kleo::KeyResolver &keyResolver, const QStringList &addresses);
 };
 }
 
