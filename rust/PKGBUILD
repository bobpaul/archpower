# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer: Johannes Löthberg <johannes@kyriasis.com>
# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Contributor: Alexander F Rødseth <xyproto@archlinux.org>
# Contributor: Daniel Micay <danielmicay@gmail.com>
# Contributor: userwithuid <userwithuid@gmail.com>

pkgbase=rust
pkgname=(
  rust
  rust-src
)
case "${CARCH}" in
  powerpc64le) pkgname+=(rust-wasm) ;;
  x86_64) pkgname+=(lib32-rust-libs rust-musl rust-wasm) ;;
esac
epoch=1
pkgver=1.73.0
pkgrel=1
pkgdesc="Systems programming language focused on safety, speed and concurrency"
url=https://www.rust-lang.org/
arch=(x86_64 powerpc64le powerpc64 powerpc riscv64)
license=(
  Apache
  MIT
)
options=(
  !debug
  !emptydirs
  !lto
  !strip
)
depends=(
  curl
  gcc
  gcc-libs
  libssh2
  llvm-libs
)
makedepends=(
  cmake
  libffi
  lld
  llvm
  ninja
  perl
  python
  rust
  wasi-libc
)
makedepends_x86_64=(
  lib32-gcc-libs
  musl
)
checkdepends=(
  gdb
  procps-ng
)
source=(
  "https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.gz"{,.asc}
  0002-bootstrap-Change-bash-completion-dir.patch
  0003-compiler-Change-LLVM-targets.patch
  0004-compiler-Use-wasm-ld-for-wasm-targets.patch
  xxxx-Use-ELFv2-ABI-on-all-powerpc64-targets.patch
)
b2sums=('d25823e433ce66d3148359deab7fcf5b6e6aecf832359cf3d7cec55e7f45163c981d396f6b772fa12393896a71e69c91cdfd01d633e2c05d641d0f1b2174e264'
        'SKIP'
        'f165abb36f03bb1ddcdca8e674244e51c7ce3a6b83e59b44d520e16e3735952cdd1c6da9edca51a755b343323f6f37c7ea7093708212300974e41560d15ee6ef'
        '5faa0c65de5186dd225afcb58d0d0b2fddf2f2a7008f7a7d84bf14e78a23dbf08ae04c016d3c8241359ec9eb286f5186a7ae84ce03446f37e56fc2667fa1c114'
        'e0acea294146ae14ec18ac1f99cb9113dfe0dbe87cfd557fb093b56fc15cf036ac076af905fbe358a11a913d2fc845619c5fd8e18ac97127c232127a28666117'
        'a12ab3f62987d3de257ef4bb66220559efe46c92f0d9820390ed36bf404c56f05253619b5c46e37b44dc30386f54ef3c856124a1cc1a8b854b7f6426183b2d6d')
validpgpkeys=(
  108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE  # Rust Language (Tag and Release Signing Key) <rust-key@rust-lang.org>
  474E22316ABF4785A88C6E8EA2C794A986419D8A  # Tom Stellard <tstellar@redhat.com>
)

prepare() {
  cd rustc-$pkgver-src

  # Put bash completions where they belong
  patch -Np1 -i ../0002-bootstrap-Change-bash-completion-dir.patch

  # Use our *-pc-linux-gnu targets, making LTO with clang simpler
  patch -Np1 -i ../0003-compiler-Change-LLVM-targets.patch

  # Use our wasm-ld
  patch -Np1 -i ../0004-compiler-Use-wasm-ld-for-wasm-targets.patch

  # Ensure powerpc64 uses ELFv2
  patch -Np1 -i ../xxxx-Use-ELFv2-ABI-on-all-powerpc64-targets.patch

_jemalloc='true'
case "${CARCH}" in
  powerpc64le)
    _rust_target='powerpc64le-unknown-linux-gnu'
    _build_tools='"cargo", "clippy", "rustdoc", "rustfmt", "rust-analyzer-proc-macro-srv", "analysis", "src", "rust-demangler"'
    _config_targets='"powerpc64le-unknown-linux-gnu","wasm32-unknown-unknown","wasm32-wasi"'
    _config_target_extras=''
    pkgname+=(rust-wasm)
  ;;
  powerpc64)
    _rust_target='powerpc64-unknown-linux-gnu'
    _build_tools='"cargo", "clippy", "rustdoc", "rustfmt", "rust-analyzer-proc-macro-srv", "analysis", "src", "rust-demangler"'
    _config_targets='"powerpc64-unknown-linux-gnu"'
    _config_target_extras=''
  ;;
  powerpc)
    # fails to link with -O3 due to 32bit related relocation problems
    export RUSTFLAGS="-C opt-level=2"
    _rust_target='powerpc-unknown-linux-gnu'
    _build_tools='"cargo", "clippy", "rustdoc", "rustfmt", "rust-analyzer-proc-macro-srv", "analysis", "src", "rust-demangler"'
    _config_targets='"powerpc-unknown-linux-gnu"'
    _config_target_extras=''
  ;;
  riscv64)
    _rust_target='riscv64gc-unknown-linux-gnu'
    _build_tools='"cargo", "clippy", "rustdoc", "rustfmt", "rust-analyzer-proc-macro-srv", "analysis", "src", "rust-demangler"'
    _config_targets='"riscv64gc-unknown-linux-gnu"'
    _config_target_extras=''
    _jemalloc=false
  ;;
  x86_64)
    _rust_target="${CHOST}"
    _build_tools='"cargo", "rls", "clippy", "rustfmt", "analysis", "src", "rust-demangler","rust-analyzer-proc-macro-srv"'
    _config_targets='"x86_64-unknown-linux-gnu","i686-unknown-linux-gnu","x86_64-unknown-linux-musl","wasm32-unknown-unknown","wasm32-wasi"'
    _config_target_extras='[target.x86_64-unknown-linux-musl]
sanitizers = false
musl-root = "/usr/lib/musl"'
  ;;
esac

  cat >config.toml <<END
changelog-seen = 2
profile = "user"

[llvm]
link-shared = true

[build]
target = [
  ${_config_targets}
]
cargo = "/usr/bin/cargo"
rustc = "/usr/bin/rustc"
rustfmt = "/usr/bin/rustfmt"
locked-deps = true
vendor = true
tools = [
  ${_build_tools}
]
profiler = true

# Generating docs fails with the wasm32-* targets
docs = false

[install]
prefix = "/usr"

[rust]
debuginfo-level-std = 2
channel = "stable"
description = "Arch POWER $pkgbase $epoch:$pkgver-$pkgrel"
rpath = false
backtrace-on-ice = true
remap-debuginfo = true
jemalloc = ${_jemalloc}

# LLVM crashes when passing an object through ThinLTO twice.  This is triggered
# when using rust code in cross-language LTO if libstd was built using ThinLTO.
# http://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html
# https://github.com/rust-lang/rust/issues/54872
codegen-units-std = 1

# musl target produces warnings
deny-warnings = false

[dist]
compression-formats = ["gz"]

[target.${_rust_target}]
cc = "/usr/bin/${CHOST}-gcc"
cxx = "/usr/bin/${CHOST}-g++"
ar = "/usr/bin/${CHOST}-gcc-ar"
ranlib = "/usr/bin/gcc-ranlib"
llvm-config = "/usr/bin/llvm-config"

${_config_target_extras}

[target.wasm32-unknown-unknown]
sanitizers = false
profiler = false

[target.wasm32-wasi]
sanitizers = false
profiler = false
wasi-root = "/usr/share/wasi-sysroot"
END
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/$f"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

build() {
  cd rustc-$pkgver-src

  export RUST_BACKTRACE=1

  DESTDIR="$srcdir/dest-rust" python ./x.py install -j "$(nproc)"

  cd ../dest-rust

  # delete unnecessary files, e.g. files only used for the uninstall script
  rm usr/lib/rustlib/{components,install.log,rust-installer-version,uninstall.sh}
  rm usr/lib/rustlib/manifest-*

  # rustbuild always installs copies of the shared libraries to /usr/lib,
  # overwrite them with symlinks to the per-architecture versions
  ln -srft usr/lib   usr/lib/rustlib/${_rust_target}/lib/*.so
  case "${CARCH}" in
    x86_64)
      mkdir -p usr/lib32
      ln -srft usr/lib32 usr/lib/rustlib/i686-unknown-linux-gnu/lib/*.so
    ;;
  esac

  mkdir -p usr/share/licenses/rust
  mv -t usr/share/licenses/rust usr/share/doc/rust/{COPYRIGHT,LICENSE*}

  case "${CARCH}" in
    x86_64)
      _pick dest-i686 usr/lib/rustlib/i686-unknown-linux-gnu usr/lib32
      _pick dest-musl usr/lib/rustlib/x86_64-unknown-linux-musl
    ;;
    powerpc64le)
     _pick dest-wasm usr/lib/rustlib/wasm32-*
    ;;
  esac
  _pick dest-src  usr/lib/rustlib/src
}

package_rust() {
  optdepends=(
    'gdb: rust-gdb script'
    'lldb: rust-lldb script'
  )
  provides=(
    cargo
    rustfmt
  )
  conflicts=(
    cargo
    'rust-docs<1:1.56.1-3'
    rustfmt
  )
  replaces=(
    cargo
    cargo-tree
    'rust-docs<1:1.56.1-3'
    rustfmt
  )

  cp -a dest-rust/* "$pkgdir"
}

package_lib32-rust-libs() {
  pkgdesc="32-bit target and libraries for Rust"
  depends=(
    lib32-gcc-libs
    rust
  )
  provides=(lib32-rust)
  conflicts=(lib32-rust)
  replaces=(lib32-rust)

  cp -a dest-i686/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_rust-musl() {
  pkgdesc="Musl target for Rust"
  depends=(rust)

  cp -a dest-musl/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_rust-wasm() {
  pkgdesc="WebAssembly targets for Rust"
  depends=(
    lld
    rust
  )

  cp -a dest-wasm/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_rust-src() {
  pkgdesc="Source code for the Rust standard library"
  depends=(rust)

  cp -a dest-src/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

# vim:set ts=2 sw=2 et:
