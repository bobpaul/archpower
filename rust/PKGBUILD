# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer: Johannes Löthberg <johannes@kyriasis.com>
# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Contributor: Alexander F Rødseth <xyproto@archlinux.org>
# Contributor: Daniel Micay <danielmicay@gmail.com>
# Contributor: userwithuid <userwithuid@gmail.com>

pkgbase=rust
pkgname=(
  rust
  rust-src
)
epoch=1
pkgver=1.69.0
pkgrel=3
pkgdesc="Systems programming language focused on safety, speed and concurrency"
url=https://www.rust-lang.org/
arch=(x86_64 powerpc64le powerpc64 powerpc riscv64)
license=(
  MIT
  Apache
)
options=(
  !debug
  !emptydirs
  !lto
  !strip
)
depends=(
  gcc-libs
  llvm-libs
  curl
  libssh2
  gcc
)
makedepends=(
  rust 
  libffi
  perl
  python
  cmake
  ninja
  wasi-libc lld llvm)
makedepends_x86_64=(lib32-gcc-libs musl)
checkdepends=(procps-ng gdb)
source=(
  "https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.gz"{,.asc}
  0001-Use-ELFv2-ABI-on-all-powerpc64-targets.patch
)
sha256sums=('fb05971867ad6ccabbd3720279f5a94b99f61024923187b56bb5c455fa3cf60f'
            'SKIP'
            '586419a41dd6788e18f1ca7a59a43fcad495bdee977b6889d478a77aa8076436')
validpgpkeys=(108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE  # Rust Language (Tag and Release Signing Key) <rust-key@rust-lang.org>
              474E22316ABF4785A88C6E8EA2C794A986419D8A  # Tom Stellard <tstellar@redhat.com>
              B6C8F98282B944E3B0D5C2530FC3042E345AD05D) # Hans Wennborg <hans@chromium.org>

_jemalloc='true'
case "${CARCH}" in
  powerpc64le)
    _rust_target='powerpc64le-unknown-linux-gnu'
    _build_tools='"cargo", "rls", "clippy", "rustfmt", "analysis", "src", "rust-demangler"'
    _config_targets='"powerpc64le-unknown-linux-gnu","wasm32-unknown-unknown","wasm32-wasi"'
    _config_target_extras=''
    pkgname+=(rust-wasm)
  ;;
  powerpc64)
    _rust_target='powerpc64-unknown-linux-gnu'
    _build_tools='"cargo", "clippy", "rustfmt", "analysis", "src", "rust-demangler"'
    _config_targets='"powerpc64-unknown-linux-gnu"'
    _config_target_extras=''
  ;;
  powerpc)
    # fails to link with -O3 due to 32bit related relocation problems
    export RUSTFLAGS="-C opt-level=2"
    _rust_target='powerpc-unknown-linux-gnu'
    _build_tools='"cargo", "clippy", "rustfmt", "analysis", "src", "rust-demangler"'
    _config_targets='"powerpc-unknown-linux-gnu"'
    _config_target_extras=''
  ;;
  riscv64)
    _rust_target='riscv64gc-unknown-linux-gnu'
    _build_tools='"cargo", "rls", "clippy", "rustfmt", "analysis", "src", "rust-demangler"'
    _config_targets='"riscv64gc-unknown-linux-gnu"'
    _config_target_extras=''
    _jemalloc=false
  ;;
  x86_64)
    _rust_target="${CHOST}"
    _build_tools='"cargo", "rls", "clippy", "rustfmt", "analysis", "src", "rust-demangler"'
    _config_targets='"x86_64-unknown-linux-gnu","i686-unknown-linux-gnu","x86_64-unknown-linux-musl","wasm32-unknown-unknown","wasm32-wasi"'
    _config_target_extras='[target.x86_64-unknown-linux-musl]
sanitizers = false
musl-root = "/usr/lib/musl"'
    pkgname+=(rust-wasmi lib32-rust-libs rust-musl)
  ;;
esac

prepare() {
  cd rustc-$pkgver-src

  patch -Np1 -i ../0001-Use-ELFv2-ABI-on-all-powerpc64-targets.patch

  cat >config.toml <<END
changelog-seen = 2
profile = "user"

[llvm]
link-shared = true

[build]
target = [
  ${_config_targets}
]
cargo = "/usr/bin/cargo"
rustc = "/usr/bin/rustc"
rustfmt = "/usr/bin/rustfmt"
locked-deps = true
vendor = true
tools = [${_build_tools}]
sanitizers = true
profiler = true

# Generating docs fails with the wasm32-* targets
docs = false

[install]
prefix = "/usr"

[rust]
debuginfo-level-std = 2
channel = "stable"
description = "Arch POWER $pkgbase $epoch:$pkgver-$pkgrel"
rpath = false
backtrace-on-ice = true
remap-debuginfo = true
jemalloc = ${_jemalloc} 

# LLVM crashes when passing an object through ThinLTO twice.  This is triggered
# when using rust code in cross-language LTO if libstd was built using ThinLTO.
# http://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html
# https://github.com/rust-lang/rust/issues/54872
codegen-units-std = 1

# musl target produces warnings
deny-warnings = false

[dist]
compression-formats = ["gz"]

[target.${_rust_target}]
llvm-config = "/usr/bin/llvm-config"

${_config_target_extras}

[target.wasm32-unknown-unknown]
sanitizers = false
profiler = false

[target.wasm32-wasi]
sanitizers = false
profiler = false
wasi-root = "/usr/share/wasi-sysroot"
END

  cd src/bootstrap
  cargo update -p cc
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/$f"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

build() {
  cd rustc-$pkgver-src

  export RUST_BACKTRACE=1

  DESTDIR="$srcdir/dest-rust" python ./x.py install -j "$(nproc)"

  cd ../dest-rust

  # delete unnecessary files, e.g. files only used for the uninstall script
  rm usr/lib/rustlib/{components,install.log,rust-installer-version,uninstall.sh}
  rm usr/lib/rustlib/manifest-*

  # rustbuild always installs copies of the shared libraries to /usr/lib,
  # overwrite them with symlinks to the per-architecture versions
  ln -srft usr/lib   usr/lib/rustlib/${_rust_target}/lib/*.so

  case "${CARCH}" in
    x86_64)
      mkdir -p usr/lib32
      ln -srft usr/lib32 usr/lib/rustlib/i686-unknown-linux-gnu/lib/*.so
    ;;
  esac

  mkdir -p usr/share/bash-completion
  mv etc/bash_completion.d usr/share/bash-completion/completions

  mkdir -p usr/share/licenses/rust
  mv -t usr/share/licenses/rust usr/share/doc/rust/{COPYRIGHT,LICENSE*}

  case "${CARCH}" in
    x86_64)
      _pick dest-i686 usr/lib/rustlib/i686-unknown-linux-gnu usr/lib32
      _pick dest-musl usr/lib/rustlib/x86_64-unknown-linux-musl
    ;;
  esac

  case "${CARCH}" in
    powerpc64le|x86_64 ) _pick dest-wasm usr/lib/rustlib/wasm32-* ;;
  esac
  _pick dest-src  usr/lib/rustlib/src
}

package_rust() {
  optdepends=('lldb: rust-lldb script'
              'gdb: rust-gdb script')
  provides=(cargo rustfmt)
  conflicts=(cargo rustfmt 'rust-docs<1:1.56.1-3')
  replaces=(cargo rustfmt cargo-tree 'rust-docs<1:1.56.1-3')

  cp -a dest-rust/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_lib32-rust-libs() {
  pkgdesc="32-bit target and libraries for Rust"
  depends=(rust lib32-gcc-libs)
  provides=(lib32-rust)
  conflicts=(lib32-rust)
  replaces=(lib32-rust)

  cp -a dest-i686/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_rust-musl() {
  pkgdesc="Musl target for Rust"
  depends=(rust)

  cp -a dest-musl/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_rust-wasm() {
  pkgdesc="WebAssembly targets for Rust"
  depends=(rust lld)

  cp -a dest-wasm/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_rust-src() {
  pkgdesc="Source code for the Rust standard library"
  depends=(rust)

  cp -a dest-src/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

# vim:set ts=2 sw=2 et:
