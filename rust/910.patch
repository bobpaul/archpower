From 1c51f887f1ffe2e5ba02b2ee9ea131b8ef546dd6 Mon Sep 17 00:00:00 2001
From: Alex Butler <alexheretic@gmail.com>
Date: Fri, 15 Jun 2018 09:54:55 +0100
Subject: [PATCH] Use AtomicU64 ids

---
 src/cmd.rs       | 20 ++++++++++----------
 src/server/io.rs |  8 ++++----
 2 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/src/cmd.rs b/src/cmd.rs
index 8645750142..5a3eb46546 100644
--- a/src/cmd.rs
+++ b/src/cmd.rs
@@ -16,12 +16,15 @@ use actions::requests;
 use analysis::{AnalysisHost, Target};
 use config::Config;
 use server::{self, LsService, Notification, Request, RequestId};
+use std::sync::atomic::{AtomicU64, Ordering};
 use vfs::Vfs;
 
-use ls_types::{ClientCapabilities, CodeActionContext, CodeActionParams, DocumentFormattingParams,
-               DocumentRangeFormattingParams, FormattingOptions, InitializeParams, Position,
-               Range, RenameParams, TextDocumentIdentifier, TextDocumentPositionParams,
-               TraceOption, WorkspaceSymbolParams, CompletionItem, DocumentSymbolParams};
+use ls_types::{
+    ClientCapabilities, CodeActionContext, CodeActionParams, CompletionItem,
+    DocumentFormattingParams, DocumentRangeFormattingParams, DocumentSymbolParams,
+    FormattingOptions, InitializeParams, Position, Range, RenameParams, TextDocumentIdentifier,
+    TextDocumentPositionParams, TraceOption, WorkspaceSymbolParams,
+};
 
 use std::collections::HashMap;
 use std::fmt;
@@ -29,8 +32,8 @@ use std::io::{stdin, stdout, Write};
 use std::marker::PhantomData;
 use std::path::Path;
 use std::str::FromStr;
-use std::sync::{Arc, Mutex};
 use std::sync::mpsc::{channel, Receiver, Sender};
+use std::sync::{Arc, Mutex};
 use std::thread;
 use std::time::{Duration, Instant};
 use url::Url;
@@ -412,11 +415,8 @@ fn url(file_name: &str) -> Url {
 }
 
 fn next_id() -> RequestId {
-    static mut ID: u64 = 0;
-    unsafe {
-        ID += 1;
-        RequestId::Num(ID)
-    }
+    static ID: AtomicU64 = AtomicU64::new(1);
+    RequestId::Num(ID.fetch_add(1, Ordering::SeqCst))
 }
 
 // Custom reader and output for the RLS server.
diff --git a/src/server/io.rs b/src/server/io.rs
index 01d1c11f53..63a0447462 100644
--- a/src/server/io.rs
+++ b/src/server/io.rs
@@ -16,7 +16,7 @@ use lsp_data::{LSPNotification, LSPRequest};
 
 use std::fmt;
 use std::io::{self, BufRead, Write};
-use std::sync::atomic::{AtomicU32, Ordering};
+use std::sync::atomic::{AtomicU64, Ordering};
 use std::sync::Arc;
 
 use jsonrpc_core::{self as jsonrpc, response, version, Id};
@@ -182,14 +182,14 @@ pub trait Output: Sync + Send + Clone + 'static {
 /// An output that sends notifications and responses on `stdout`.
 #[derive(Clone)]
 pub(super) struct StdioOutput {
-    next_id: Arc<AtomicU32>,
+    next_id: Arc<AtomicU64>,
 }
 
 impl StdioOutput {
     /// Construct a new `stdout` output.
     pub fn new() -> StdioOutput {
         StdioOutput {
-            next_id: Arc::new(AtomicU32::new(1)),
+            next_id: Arc::new(AtomicU64::new(1)),
         }
     }
 }
@@ -207,7 +207,7 @@ impl Output for StdioOutput {
     }
 
     fn provide_id(&self) -> RequestId {
-        RequestId::Num(self.next_id.fetch_add(1, Ordering::SeqCst) as u64)
+        RequestId::Num(self.next_id.fetch_add(1, Ordering::SeqCst))
     }
 }
 
